
robosample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  00001192  00001226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001192  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000409  0080021a  0080021a  00001340  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001398  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014cb  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000815  00000000  00000000  000029ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009bf  00000000  00000000  000031c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00003b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063a  00000000  00000000  00003bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a0  00000000  00000000  0000422e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000042ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 06 04 	jmp	0x80c	; 0x80c <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e9       	ldi	r30, 0x92	; 146
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 32       	cpi	r26, 0x23	; 35
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 3f 08 	call	0x107e	; 0x107e <main>
      9e:	0c 94 c7 08 	jmp	0x118e	; 0x118e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
void CheckCollision (void *data)
{
    for(;;)
    {
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
/*------High pririority task----------*/
void CheckCollision (void *data)
{
    for(;;)
    {
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      a8:	0e 94 08 02 	call	0x410	; 0x410 <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      b0:	c0 93 9e 02 	sts	0x029E, r28	; 0x80029e <myrobot+0x4>
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */

		OSTimeDlyHMSM(0, 0, 0, 100);                /* Task period ~ 100 ms              */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <OSTimeDlyHMSM>
/*------High pririority task----------*/
void CheckCollision (void *data)
{
    for(;;)
    {
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */
      c4:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

    for(;;)
    {
        speed_r = myrobot.rspeed;
        speed_l = myrobot.lspeed;
        robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <myrobot>
      ce:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <myrobot+0x1>
      d2:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <myrobot+0x2>
      d6:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <myrobot+0x3>
      da:	0e 94 ad 01 	call	0x35a	; 0x35a <robo_motorSpeed>
        OSTimeDlyHMSM(0, 0, 0, 250);                /* Task period ~ 250 ms              */
      de:	2a ef       	ldi	r18, 0xFA	; 250
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <Navig>:
            myrobot.rspeed   = -LOW_SPEED;          /* REVERSE */
            myrobot.lspeed   = -LOW_SPEED;
        }
        else                                        /* obstacle is far away & no collision   */
        {
            myrobot.rspeed   = MEDIUM_SPEED;        /* move forward with medium speed        */
      ee:	02 e3       	ldi	r16, 0x32	; 50
      f0:	10 e0       	ldi	r17, 0x00	; 0
{
    for (;;)
    {
        if (myrobot.obstacle == 1)                  /* If blocked then reverse              */
        {
            myrobot.rspeed   = -LOW_SPEED;          /* REVERSE */
      f2:	c2 ee       	ldi	r28, 0xE2	; 226
      f4:	df ef       	ldi	r29, 0xFF	; 255
        }

		if (robo_lightSensor() > 60)                /* it is too bright, I'm photophobia     */
		{
			myrobot.rspeed   = -LOW_SPEED;          /* turn right to avoid                   */
            myrobot.lspeed   =  LOW_SPEED;
      f6:	8e e1       	ldi	r24, 0x1E	; 30
      f8:	e8 2e       	mov	r14, r24
      fa:	f1 2c       	mov	r15, r1

void Navig (void *data)
{
    for (;;)
    {
        if (myrobot.obstacle == 1)                  /* If blocked then reverse              */
      fc:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <myrobot+0x4>
     100:	81 30       	cpi	r24, 0x01	; 1
     102:	e1 f4       	brne	.+56     	; 0x13c <Navig+0x4e>
        {
            myrobot.rspeed   = -LOW_SPEED;          /* REVERSE */
     104:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     108:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
            myrobot.lspeed   = -LOW_SPEED;
     10c:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     110:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
        {
            myrobot.rspeed   = MEDIUM_SPEED;        /* move forward with medium speed        */
            myrobot.lspeed   = MEDIUM_SPEED;
        }

		if (robo_lightSensor() > 60)                /* it is too bright, I'm photophobia     */
     114:	0e 94 14 02 	call	0x428	; 0x428 <robo_lightSensor>
     118:	cd 97       	sbiw	r24, 0x3d	; 61
     11a:	44 f0       	brlt	.+16     	; 0x12c <Navig+0x3e>
		{
			myrobot.rspeed   = -LOW_SPEED;          /* turn right to avoid                   */
     11c:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     120:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
            myrobot.lspeed   =  LOW_SPEED;
     124:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <myrobot+0x3>
     128:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <myrobot+0x2>
		}
        OSTimeDlyHMSM(0, 0, 0, 500);                /* Task period ~ 500 ms                  */
     12c:	24 ef       	ldi	r18, 0xF4	; 244
     12e:	31 e0       	ldi	r19, 0x01	; 1
     130:	40 e0       	ldi	r20, 0x00	; 0
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <OSTimeDlyHMSM>

void Navig (void *data)
{
    for (;;)
    {
        if (myrobot.obstacle == 1)                  /* If blocked then reverse              */
     13a:	e0 cf       	rjmp	.-64     	; 0xfc <Navig+0xe>
            myrobot.rspeed   = -LOW_SPEED;          /* REVERSE */
            myrobot.lspeed   = -LOW_SPEED;
        }
        else                                        /* obstacle is far away & no collision   */
        {
            myrobot.rspeed   = MEDIUM_SPEED;        /* move forward with medium speed        */
     13c:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     140:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
            myrobot.lspeed   = MEDIUM_SPEED;
     144:	10 93 9d 02 	sts	0x029D, r17	; 0x80029d <myrobot+0x3>
     148:	00 93 9c 02 	sts	0x029C, r16	; 0x80029c <myrobot+0x2>
     14c:	e3 cf       	rjmp	.-58     	; 0x114 <Navig+0x26>

0000014e <TestLineSensor>:
void TestLineSensor (void *data)
{
    for (;;)
    {

	 cputchar(robo_lineSensor());
     14e:	0e 94 2b 02 	call	0x456	; 0x456 <robo_lineSensor>
     152:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <cputchar>
      OSTimeDlyHMSM(0, 0, 0, 250);               
     156:	2a ef       	ldi	r18, 0xFA	; 250
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	40 e0       	ldi	r20, 0x00	; 0
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <OSTimeDlyHMSM>
     164:	f4 cf       	rjmp	.-24     	; 0x14e <TestLineSensor>

00000166 <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here           */
void TaskStart( void *data )
{
    OS_ticks_init();                                        /* enable RTOS timer tick        */
     166:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <OS_ticks_init>

    OSTaskCreate(CheckCollision,                            /* Task function                 */
     16a:	22 e0       	ldi	r18, 0x02	; 2
     16c:	49 e9       	ldi	r20, 0x99	; 153
     16e:	52 e0       	ldi	r21, 0x02	; 2
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	83 e5       	ldi	r24, 0x53	; 83
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 83 06 	call	0xd06	; 0xd06 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&ChkCollideStk[TASK_STK_SZ - 1],    /* stack allocated to task       */
                TASK_CHKCOLLIDE_PRIO);                      /* priority of task              */

    OSTaskCreate(CntrlMotors,                               /* Task function                 */
     17c:	23 e0       	ldi	r18, 0x03	; 3
     17e:	4e e1       	ldi	r20, 0x1E	; 30
     180:	53 e0       	ldi	r21, 0x03	; 3
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	85 e6       	ldi	r24, 0x65	; 101
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 83 06 	call	0xd06	; 0xd06 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&CtrlmotorStk[TASK_STK_SZ - 1],     /* stack allocated to task       */
                TASK_CTRLMOTOR_PRIO);                       /* priority of task              */

    OSTaskCreate(Navig,                                     /* Task function                 */
     18e:	24 e0       	ldi	r18, 0x04	; 4
     190:	4e e9       	ldi	r20, 0x9E	; 158
     192:	54 e0       	ldi	r21, 0x04	; 4
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	87 e7       	ldi	r24, 0x77	; 119
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 83 06 	call	0xd06	; 0xd06 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&NavigStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_NAVIG_PRIO);                           /* priority of task              */

 OSTaskCreate(TestLineSensor,                                     /* Task function                 */
     1a0:	25 e0       	ldi	r18, 0x05	; 5
     1a2:	4e e1       	ldi	r20, 0x1E	; 30
     1a4:	54 e0       	ldi	r21, 0x04	; 4
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	60 e0       	ldi	r22, 0x00	; 0
     1aa:	87 ea       	ldi	r24, 0xA7	; 167
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 83 06 	call	0xd06	; 0xd06 <OSTaskCreate>
                (void *)&LineStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_LINE_PRIO); 
    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
        robo_LED_toggle();                                  /* Show that we are alive        */
     1b2:	c1 e0       	ldi	r28, 0x01	; 1
                (void *)0,                                  /* nothing passed to task        */
                (void *)&LineStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_LINE_PRIO); 
    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	45 e0       	ldi	r20, 0x05	; 5
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <OSTimeDlyHMSM>
        robo_LED_toggle();                                  /* Show that we are alive        */
     1c2:	85 b1       	in	r24, 0x05	; 5
     1c4:	8c 27       	eor	r24, r28
     1c6:	85 b9       	out	0x05, r24	; 5
     1c8:	f5 cf       	rjmp	.-22     	; 0x1b4 <TaskStart+0x4e>

000001ca <ADC_init>:
     1ca:	80 e4       	ldi	r24, 0x40	; 64
     1cc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     1d0:	86 e8       	ldi	r24, 0x86	; 134
     1d2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     1d6:	08 95       	ret

000001d8 <ADC_read>:
     1d8:	f8 94       	cli
     1da:	80 64       	ori	r24, 0x40	; 64
     1dc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     1e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     1e4:	80 64       	ori	r24, 0x40	; 64
     1e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     1ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     1ee:	84 ff       	sbrs	r24, 4
     1f0:	fc cf       	rjmp	.-8      	; 0x1ea <ADC_read+0x12>
     1f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     1f6:	80 61       	ori	r24, 0x10	; 16
     1f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     1fc:	78 94       	sei
     1fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     202:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     206:	93 70       	andi	r25, 0x03	; 3
     208:	08 95       	ret

0000020a <PWM8_write>:
     20a:	81 11       	cpse	r24, r1
     20c:	05 c0       	rjmp	.+10     	; 0x218 <PWM8_write+0xe>
     20e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     212:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     216:	08 95       	ret
     218:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     21c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     220:	08 95       	ret

00000222 <motor_init>:
     222:	8a b1       	in	r24, 0x0a	; 10
     224:	80 6f       	ori	r24, 0xF0	; 240
     226:	8a b9       	out	0x0a, r24	; 10
     228:	8b b1       	in	r24, 0x0b	; 11
     22a:	8f 70       	andi	r24, 0x0F	; 15
     22c:	8b b9       	out	0x0b, r24	; 11
     22e:	81 ea       	ldi	r24, 0xA1	; 161
     230:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     23a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     23e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     242:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     246:	a8 e8       	ldi	r26, 0x88	; 136
     248:	b0 e0       	ldi	r27, 0x00	; 0
     24a:	1c 92       	st	X, r1
     24c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     250:	ea e8       	ldi	r30, 0x8A	; 138
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	10 82       	st	Z, r1
     256:	84 b1       	in	r24, 0x04	; 4
     258:	86 60       	ori	r24, 0x06	; 6
     25a:	84 b9       	out	0x04, r24	; 4
     25c:	11 96       	adiw	r26, 0x01	; 1
     25e:	1c 92       	st	X, r1
     260:	1e 92       	st	-X, r1
     262:	11 82       	std	Z+1, r1	; 0x01
     264:	10 82       	st	Z, r1
     266:	08 95       	ret

00000268 <motor_set_speed>:
     268:	77 ff       	sbrs	r23, 7
     26a:	02 c0       	rjmp	.+4      	; 0x270 <motor_set_speed+0x8>
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	65 36       	cpi	r22, 0x65	; 101
     272:	71 05       	cpc	r23, r1
     274:	14 f0       	brlt	.+4      	; 0x27a <motor_set_speed+0x12>
     276:	64 e6       	ldi	r22, 0x64	; 100
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	9b 01       	movw	r18, r22
     27c:	22 0f       	add	r18, r18
     27e:	33 1f       	adc	r19, r19
     280:	75 95       	asr	r23
     282:	67 95       	ror	r22
     284:	62 0f       	add	r22, r18
     286:	73 1f       	adc	r23, r19
     288:	81 11       	cpse	r24, r1
     28a:	09 c0       	rjmp	.+18     	; 0x29e <motor_set_speed+0x36>
     28c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     290:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     294:	70 93 a0 04 	sts	0x04A0, r23	; 0x8004a0 <rightWst+0x1>
     298:	60 93 9f 04 	sts	0x049F, r22	; 0x80049f <rightWst>
     29c:	08 95       	ret
     29e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     2a2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     2a6:	70 93 a4 04 	sts	0x04A4, r23	; 0x8004a4 <leftWst+0x1>
     2aa:	60 93 a3 04 	sts	0x04A3, r22	; 0x8004a3 <leftWst>
     2ae:	08 95       	ret

000002b0 <motor_set_dir>:
     2b0:	cf 93       	push	r28
     2b2:	c6 2f       	mov	r28, r22
     2b4:	26 2f       	mov	r18, r22
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	81 11       	cpse	r24, r1
     2ba:	2b c0       	rjmp	.+86     	; 0x312 <motor_set_dir+0x62>
     2bc:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <rightWst+0x2>
     2c0:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <rightWst+0x3>
     2c4:	82 17       	cp	r24, r18
     2c6:	93 07       	cpc	r25, r19
     2c8:	59 f0       	breq	.+22     	; 0x2e0 <motor_set_dir+0x30>
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	0e 94 34 01 	call	0x268	; 0x268 <motor_set_speed>
     2d4:	8f e9       	ldi	r24, 0x9F	; 159
     2d6:	9f e0       	ldi	r25, 0x0F	; 15
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <motor_set_dir+0x28>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <motor_set_dir+0x2e>
     2de:	00 00       	nop
     2e0:	c1 11       	cpse	r28, r1
     2e2:	0e c0       	rjmp	.+28     	; 0x300 <motor_set_dir+0x50>
     2e4:	5e 98       	cbi	0x0b, 6	; 11
     2e6:	5f 9a       	sbi	0x0b, 7	; 11
     2e8:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <rightWst+0x3>
     2ec:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <rightWst+0x2>
     2f0:	8f e3       	ldi	r24, 0x3F	; 63
     2f2:	9c e9       	ldi	r25, 0x9C	; 156
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <motor_set_dir+0x44>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <motor_set_dir+0x4a>
     2fa:	00 00       	nop
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret
     300:	5e 9a       	sbi	0x0b, 6	; 11
     302:	5f 98       	cbi	0x0b, 7	; 11
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	90 93 a2 04 	sts	0x04A2, r25	; 0x8004a2 <rightWst+0x3>
     30c:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <rightWst+0x2>
     310:	ef cf       	rjmp	.-34     	; 0x2f0 <motor_set_dir+0x40>
     312:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <leftWst+0x2>
     316:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <leftWst+0x3>
     31a:	82 17       	cp	r24, r18
     31c:	93 07       	cpc	r25, r19
     31e:	59 f0       	breq	.+22     	; 0x336 <motor_set_dir+0x86>
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	0e 94 34 01 	call	0x268	; 0x268 <motor_set_speed>
     32a:	8f e9       	ldi	r24, 0x9F	; 159
     32c:	9f e0       	ldi	r25, 0x0F	; 15
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <motor_set_dir+0x7e>
     332:	00 c0       	rjmp	.+0      	; 0x334 <motor_set_dir+0x84>
     334:	00 00       	nop
     336:	c1 11       	cpse	r28, r1
     338:	07 c0       	rjmp	.+14     	; 0x348 <motor_set_dir+0x98>
     33a:	5c 9a       	sbi	0x0b, 4	; 11
     33c:	5d 98       	cbi	0x0b, 5	; 11
     33e:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <leftWst+0x3>
     342:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <leftWst+0x2>
     346:	d4 cf       	rjmp	.-88     	; 0x2f0 <motor_set_dir+0x40>
     348:	5c 98       	cbi	0x0b, 4	; 11
     34a:	5d 9a       	sbi	0x0b, 5	; 11
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <leftWst+0x3>
     354:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <leftWst+0x2>
     358:	cb cf       	rjmp	.-106    	; 0x2f0 <motor_set_dir+0x40>

0000035a <robo_motorSpeed>:
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	ec 01       	movw	r28, r24
     364:	8b 01       	movw	r16, r22
     366:	97 ff       	sbrs	r25, 7
     368:	1c c0       	rjmp	.+56     	; 0x3a2 <robo_motorSpeed+0x48>
     36a:	61 e0       	ldi	r22, 0x01	; 1
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <motor_set_dir>
     372:	d1 95       	neg	r29
     374:	c1 95       	neg	r28
     376:	d1 09       	sbc	r29, r1
     378:	17 ff       	sbrs	r17, 7
     37a:	18 c0       	rjmp	.+48     	; 0x3ac <robo_motorSpeed+0x52>
     37c:	61 e0       	ldi	r22, 0x01	; 1
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	0e 94 58 01 	call	0x2b0	; 0x2b0 <motor_set_dir>
     384:	11 95       	neg	r17
     386:	01 95       	neg	r16
     388:	11 09       	sbc	r17, r1
     38a:	b8 01       	movw	r22, r16
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 34 01 	call	0x268	; 0x268 <motor_set_speed>
     392:	be 01       	movw	r22, r28
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	0c 94 34 01 	jmp	0x268	; 0x268 <motor_set_speed>
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <motor_set_dir>
     3aa:	e6 cf       	rjmp	.-52     	; 0x378 <robo_motorSpeed+0x1e>
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <motor_set_dir>
     3b4:	ea cf       	rjmp	.-44     	; 0x38a <robo_motorSpeed+0x30>

000003b6 <USART0_init>:
     3b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     3ba:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     3be:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     3c2:	88 e1       	ldi	r24, 0x18	; 24
     3c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     3c8:	86 e0       	ldi	r24, 0x06	; 6
     3ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     3ce:	08 95       	ret

000003d0 <cputchar>:
     3d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     3d4:	95 ff       	sbrs	r25, 5
     3d6:	fc cf       	rjmp	.-8      	; 0x3d0 <cputchar>
     3d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     3dc:	08 95       	ret

000003de <cgetchar>:
     3de:	cf 93       	push	r28
     3e0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     3e4:	87 ff       	sbrs	r24, 7
     3e6:	fc cf       	rjmp	.-8      	; 0x3e0 <cgetchar+0x2>
     3e8:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     3ec:	8c 2f       	mov	r24, r28
     3ee:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <cputchar>
     3f2:	8c 2f       	mov	r24, r28
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <cputs>:
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	ec 01       	movw	r28, r24
     3fe:	89 91       	ld	r24, Y+
     400:	81 11       	cpse	r24, r1
     402:	03 c0       	rjmp	.+6      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret
     40a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <cputchar>
     40e:	f7 cf       	rjmp	.-18     	; 0x3fe <cputs+0x6>

00000410 <robo_proxSensor>:
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <ADC_read>
     416:	21 e0       	ldi	r18, 0x01	; 1
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	84 36       	cpi	r24, 0x64	; 100
     41c:	91 05       	cpc	r25, r1
     41e:	10 f0       	brcs	.+4      	; 0x424 <robo_proxSensor+0x14>
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	20 e0       	ldi	r18, 0x00	; 0
     424:	c9 01       	movw	r24, r18
     426:	08 95       	ret

00000428 <robo_lightSensor>:
     428:	84 e0       	ldi	r24, 0x04	; 4
     42a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <ADC_read>
     42e:	2b ef       	ldi	r18, 0xFB	; 251
     430:	ac 01       	movw	r20, r24
     432:	24 03       	mulsu	r18, r20
     434:	c0 01       	movw	r24, r0
     436:	25 9f       	mul	r18, r21
     438:	90 0d       	add	r25, r0
     43a:	11 24       	eor	r1, r1
     43c:	85 50       	subi	r24, 0x05	; 5
     43e:	9c 4e       	sbci	r25, 0xEC	; 236
     440:	63 e3       	ldi	r22, 0x33	; 51
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	0e 94 77 08 	call	0x10ee	; 0x10ee <__divmodhi4>
     448:	cb 01       	movw	r24, r22
     44a:	65 36       	cpi	r22, 0x65	; 101
     44c:	71 05       	cpc	r23, r1
     44e:	14 f0       	brlt	.+4      	; 0x454 <robo_lightSensor+0x2c>
     450:	84 e6       	ldi	r24, 0x64	; 100
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	08 95       	ret

00000456 <robo_lineSensor>:
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	c0 e0       	ldi	r28, 0x00	; 0
     45c:	d1 e0       	ldi	r29, 0x01	; 1
     45e:	cc 0f       	add	r28, r28
     460:	8d 2f       	mov	r24, r29
     462:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <ADC_read>
     466:	8c 32       	cpi	r24, 0x2C	; 44
     468:	91 40       	sbci	r25, 0x01	; 1
     46a:	0c f4       	brge	.+2      	; 0x46e <robo_lineSensor+0x18>
     46c:	c1 60       	ori	r28, 0x01	; 1
     46e:	df 5f       	subi	r29, 0xFF	; 255
     470:	d4 30       	cpi	r29, 0x04	; 4
     472:	a9 f7       	brne	.-22     	; 0x45e <robo_lineSensor+0x8>
     474:	8c 2f       	mov	r24, r28
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	08 95       	ret

0000047e <robo_bumpSensorR>:
     47e:	83 b1       	in	r24, 0x03	; 3
     480:	82 95       	swap	r24
     482:	8f 70       	andi	r24, 0x0F	; 15
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	89 27       	eor	r24, r25
     488:	81 70       	andi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	08 95       	ret

0000048e <robo_bumpSensorL>:
     48e:	83 b1       	in	r24, 0x03	; 3
     490:	86 95       	lsr	r24
     492:	86 95       	lsr	r24
     494:	86 95       	lsr	r24
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	89 27       	eor	r24, r25
     49a:	81 70       	andi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	08 95       	ret

000004a0 <robo_Honk>:
     4a0:	5b 9a       	sbi	0x0b, 3	; 11
     4a2:	2f ef       	ldi	r18, 0xFF	; 255
     4a4:	85 ea       	ldi	r24, 0xA5	; 165
     4a6:	9e e0       	ldi	r25, 0x0E	; 14
     4a8:	21 50       	subi	r18, 0x01	; 1
     4aa:	80 40       	sbci	r24, 0x00	; 0
     4ac:	90 40       	sbci	r25, 0x00	; 0
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <robo_Honk+0x8>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <robo_Honk+0x12>
     4b2:	00 00       	nop
     4b4:	5b 98       	cbi	0x0b, 3	; 11
     4b6:	2f ef       	ldi	r18, 0xFF	; 255
     4b8:	85 ea       	ldi	r24, 0xA5	; 165
     4ba:	9e e0       	ldi	r25, 0x0E	; 14
     4bc:	21 50       	subi	r18, 0x01	; 1
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	90 40       	sbci	r25, 0x00	; 0
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <robo_Honk+0x1c>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <robo_Honk+0x26>
     4c6:	00 00       	nop
     4c8:	08 95       	ret

000004ca <robo_checkBattery>:
     4ca:	85 e0       	ldi	r24, 0x05	; 5
     4cc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <ADC_read>
     4d0:	84 3f       	cpi	r24, 0xF4	; 244
     4d2:	91 40       	sbci	r25, 0x01	; 1
     4d4:	10 f4       	brcc	.+4      	; 0x4da <robo_checkBattery+0x10>
     4d6:	28 9a       	sbi	0x05, 0	; 5
     4d8:	08 95       	ret
     4da:	28 98       	cbi	0x05, 0	; 5
     4dc:	08 95       	ret

000004de <robo_goPressed>:
     4de:	89 b1       	in	r24, 0x09	; 9
     4e0:	82 fb       	bst	r24, 2
     4e2:	88 27       	eor	r24, r24
     4e4:	80 f9       	bld	r24, 0
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	89 27       	eor	r24, r25
     4ea:	08 95       	ret

000004ec <robo_wait4goPress>:
     4ec:	0e 94 6f 02 	call	0x4de	; 0x4de <robo_goPressed>
     4f0:	88 23       	and	r24, r24
     4f2:	e1 f3       	breq	.-8      	; 0x4ec <robo_wait4goPress>
     4f4:	08 95       	ret

000004f6 <OS_ticks_init>:
     4f6:	f8 94       	cli
     4f8:	85 e0       	ldi	r24, 0x05	; 5
     4fa:	85 bd       	out	0x25, r24	; 37
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     502:	84 e6       	ldi	r24, 0x64	; 100
     504:	86 bd       	out	0x26, r24	; 38
     506:	78 94       	sei
     508:	08 95       	ret

0000050a <HAL_init>:
     50a:	87 e6       	ldi	r24, 0x67	; 103
     50c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <USART0_init>
     510:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <ADC_init>

00000514 <robo_Setup>:
     514:	0e 94 85 02 	call	0x50a	; 0x50a <HAL_init>
     518:	0e 94 11 01 	call	0x222	; 0x222 <motor_init>
     51c:	53 9a       	sbi	0x0a, 3	; 10
     51e:	5b 98       	cbi	0x0b, 3	; 11
     520:	20 9a       	sbi	0x04, 0	; 4
     522:	52 98       	cbi	0x0a, 2	; 10
     524:	5a 9a       	sbi	0x0b, 2	; 11
     526:	24 98       	cbi	0x04, 4	; 4
     528:	23 98       	cbi	0x04, 3	; 4
     52a:	85 b1       	in	r24, 0x05	; 5
     52c:	88 61       	ori	r24, 0x18	; 24
     52e:	85 b9       	out	0x05, r24	; 5
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	0e 94 58 01 	call	0x2b0	; 0x2b0 <motor_set_dir>
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <motor_set_dir>
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0c 94 ad 01 	jmp	0x35a	; 0x35a <robo_motorSpeed>

0000054c <cprintf>:
     54c:	4f 92       	push	r4
     54e:	5f 92       	push	r5
     550:	6f 92       	push	r6
     552:	7f 92       	push	r7
     554:	8f 92       	push	r8
     556:	9f 92       	push	r9
     558:	af 92       	push	r10
     55a:	bf 92       	push	r11
     55c:	cf 92       	push	r12
     55e:	df 92       	push	r13
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	de 01       	movw	r26, r28
     572:	53 96       	adiw	r26, 0x13	; 19
     574:	ed 91       	ld	r30, X+
     576:	fd 91       	ld	r31, X+
     578:	8d 01       	movw	r16, r26
     57a:	5a e0       	ldi	r21, 0x0A	; 10
     57c:	65 2e       	mov	r6, r21
     57e:	71 2c       	mov	r7, r1
     580:	80 81       	ld	r24, Z
     582:	85 32       	cpi	r24, 0x25	; 37
     584:	81 f4       	brne	.+32     	; 0x5a6 <cprintf+0x5a>
     586:	5f 01       	movw	r10, r30
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	a8 0e       	add	r10, r24
     58c:	b1 1c       	adc	r11, r1
     58e:	81 81       	ldd	r24, Z+1	; 0x01
     590:	84 36       	cpi	r24, 0x64	; 100
     592:	09 f4       	brne	.+2      	; 0x596 <cprintf+0x4a>
     594:	50 c0       	rjmp	.+160    	; 0x636 <cprintf+0xea>
     596:	90 f4       	brcc	.+36     	; 0x5bc <cprintf+0x70>
     598:	83 36       	cpi	r24, 0x63	; 99
     59a:	61 f4       	brne	.+24     	; 0x5b4 <cprintf+0x68>
     59c:	f8 01       	movw	r30, r16
     59e:	80 81       	ld	r24, Z
     5a0:	0e 5f       	subi	r16, 0xFE	; 254
     5a2:	1f 4f       	sbci	r17, 0xFF	; 255
     5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <cprintf+0x68>
     5a6:	88 23       	and	r24, r24
     5a8:	09 f4       	brne	.+2      	; 0x5ac <cprintf+0x60>
     5aa:	5d c0       	rjmp	.+186    	; 0x666 <cprintf+0x11a>
     5ac:	5f 01       	movw	r10, r30
     5ae:	9f ef       	ldi	r25, 0xFF	; 255
     5b0:	a9 1a       	sub	r10, r25
     5b2:	b9 0a       	sbc	r11, r25
     5b4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <cputchar>
     5b8:	f5 01       	movw	r30, r10
     5ba:	e2 cf       	rjmp	.-60     	; 0x580 <cprintf+0x34>
     5bc:	83 37       	cpi	r24, 0x73	; 115
     5be:	71 f1       	breq	.+92     	; 0x61c <cprintf+0xd0>
     5c0:	30 e1       	ldi	r19, 0x10	; 16
     5c2:	83 2e       	mov	r8, r19
     5c4:	91 2c       	mov	r9, r1
     5c6:	e1 2c       	mov	r14, r1
     5c8:	40 e1       	ldi	r20, 0x10	; 16
     5ca:	f4 2e       	mov	r15, r20
     5cc:	88 37       	cpi	r24, 0x78	; 120
     5ce:	91 f7       	brne	.-28     	; 0x5b4 <cprintf+0x68>
     5d0:	f8 01       	movw	r30, r16
     5d2:	c0 80       	ld	r12, Z
     5d4:	d1 80       	ldd	r13, Z+1	; 0x01
     5d6:	0e 5f       	subi	r16, 0xFE	; 254
     5d8:	1f 4f       	sbci	r17, 0xFF	; 255
     5da:	84 36       	cpi	r24, 0x64	; 100
     5dc:	59 f4       	brne	.+22     	; 0x5f4 <cprintf+0xa8>
     5de:	d7 fe       	sbrs	r13, 7
     5e0:	06 c0       	rjmp	.+12     	; 0x5ee <cprintf+0xa2>
     5e2:	d1 94       	neg	r13
     5e4:	c1 94       	neg	r12
     5e6:	d1 08       	sbc	r13, r1
     5e8:	8d e2       	ldi	r24, 0x2D	; 45
     5ea:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <cputchar>
     5ee:	ce 14       	cp	r12, r14
     5f0:	df 04       	cpc	r13, r15
     5f2:	48 f1       	brcs	.+82     	; 0x646 <cprintf+0xfa>
     5f4:	c6 01       	movw	r24, r12
     5f6:	b7 01       	movw	r22, r14
     5f8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__udivmodhi4>
     5fc:	2c 01       	movw	r4, r24
     5fe:	68 5f       	subi	r22, 0xF8	; 248
     600:	7d 4f       	sbci	r23, 0xFD	; 253
     602:	fb 01       	movw	r30, r22
     604:	80 81       	ld	r24, Z
     606:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <cputchar>
     60a:	62 01       	movw	r12, r4
     60c:	c7 01       	movw	r24, r14
     60e:	b4 01       	movw	r22, r8
     610:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__udivmodhi4>
     614:	7b 01       	movw	r14, r22
     616:	67 2b       	or	r22, r23
     618:	69 f7       	brne	.-38     	; 0x5f4 <cprintf+0xa8>
     61a:	ce cf       	rjmp	.-100    	; 0x5b8 <cprintf+0x6c>
     61c:	f8 01       	movw	r30, r16
     61e:	e0 80       	ld	r14, Z
     620:	f1 80       	ldd	r15, Z+1	; 0x01
     622:	0e 5f       	subi	r16, 0xFE	; 254
     624:	1f 4f       	sbci	r17, 0xFF	; 255
     626:	f7 01       	movw	r30, r14
     628:	81 91       	ld	r24, Z+
     62a:	7f 01       	movw	r14, r30
     62c:	88 23       	and	r24, r24
     62e:	21 f2       	breq	.-120    	; 0x5b8 <cprintf+0x6c>
     630:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <cputchar>
     634:	f8 cf       	rjmp	.-16     	; 0x626 <cprintf+0xda>
     636:	9a e0       	ldi	r25, 0x0A	; 10
     638:	89 2e       	mov	r8, r25
     63a:	91 2c       	mov	r9, r1
     63c:	20 e1       	ldi	r18, 0x10	; 16
     63e:	e2 2e       	mov	r14, r18
     640:	27 e2       	ldi	r18, 0x27	; 39
     642:	f2 2e       	mov	r15, r18
     644:	c5 cf       	rjmp	.-118    	; 0x5d0 <cprintf+0x84>
     646:	c7 01       	movw	r24, r14
     648:	b3 01       	movw	r22, r6
     64a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__udivmodhi4>
     64e:	7b 01       	movw	r14, r22
     650:	62 30       	cpi	r22, 0x02	; 2
     652:	71 05       	cpc	r23, r1
     654:	60 f6       	brcc	.-104    	; 0x5ee <cprintf+0xa2>
     656:	c6 01       	movw	r24, r12
     658:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__udivmodhi4>
     65c:	fb 01       	movw	r30, r22
     65e:	e8 5f       	subi	r30, 0xF8	; 248
     660:	fd 4f       	sbci	r31, 0xFD	; 253
     662:	80 81       	ld	r24, Z
     664:	a7 cf       	rjmp	.-178    	; 0x5b4 <cprintf+0x68>
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	cf 90       	pop	r12
     67a:	bf 90       	pop	r11
     67c:	af 90       	pop	r10
     67e:	9f 90       	pop	r9
     680:	8f 90       	pop	r8
     682:	7f 90       	pop	r7
     684:	6f 90       	pop	r6
     686:	5f 90       	pop	r5
     688:	4f 90       	pop	r4
     68a:	08 95       	ret

0000068c <OSStartHighRdy>:
     68c:	00 91 a8 04 	lds	r16, 0x04A8	; 0x8004a8 <OSRunning>
     690:	03 95       	inc	r16
     692:	00 93 a8 04 	sts	0x04A8, r16	; 0x8004a8 <OSRunning>
     696:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <OSTCBHighRdy>
     69a:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <OSTCBHighRdy+0x1>
     69e:	c1 91       	ld	r28, Z+
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	d1 91       	ld	r29, Z+
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f 91       	pop	r16
     6a8:	0f bf       	out	0x3f, r16	; 63
     6aa:	ff 91       	pop	r31
     6ac:	ef 91       	pop	r30
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	bf 91       	pop	r27
     6b4:	af 91       	pop	r26
     6b6:	9f 91       	pop	r25
     6b8:	8f 91       	pop	r24
     6ba:	7f 91       	pop	r23
     6bc:	6f 91       	pop	r22
     6be:	5f 91       	pop	r21
     6c0:	4f 91       	pop	r20
     6c2:	3f 91       	pop	r19
     6c4:	2f 91       	pop	r18
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	df 90       	pop	r13
     6d0:	cf 90       	pop	r12
     6d2:	bf 90       	pop	r11
     6d4:	af 90       	pop	r10
     6d6:	9f 90       	pop	r9
     6d8:	8f 90       	pop	r8
     6da:	7f 90       	pop	r7
     6dc:	6f 90       	pop	r6
     6de:	5f 90       	pop	r5
     6e0:	4f 90       	pop	r4
     6e2:	3f 90       	pop	r3
     6e4:	2f 90       	pop	r2
     6e6:	1f 90       	pop	r1
     6e8:	0f 90       	pop	r0
     6ea:	08 95       	ret

000006ec <OSCtxSw>:
     6ec:	0f 92       	push	r0
     6ee:	1f 92       	push	r1
     6f0:	2f 92       	push	r2
     6f2:	3f 92       	push	r3
     6f4:	4f 92       	push	r4
     6f6:	5f 92       	push	r5
     6f8:	6f 92       	push	r6
     6fa:	7f 92       	push	r7
     6fc:	8f 92       	push	r8
     6fe:	9f 92       	push	r9
     700:	af 92       	push	r10
     702:	bf 92       	push	r11
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	2f 93       	push	r18
     712:	3f 93       	push	r19
     714:	4f 93       	push	r20
     716:	5f 93       	push	r21
     718:	6f 93       	push	r22
     71a:	7f 93       	push	r23
     71c:	8f 93       	push	r24
     71e:	9f 93       	push	r25
     720:	af 93       	push	r26
     722:	bf 93       	push	r27
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	ef 93       	push	r30
     72a:	ff 93       	push	r31
     72c:	0f b7       	in	r16, 0x3f	; 63
     72e:	0f 93       	push	r16
     730:	e0 91 c0 04 	lds	r30, 0x04C0	; 0x8004c0 <OSTCBCur>
     734:	f0 91 c1 04 	lds	r31, 0x04C1	; 0x8004c1 <OSTCBCur+0x1>
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	c1 93       	st	Z+, r28
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	d1 93       	st	Z+, r29
     740:	00 91 ad 04 	lds	r16, 0x04AD	; 0x8004ad <OSPrioHighRdy>
     744:	00 93 ae 04 	sts	0x04AE, r16	; 0x8004ae <OSPrioCur>
     748:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <OSTCBHighRdy>
     74c:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <OSTCBHighRdy+0x1>
     750:	e0 93 c0 04 	sts	0x04C0, r30	; 0x8004c0 <OSTCBCur>
     754:	f0 93 c1 04 	sts	0x04C1, r31	; 0x8004c1 <OSTCBCur+0x1>
     758:	c1 91       	ld	r28, Z+
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	d1 91       	ld	r29, Z+
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f 91       	pop	r16
     762:	0f bf       	out	0x3f, r16	; 63
     764:	ff 91       	pop	r31
     766:	ef 91       	pop	r30
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	bf 91       	pop	r27
     76e:	af 91       	pop	r26
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	7f 91       	pop	r23
     776:	6f 91       	pop	r22
     778:	5f 91       	pop	r21
     77a:	4f 91       	pop	r20
     77c:	3f 91       	pop	r19
     77e:	2f 91       	pop	r18
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	bf 90       	pop	r11
     78e:	af 90       	pop	r10
     790:	9f 90       	pop	r9
     792:	8f 90       	pop	r8
     794:	7f 90       	pop	r7
     796:	6f 90       	pop	r6
     798:	5f 90       	pop	r5
     79a:	4f 90       	pop	r4
     79c:	3f 90       	pop	r3
     79e:	2f 90       	pop	r2
     7a0:	1f 90       	pop	r1
     7a2:	0f 90       	pop	r0
     7a4:	08 95       	ret

000007a6 <OSIntCtxSw>:
     7a6:	00 91 ad 04 	lds	r16, 0x04AD	; 0x8004ad <OSPrioHighRdy>
     7aa:	00 93 ae 04 	sts	0x04AE, r16	; 0x8004ae <OSPrioCur>
     7ae:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <OSTCBHighRdy>
     7b2:	f0 91 b9 04 	lds	r31, 0x04B9	; 0x8004b9 <OSTCBHighRdy+0x1>
     7b6:	e0 93 c0 04 	sts	0x04C0, r30	; 0x8004c0 <OSTCBCur>
     7ba:	f0 93 c1 04 	sts	0x04C1, r31	; 0x8004c1 <OSTCBCur+0x1>
     7be:	c1 91       	ld	r28, Z+
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	d1 91       	ld	r29, Z+
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f 91       	pop	r16
     7c8:	0f bf       	out	0x3f, r16	; 63
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	bf 91       	pop	r27
     7d4:	af 91       	pop	r26
     7d6:	9f 91       	pop	r25
     7d8:	8f 91       	pop	r24
     7da:	7f 91       	pop	r23
     7dc:	6f 91       	pop	r22
     7de:	5f 91       	pop	r21
     7e0:	4f 91       	pop	r20
     7e2:	3f 91       	pop	r19
     7e4:	2f 91       	pop	r18
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	df 90       	pop	r13
     7f0:	cf 90       	pop	r12
     7f2:	bf 90       	pop	r11
     7f4:	af 90       	pop	r10
     7f6:	9f 90       	pop	r9
     7f8:	8f 90       	pop	r8
     7fa:	7f 90       	pop	r7
     7fc:	6f 90       	pop	r6
     7fe:	5f 90       	pop	r5
     800:	4f 90       	pop	r4
     802:	3f 90       	pop	r3
     804:	2f 90       	pop	r2
     806:	1f 90       	pop	r1
     808:	0f 90       	pop	r0
     80a:	08 95       	ret

0000080c <OSTickISR>:
     80c:	0f 92       	push	r0
     80e:	1f 92       	push	r1
     810:	2f 92       	push	r2
     812:	3f 92       	push	r3
     814:	4f 92       	push	r4
     816:	5f 92       	push	r5
     818:	6f 92       	push	r6
     81a:	7f 92       	push	r7
     81c:	8f 92       	push	r8
     81e:	9f 92       	push	r9
     820:	af 92       	push	r10
     822:	bf 92       	push	r11
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	2f 93       	push	r18
     832:	3f 93       	push	r19
     834:	4f 93       	push	r20
     836:	5f 93       	push	r21
     838:	6f 93       	push	r22
     83a:	7f 93       	push	r23
     83c:	8f 93       	push	r24
     83e:	9f 93       	push	r25
     840:	af 93       	push	r26
     842:	bf 93       	push	r27
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	ef 93       	push	r30
     84a:	ff 93       	push	r31
     84c:	0f b7       	in	r16, 0x3f	; 63
     84e:	00 68       	ori	r16, 0x80	; 128
     850:	0f 93       	push	r16
     852:	00 91 bf 04 	lds	r16, 0x04BF	; 0x8004bf <OSIntNesting>
     856:	03 95       	inc	r16
     858:	00 93 bf 04 	sts	0x04BF, r16	; 0x8004bf <OSIntNesting>
     85c:	01 30       	cpi	r16, 0x01	; 1
     85e:	41 f4       	brne	.+16     	; 0x870 <_not_first_int>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	e0 91 c0 04 	lds	r30, 0x04C0	; 0x8004c0 <OSTCBCur>
     868:	f0 91 c1 04 	lds	r31, 0x04C1	; 0x8004c1 <OSTCBCur+0x1>
     86c:	c1 93       	st	Z+, r28
     86e:	d1 93       	st	Z+, r29

00000870 <_not_first_int>:
     870:	04 e6       	ldi	r16, 0x64	; 100
     872:	06 bd       	out	0x26, r16	; 38
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	1f 2e       	mov	r1, r31
     878:	78 94       	sei
     87a:	0e 94 69 05 	call	0xad2	; 0xad2 <OSTimeTick>
     87e:	00 00       	nop
     880:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <OSIntExit>
     884:	0f 91       	pop	r16
     886:	0f bf       	out	0x3f, r16	; 63
     888:	ff 91       	pop	r31
     88a:	ef 91       	pop	r30
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	bf 91       	pop	r27
     892:	af 91       	pop	r26
     894:	9f 91       	pop	r25
     896:	8f 91       	pop	r24
     898:	7f 91       	pop	r23
     89a:	6f 91       	pop	r22
     89c:	5f 91       	pop	r21
     89e:	4f 91       	pop	r20
     8a0:	3f 91       	pop	r19
     8a2:	2f 91       	pop	r18
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	bf 90       	pop	r11
     8b2:	af 90       	pop	r10
     8b4:	9f 90       	pop	r9
     8b6:	8f 90       	pop	r8
     8b8:	7f 90       	pop	r7
     8ba:	6f 90       	pop	r6
     8bc:	5f 90       	pop	r5
     8be:	4f 90       	pop	r4
     8c0:	3f 90       	pop	r3
     8c2:	2f 90       	pop	r2
     8c4:	1f 90       	pop	r1
     8c6:	0f 90       	pop	r0
     8c8:	08 95       	ret

000008ca <OSTaskStkInit>:
     8ca:	fa 01       	movw	r30, r20
     8cc:	80 83       	st	Z, r24
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	90 83       	st	Z, r25
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	10 82       	st	Z, r1
     8d6:	31 97       	sbiw	r30, 0x01	; 1
     8d8:	10 82       	st	Z, r1
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	10 82       	st	Z, r1
     8de:	31 97       	sbiw	r30, 0x01	; 1
     8e0:	10 82       	st	Z, r1
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	10 82       	st	Z, r1
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	10 82       	st	Z, r1
     8ea:	31 97       	sbiw	r30, 0x01	; 1
     8ec:	10 82       	st	Z, r1
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	10 82       	st	Z, r1
     8f2:	31 97       	sbiw	r30, 0x01	; 1
     8f4:	10 82       	st	Z, r1
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	10 82       	st	Z, r1
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	10 82       	st	Z, r1
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	10 82       	st	Z, r1
     902:	31 97       	sbiw	r30, 0x01	; 1
     904:	10 82       	st	Z, r1
     906:	31 97       	sbiw	r30, 0x01	; 1
     908:	10 82       	st	Z, r1
     90a:	31 97       	sbiw	r30, 0x01	; 1
     90c:	10 82       	st	Z, r1
     90e:	31 97       	sbiw	r30, 0x01	; 1
     910:	10 82       	st	Z, r1
     912:	31 97       	sbiw	r30, 0x01	; 1
     914:	10 82       	st	Z, r1
     916:	31 97       	sbiw	r30, 0x01	; 1
     918:	10 82       	st	Z, r1
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	10 82       	st	Z, r1
     91e:	31 97       	sbiw	r30, 0x01	; 1
     920:	10 82       	st	Z, r1
     922:	31 97       	sbiw	r30, 0x01	; 1
     924:	10 82       	st	Z, r1
     926:	31 97       	sbiw	r30, 0x01	; 1
     928:	10 82       	st	Z, r1
     92a:	31 97       	sbiw	r30, 0x01	; 1
     92c:	10 82       	st	Z, r1
     92e:	31 97       	sbiw	r30, 0x01	; 1
     930:	10 82       	st	Z, r1
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	60 83       	st	Z, r22
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	70 83       	st	Z, r23
     93a:	31 97       	sbiw	r30, 0x01	; 1
     93c:	10 82       	st	Z, r1
     93e:	31 97       	sbiw	r30, 0x01	; 1
     940:	10 82       	st	Z, r1
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	10 82       	st	Z, r1
     946:	31 97       	sbiw	r30, 0x01	; 1
     948:	10 82       	st	Z, r1
     94a:	31 97       	sbiw	r30, 0x01	; 1
     94c:	10 82       	st	Z, r1
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	10 82       	st	Z, r1
     952:	31 97       	sbiw	r30, 0x01	; 1
     954:	80 e8       	ldi	r24, 0x80	; 128
     956:	80 83       	st	Z, r24
     958:	ca 01       	movw	r24, r20
     95a:	83 97       	sbiw	r24, 0x23	; 35
     95c:	08 95       	ret

0000095e <OSTaskCreateHook>:
     95e:	08 95       	ret

00000960 <OSTaskDelHook>:
     960:	08 95       	ret

00000962 <OSTaskSwHook>:
     962:	08 95       	ret

00000964 <OSTaskStatHook>:
     964:	08 95       	ret

00000966 <OSTimeTickHook>:
     966:	08 95       	ret

00000968 <OSInitHookBegin>:
     968:	08 95       	ret

0000096a <OSInitHookEnd>:
     96a:	08 95       	ret

0000096c <OSTaskIdleHook>:
     96c:	08 95       	ret

0000096e <OSTCBInitHook>:
     96e:	08 95       	ret

00000970 <OS_TaskIdle>:
     970:	f8 94       	cli
     972:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <OSIdleCtr>
     976:	90 91 aa 04 	lds	r25, 0x04AA	; 0x8004aa <OSIdleCtr+0x1>
     97a:	a0 91 ab 04 	lds	r26, 0x04AB	; 0x8004ab <OSIdleCtr+0x2>
     97e:	b0 91 ac 04 	lds	r27, 0x04AC	; 0x8004ac <OSIdleCtr+0x3>
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	a1 1d       	adc	r26, r1
     986:	b1 1d       	adc	r27, r1
     988:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <OSIdleCtr>
     98c:	90 93 aa 04 	sts	0x04AA, r25	; 0x8004aa <OSIdleCtr+0x1>
     990:	a0 93 ab 04 	sts	0x04AB, r26	; 0x8004ab <OSIdleCtr+0x2>
     994:	b0 93 ac 04 	sts	0x04AC, r27	; 0x8004ac <OSIdleCtr+0x3>
     998:	78 94       	sei
     99a:	0e 94 b6 04 	call	0x96c	; 0x96c <OSTaskIdleHook>
     99e:	e8 cf       	rjmp	.-48     	; 0x970 <OS_TaskIdle>

000009a0 <OSIntEnter>:
     9a0:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <OSRunning>
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	39 f4       	brne	.+14     	; 0x9b6 <OSIntEnter+0x16>
     9a8:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <OSIntNesting>
     9ac:	8f 3f       	cpi	r24, 0xFF	; 255
     9ae:	19 f0       	breq	.+6      	; 0x9b6 <OSIntEnter+0x16>
     9b0:	8f 5f       	subi	r24, 0xFF	; 255
     9b2:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <OSIntNesting>
     9b6:	08 95       	ret

000009b8 <OSIntExit>:
     9b8:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <OSRunning>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	09 f0       	breq	.+2      	; 0x9c2 <OSIntExit+0xa>
     9c0:	4c c0       	rjmp	.+152    	; 0xa5a <OSIntExit+0xa2>
     9c2:	f8 94       	cli
     9c4:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <OSIntNesting>
     9c8:	88 23       	and	r24, r24
     9ca:	19 f0       	breq	.+6      	; 0x9d2 <OSIntExit+0x1a>
     9cc:	81 50       	subi	r24, 0x01	; 1
     9ce:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <OSIntNesting>
     9d2:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <OSIntNesting>
     9d6:	81 11       	cpse	r24, r1
     9d8:	3f c0       	rjmp	.+126    	; 0xa58 <OSIntExit+0xa0>
     9da:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <OSLockNesting>
     9de:	81 11       	cpse	r24, r1
     9e0:	3b c0       	rjmp	.+118    	; 0xa58 <OSIntExit+0xa0>
     9e2:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <OSRdyGrp>
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	e0 50       	subi	r30, 0x00	; 0
     9ea:	ff 4f       	sbci	r31, 0xFF	; 255
     9ec:	e0 81       	ld	r30, Z
     9ee:	e0 93 be 04 	sts	0x04BE, r30	; 0x8004be <OSIntExitY>
     9f2:	ae 2f       	mov	r26, r30
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	a5 54       	subi	r26, 0x45	; 69
     9f8:	bb 4f       	sbci	r27, 0xFB	; 251
     9fa:	ac 91       	ld	r26, X
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	a0 50       	subi	r26, 0x00	; 0
     a00:	bf 4f       	sbci	r27, 0xFF	; 255
     a02:	ee 0f       	add	r30, r30
     a04:	ee 0f       	add	r30, r30
     a06:	ee 0f       	add	r30, r30
     a08:	8c 91       	ld	r24, X
     a0a:	e8 0f       	add	r30, r24
     a0c:	e0 93 ad 04 	sts	0x04AD, r30	; 0x8004ad <OSPrioHighRdy>
     a10:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <OSPrioCur>
     a14:	e8 17       	cp	r30, r24
     a16:	01 f1       	breq	.+64     	; 0xa58 <OSIntExit+0xa0>
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	ef 5f       	subi	r30, 0xFF	; 255
     a20:	f9 4f       	sbci	r31, 0xF9	; 249
     a22:	80 81       	ld	r24, Z
     a24:	91 81       	ldd	r25, Z+1	; 0x01
     a26:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <OSTCBHighRdy+0x1>
     a2a:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <OSTCBHighRdy>
     a2e:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <OSCtxSwCtr>
     a32:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <OSCtxSwCtr+0x1>
     a36:	a0 91 b3 04 	lds	r26, 0x04B3	; 0x8004b3 <OSCtxSwCtr+0x2>
     a3a:	b0 91 b4 04 	lds	r27, 0x04B4	; 0x8004b4 <OSCtxSwCtr+0x3>
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	a1 1d       	adc	r26, r1
     a42:	b1 1d       	adc	r27, r1
     a44:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <OSCtxSwCtr>
     a48:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <OSCtxSwCtr+0x1>
     a4c:	a0 93 b3 04 	sts	0x04B3, r26	; 0x8004b3 <OSCtxSwCtr+0x2>
     a50:	b0 93 b4 04 	sts	0x04B4, r27	; 0x8004b4 <OSCtxSwCtr+0x3>
     a54:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <OSIntCtxSw>
     a58:	78 94       	sei
     a5a:	08 95       	ret

00000a5c <OSSchedLock>:
     a5c:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <OSRunning>
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	49 f4       	brne	.+18     	; 0xa76 <OSSchedLock+0x1a>
     a64:	f8 94       	cli
     a66:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <OSLockNesting>
     a6a:	8f 3f       	cpi	r24, 0xFF	; 255
     a6c:	19 f0       	breq	.+6      	; 0xa74 <OSSchedLock+0x18>
     a6e:	8f 5f       	subi	r24, 0xFF	; 255
     a70:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <OSLockNesting>
     a74:	78 94       	sei
     a76:	08 95       	ret

00000a78 <OSStart>:
     a78:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <OSRunning>
     a7c:	81 11       	cpse	r24, r1
     a7e:	28 c0       	rjmp	.+80     	; 0xad0 <OSStart+0x58>
     a80:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <OSRdyGrp>
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	e0 50       	subi	r30, 0x00	; 0
     a88:	ff 4f       	sbci	r31, 0xFF	; 255
     a8a:	e0 81       	ld	r30, Z
     a8c:	ae 2f       	mov	r26, r30
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	a5 54       	subi	r26, 0x45	; 69
     a92:	bb 4f       	sbci	r27, 0xFB	; 251
     a94:	ac 91       	ld	r26, X
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	a0 50       	subi	r26, 0x00	; 0
     a9a:	bf 4f       	sbci	r27, 0xFF	; 255
     a9c:	ee 0f       	add	r30, r30
     a9e:	ee 0f       	add	r30, r30
     aa0:	ee 0f       	add	r30, r30
     aa2:	8c 91       	ld	r24, X
     aa4:	e8 0f       	add	r30, r24
     aa6:	e0 93 ad 04 	sts	0x04AD, r30	; 0x8004ad <OSPrioHighRdy>
     aaa:	e0 93 ae 04 	sts	0x04AE, r30	; 0x8004ae <OSPrioCur>
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	ee 0f       	add	r30, r30
     ab2:	ff 1f       	adc	r31, r31
     ab4:	ef 5f       	subi	r30, 0xFF	; 255
     ab6:	f9 4f       	sbci	r31, 0xF9	; 249
     ab8:	80 81       	ld	r24, Z
     aba:	91 81       	ldd	r25, Z+1	; 0x01
     abc:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <OSTCBHighRdy+0x1>
     ac0:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <OSTCBHighRdy>
     ac4:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <OSTCBCur+0x1>
     ac8:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <OSTCBCur>
     acc:	0c 94 46 03 	jmp	0x68c	; 0x68c <OSStartHighRdy>
     ad0:	08 95       	ret

00000ad2 <OSTimeTick>:
     ad2:	0e 94 b3 04 	call	0x966	; 0x966 <OSTimeTickHook>
     ad6:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <OSRunning>
     ada:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <OSTCBList>
     ade:	f0 91 b0 04 	lds	r31, 0x04B0	; 0x8004b0 <OSTCBList+0x1>
     ae2:	21 e0       	ldi	r18, 0x01	; 1
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	01 f1       	breq	.+64     	; 0xb2a <OSTimeTick+0x58>
     aea:	08 95       	ret
     aec:	f8 94       	cli
     aee:	86 81       	ldd	r24, Z+6	; 0x06
     af0:	97 81       	ldd	r25, Z+7	; 0x07
     af2:	00 97       	sbiw	r24, 0x00	; 0
     af4:	b1 f0       	breq	.+44     	; 0xb22 <OSTimeTick+0x50>
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	97 83       	std	Z+7, r25	; 0x07
     afa:	86 83       	std	Z+6, r24	; 0x06
     afc:	89 2b       	or	r24, r25
     afe:	89 f4       	brne	.+34     	; 0xb22 <OSTimeTick+0x50>
     b00:	80 85       	ldd	r24, Z+8	; 0x08
     b02:	83 fd       	sbrc	r24, 3
     b04:	16 c0       	rjmp	.+44     	; 0xb32 <OSTimeTick+0x60>
     b06:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <OSRdyGrp>
     b0a:	95 85       	ldd	r25, Z+13	; 0x0d
     b0c:	89 2b       	or	r24, r25
     b0e:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <OSRdyGrp>
     b12:	a3 85       	ldd	r26, Z+11	; 0x0b
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	a5 54       	subi	r26, 0x45	; 69
     b18:	bb 4f       	sbci	r27, 0xFB	; 251
     b1a:	8c 91       	ld	r24, X
     b1c:	94 85       	ldd	r25, Z+12	; 0x0c
     b1e:	89 2b       	or	r24, r25
     b20:	8c 93       	st	X, r24
     b22:	02 80       	ldd	r0, Z+2	; 0x02
     b24:	f3 81       	ldd	r31, Z+3	; 0x03
     b26:	e0 2d       	mov	r30, r0
     b28:	78 94       	sei
     b2a:	81 85       	ldd	r24, Z+9	; 0x09
     b2c:	80 31       	cpi	r24, 0x10	; 16
     b2e:	f1 f6       	brne	.-68     	; 0xaec <OSTimeTick+0x1a>
     b30:	dc cf       	rjmp	.-72     	; 0xaea <OSTimeTick+0x18>
     b32:	37 83       	std	Z+7, r19	; 0x07
     b34:	26 83       	std	Z+6, r18	; 0x06
     b36:	f5 cf       	rjmp	.-22     	; 0xb22 <OSTimeTick+0x50>

00000b38 <OSVersion>:
     b38:	8c ef       	ldi	r24, 0xFC	; 252
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	08 95       	ret

00000b3e <OS_Dummy>:
     b3e:	08 95       	ret

00000b40 <OS_Sched>:
     b40:	f8 94       	cli
     b42:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <OSIntNesting>
     b46:	81 11       	cpse	r24, r1
     b48:	3d c0       	rjmp	.+122    	; 0xbc4 <OS_Sched+0x84>
     b4a:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <OSLockNesting>
     b4e:	81 11       	cpse	r24, r1
     b50:	39 c0       	rjmp	.+114    	; 0xbc4 <OS_Sched+0x84>
     b52:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <OSRdyGrp>
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	e0 50       	subi	r30, 0x00	; 0
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	e0 81       	ld	r30, Z
     b5e:	ae 2f       	mov	r26, r30
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	a5 54       	subi	r26, 0x45	; 69
     b64:	bb 4f       	sbci	r27, 0xFB	; 251
     b66:	ac 91       	ld	r26, X
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	a0 50       	subi	r26, 0x00	; 0
     b6c:	bf 4f       	sbci	r27, 0xFF	; 255
     b6e:	ee 0f       	add	r30, r30
     b70:	ee 0f       	add	r30, r30
     b72:	ee 0f       	add	r30, r30
     b74:	8c 91       	ld	r24, X
     b76:	e8 0f       	add	r30, r24
     b78:	e0 93 ad 04 	sts	0x04AD, r30	; 0x8004ad <OSPrioHighRdy>
     b7c:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <OSPrioCur>
     b80:	e8 17       	cp	r30, r24
     b82:	01 f1       	breq	.+64     	; 0xbc4 <OS_Sched+0x84>
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	ee 0f       	add	r30, r30
     b88:	ff 1f       	adc	r31, r31
     b8a:	ef 5f       	subi	r30, 0xFF	; 255
     b8c:	f9 4f       	sbci	r31, 0xF9	; 249
     b8e:	80 81       	ld	r24, Z
     b90:	91 81       	ldd	r25, Z+1	; 0x01
     b92:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <OSTCBHighRdy+0x1>
     b96:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <OSTCBHighRdy>
     b9a:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <OSCtxSwCtr>
     b9e:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <OSCtxSwCtr+0x1>
     ba2:	a0 91 b3 04 	lds	r26, 0x04B3	; 0x8004b3 <OSCtxSwCtr+0x2>
     ba6:	b0 91 b4 04 	lds	r27, 0x04B4	; 0x8004b4 <OSCtxSwCtr+0x3>
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	a1 1d       	adc	r26, r1
     bae:	b1 1d       	adc	r27, r1
     bb0:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <OSCtxSwCtr>
     bb4:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <OSCtxSwCtr+0x1>
     bb8:	a0 93 b3 04 	sts	0x04B3, r26	; 0x8004b3 <OSCtxSwCtr+0x2>
     bbc:	b0 93 b4 04 	sts	0x04B4, r27	; 0x8004b4 <OSCtxSwCtr+0x3>
     bc0:	0e 94 76 03 	call	0x6ec	; 0x6ec <OSCtxSw>
     bc4:	78 94       	sei
     bc6:	08 95       	ret

00000bc8 <OSSchedUnlock>:
     bc8:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <OSRunning>
     bcc:	81 30       	cpi	r24, 0x01	; 1
     bce:	91 f4       	brne	.+36     	; 0xbf4 <OSSchedUnlock+0x2c>
     bd0:	f8 94       	cli
     bd2:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <OSLockNesting>
     bd6:	88 23       	and	r24, r24
     bd8:	61 f0       	breq	.+24     	; 0xbf2 <OSSchedUnlock+0x2a>
     bda:	81 50       	subi	r24, 0x01	; 1
     bdc:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <OSLockNesting>
     be0:	81 11       	cpse	r24, r1
     be2:	07 c0       	rjmp	.+14     	; 0xbf2 <OSSchedUnlock+0x2a>
     be4:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <OSIntNesting>
     be8:	81 11       	cpse	r24, r1
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <OSSchedUnlock+0x2a>
     bec:	78 94       	sei
     bee:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <OS_Sched>
     bf2:	78 94       	sei
     bf4:	08 95       	ret

00000bf6 <OSTimeDly.part.0>:
     bf6:	ac 01       	movw	r20, r24
     bf8:	f8 94       	cli
     bfa:	a0 91 c0 04 	lds	r26, 0x04C0	; 0x8004c0 <OSTCBCur>
     bfe:	b0 91 c1 04 	lds	r27, 0x04C1	; 0x8004c1 <OSTCBCur+0x1>
     c02:	1b 96       	adiw	r26, 0x0b	; 11
     c04:	ec 91       	ld	r30, X
     c06:	1b 97       	sbiw	r26, 0x0b	; 11
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	1c 96       	adiw	r26, 0x0c	; 12
     c0c:	9c 91       	ld	r25, X
     c0e:	1c 97       	sbiw	r26, 0x0c	; 12
     c10:	90 95       	com	r25
     c12:	e5 54       	subi	r30, 0x45	; 69
     c14:	fb 4f       	sbci	r31, 0xFB	; 251
     c16:	80 81       	ld	r24, Z
     c18:	98 23       	and	r25, r24
     c1a:	90 83       	st	Z, r25
     c1c:	91 11       	cpse	r25, r1
     c1e:	0a c0       	rjmp	.+20     	; 0xc34 <OSTimeDly.part.0+0x3e>
     c20:	1d 96       	adiw	r26, 0x0d	; 13
     c22:	9c 91       	ld	r25, X
     c24:	1d 97       	sbiw	r26, 0x0d	; 13
     c26:	29 2f       	mov	r18, r25
     c28:	20 95       	com	r18
     c2a:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <OSRdyGrp>
     c2e:	92 23       	and	r25, r18
     c30:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <OSRdyGrp>
     c34:	17 96       	adiw	r26, 0x07	; 7
     c36:	5c 93       	st	X, r21
     c38:	4e 93       	st	-X, r20
     c3a:	16 97       	sbiw	r26, 0x06	; 6
     c3c:	78 94       	sei
     c3e:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <OS_Sched>

00000c42 <OS_TCBInit>:
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	f8 94       	cli
     c4a:	c0 91 b5 04 	lds	r28, 0x04B5	; 0x8004b5 <OSTCBFreeList>
     c4e:	d0 91 b6 04 	lds	r29, 0x04B6	; 0x8004b6 <OSTCBFreeList+0x1>
     c52:	20 97       	sbiw	r28, 0x00	; 0
     c54:	09 f4       	brne	.+2      	; 0xc58 <OS_TCBInit+0x16>
     c56:	54 c0       	rjmp	.+168    	; 0xd00 <OS_TCBInit+0xbe>
     c58:	18 2f       	mov	r17, r24
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	9b 81       	ldd	r25, Y+3	; 0x03
     c5e:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <OSTCBFreeList+0x1>
     c62:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <OSTCBFreeList>
     c66:	78 94       	sei
     c68:	79 83       	std	Y+1, r23	; 0x01
     c6a:	68 83       	st	Y, r22
     c6c:	19 87       	std	Y+9, r17	; 0x09
     c6e:	18 86       	std	Y+8, r1	; 0x08
     c70:	1f 82       	std	Y+7, r1	; 0x07
     c72:	1e 82       	std	Y+6, r1	; 0x06
     c74:	1e 86       	std	Y+14, r1	; 0x0e
     c76:	e1 2f       	mov	r30, r17
     c78:	e6 95       	lsr	r30
     c7a:	e6 95       	lsr	r30
     c7c:	e6 95       	lsr	r30
     c7e:	eb 87       	std	Y+11, r30	; 0x0b
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	e0 50       	subi	r30, 0x00	; 0
     c84:	fe 4f       	sbci	r31, 0xFE	; 254
     c86:	80 81       	ld	r24, Z
     c88:	8d 87       	std	Y+13, r24	; 0x0d
     c8a:	e1 2f       	mov	r30, r17
     c8c:	e7 70       	andi	r30, 0x07	; 7
     c8e:	ea 87       	std	Y+10, r30	; 0x0a
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	e0 50       	subi	r30, 0x00	; 0
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	80 81       	ld	r24, Z
     c98:	8c 87       	std	Y+12, r24	; 0x0c
     c9a:	ce 01       	movw	r24, r28
     c9c:	0e 94 b7 04 	call	0x96e	; 0x96e <OSTCBInitHook>
     ca0:	ce 01       	movw	r24, r28
     ca2:	0e 94 af 04 	call	0x95e	; 0x95e <OSTaskCreateHook>
     ca6:	f8 94       	cli
     ca8:	e1 2f       	mov	r30, r17
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	ee 0f       	add	r30, r30
     cae:	ff 1f       	adc	r31, r31
     cb0:	ef 5f       	subi	r30, 0xFF	; 255
     cb2:	f9 4f       	sbci	r31, 0xF9	; 249
     cb4:	d1 83       	std	Z+1, r29	; 0x01
     cb6:	c0 83       	st	Z, r28
     cb8:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <OSTCBList>
     cbc:	f0 91 b0 04 	lds	r31, 0x04B0	; 0x8004b0 <OSTCBList+0x1>
     cc0:	fb 83       	std	Y+3, r31	; 0x03
     cc2:	ea 83       	std	Y+2, r30	; 0x02
     cc4:	1d 82       	std	Y+5, r1	; 0x05
     cc6:	1c 82       	std	Y+4, r1	; 0x04
     cc8:	30 97       	sbiw	r30, 0x00	; 0
     cca:	11 f0       	breq	.+4      	; 0xcd0 <OS_TCBInit+0x8e>
     ccc:	d5 83       	std	Z+5, r29	; 0x05
     cce:	c4 83       	std	Z+4, r28	; 0x04
     cd0:	d0 93 b0 04 	sts	0x04B0, r29	; 0x8004b0 <OSTCBList+0x1>
     cd4:	c0 93 af 04 	sts	0x04AF, r28	; 0x8004af <OSTCBList>
     cd8:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <OSRdyGrp>
     cdc:	9d 85       	ldd	r25, Y+13	; 0x0d
     cde:	89 2b       	or	r24, r25
     ce0:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <OSRdyGrp>
     ce4:	eb 85       	ldd	r30, Y+11	; 0x0b
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	e5 54       	subi	r30, 0x45	; 69
     cea:	fb 4f       	sbci	r31, 0xFB	; 251
     cec:	80 81       	ld	r24, Z
     cee:	9c 85       	ldd	r25, Y+12	; 0x0c
     cf0:	89 2b       	or	r24, r25
     cf2:	80 83       	st	Z, r24
     cf4:	78 94       	sei
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	08 95       	ret
     d00:	78 94       	sei
     d02:	86 e4       	ldi	r24, 0x46	; 70
     d04:	f9 cf       	rjmp	.-14     	; 0xcf8 <OS_TCBInit+0xb6>

00000d06 <OSTaskCreate>:
     d06:	9f 92       	push	r9
     d08:	af 92       	push	r10
     d0a:	bf 92       	push	r11
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	f8 94       	cli
     d1e:	c2 2f       	mov	r28, r18
     d20:	d0 e0       	ldi	r29, 0x00	; 0
     d22:	cc 0f       	add	r28, r28
     d24:	dd 1f       	adc	r29, r29
     d26:	cf 5f       	subi	r28, 0xFF	; 255
     d28:	d9 4f       	sbci	r29, 0xF9	; 249
     d2a:	e8 81       	ld	r30, Y
     d2c:	f9 81       	ldd	r31, Y+1	; 0x01
     d2e:	ef 2b       	or	r30, r31
     d30:	09 f0       	breq	.+2      	; 0xd34 <OSTaskCreate+0x2e>
     d32:	3b c0       	rjmp	.+118    	; 0xdaa <OSTaskCreate+0xa4>
     d34:	92 2e       	mov	r9, r18
     d36:	21 e0       	ldi	r18, 0x01	; 1
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	39 83       	std	Y+1, r19	; 0x01
     d3c:	28 83       	st	Y, r18
     d3e:	78 94       	sei
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	0e 94 65 04 	call	0x8ca	; 0x8ca <OSTaskStkInit>
     d48:	b1 2c       	mov	r11, r1
     d4a:	a1 2c       	mov	r10, r1
     d4c:	d1 2c       	mov	r13, r1
     d4e:	c1 2c       	mov	r12, r1
     d50:	e1 2c       	mov	r14, r1
     d52:	f1 2c       	mov	r15, r1
     d54:	87 01       	movw	r16, r14
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	bc 01       	movw	r22, r24
     d60:	89 2d       	mov	r24, r9
     d62:	0e 94 21 06 	call	0xc42	; 0xc42 <OS_TCBInit>
     d66:	18 2f       	mov	r17, r24
     d68:	81 11       	cpse	r24, r1
     d6a:	1a c0       	rjmp	.+52     	; 0xda0 <OSTaskCreate+0x9a>
     d6c:	f8 94       	cli
     d6e:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <OSTaskCtr>
     d72:	8f 5f       	subi	r24, 0xFF	; 255
     d74:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <OSTaskCtr>
     d78:	78 94       	sei
     d7a:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <OSRunning>
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	11 f4       	brne	.+4      	; 0xd86 <OSTaskCreate+0x80>
     d82:	0e 94 a0 05 	call	0xb40	; 0xb40 <OS_Sched>
     d86:	81 2f       	mov	r24, r17
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	bf 90       	pop	r11
     d9a:	af 90       	pop	r10
     d9c:	9f 90       	pop	r9
     d9e:	08 95       	ret
     da0:	f8 94       	cli
     da2:	19 82       	std	Y+1, r1	; 0x01
     da4:	18 82       	st	Y, r1
     da6:	78 94       	sei
     da8:	ee cf       	rjmp	.-36     	; 0xd86 <OSTaskCreate+0x80>
     daa:	78 94       	sei
     dac:	18 e2       	ldi	r17, 0x28	; 40
     dae:	eb cf       	rjmp	.-42     	; 0xd86 <OSTaskCreate+0x80>

00000db0 <OSInit>:
     db0:	0e 94 b4 04 	call	0x968	; 0x968 <OSInitHookBegin>
     db4:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <OSIntNesting>
     db8:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <OSLockNesting>
     dbc:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <OSTaskCtr>
     dc0:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <OSRunning>
     dc4:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <OSCtxSwCtr>
     dc8:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <OSCtxSwCtr+0x1>
     dcc:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <OSCtxSwCtr+0x2>
     dd0:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <OSCtxSwCtr+0x3>
     dd4:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <OSIdleCtr>
     dd8:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <OSIdleCtr+0x1>
     ddc:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <OSIdleCtr+0x2>
     de0:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <OSIdleCtr+0x3>
     de4:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <OSRdyGrp>
     de8:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <OSRdyTbl>
     dec:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <OSRdyTbl+0x1>
     df0:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <OSRdyTbl+0x2>
     df4:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <OSPrioCur>
     df8:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <OSPrioHighRdy>
     dfc:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <OSTCBHighRdy+0x1>
     e00:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <OSTCBHighRdy>
     e04:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <OSTCBCur+0x1>
     e08:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <OSTCBCur>
     e0c:	10 92 b0 04 	sts	0x04B0, r1	; 0x8004b0 <OSTCBList+0x1>
     e10:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <OSTCBList>
     e14:	e1 e0       	ldi	r30, 0x01	; 1
     e16:	f6 e0       	ldi	r31, 0x06	; 6
     e18:	11 92       	st	Z+, r1
     e1a:	11 92       	st	Z+, r1
     e1c:	86 e0       	ldi	r24, 0x06	; 6
     e1e:	e3 32       	cpi	r30, 0x23	; 35
     e20:	f8 07       	cpc	r31, r24
     e22:	d1 f7       	brne	.-12     	; 0xe18 <OSInit+0x68>
     e24:	e2 e0       	ldi	r30, 0x02	; 2
     e26:	f5 e0       	ldi	r31, 0x05	; 5
     e28:	cf 01       	movw	r24, r30
     e2a:	0f 96       	adiw	r24, 0x0f	; 15
     e2c:	93 83       	std	Z+3, r25	; 0x03
     e2e:	82 83       	std	Z+2, r24	; 0x02
     e30:	fc 01       	movw	r30, r24
     e32:	85 e0       	ldi	r24, 0x05	; 5
     e34:	e2 3f       	cpi	r30, 0xF2	; 242
     e36:	f8 07       	cpc	r31, r24
     e38:	b9 f7       	brne	.-18     	; 0xe28 <OSInit+0x78>
     e3a:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <OSTCBTbl+0xf3>
     e3e:	10 92 f4 05 	sts	0x05F4, r1	; 0x8005f4 <OSTCBTbl+0xf2>
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	95 e0       	ldi	r25, 0x05	; 5
     e46:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <OSTCBFreeList+0x1>
     e4a:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <OSTCBFreeList>
     e4e:	20 e1       	ldi	r18, 0x10	; 16
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	55 e0       	ldi	r21, 0x05	; 5
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	88 eb       	ldi	r24, 0xB8	; 184
     e5a:	94 e0       	ldi	r25, 0x04	; 4
     e5c:	0e 94 83 06 	call	0xd06	; 0xd06 <OSTaskCreate>
     e60:	0c 94 b5 04 	jmp	0x96a	; 0x96a <OSInitHookEnd>

00000e64 <OSTaskDel>:
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	f0 90 bf 04 	lds	r15, 0x04BF	; 0x8004bf <OSIntNesting>
     e72:	f1 10       	cpse	r15, r1
     e74:	76 c0       	rjmp	.+236    	; 0xf62 <OSTaskDel+0xfe>
     e76:	f8 94       	cli
     e78:	8f 3f       	cpi	r24, 0xFF	; 255
     e7a:	29 f4       	brne	.+10     	; 0xe86 <OSTaskDel+0x22>
     e7c:	e0 91 c0 04 	lds	r30, 0x04C0	; 0x8004c0 <OSTCBCur>
     e80:	f0 91 c1 04 	lds	r31, 0x04C1	; 0x8004c1 <OSTCBCur+0x1>
     e84:	81 85       	ldd	r24, Z+9	; 0x09
     e86:	08 2f       	mov	r16, r24
     e88:	10 e0       	ldi	r17, 0x00	; 0
     e8a:	00 0f       	add	r16, r16
     e8c:	11 1f       	adc	r17, r17
     e8e:	f8 01       	movw	r30, r16
     e90:	ef 5f       	subi	r30, 0xFF	; 255
     e92:	f9 4f       	sbci	r31, 0xF9	; 249
     e94:	c0 81       	ld	r28, Z
     e96:	d1 81       	ldd	r29, Z+1	; 0x01
     e98:	20 97       	sbiw	r28, 0x00	; 0
     e9a:	09 f4       	brne	.+2      	; 0xe9e <OSTaskDel+0x3a>
     e9c:	5e c0       	rjmp	.+188    	; 0xf5a <OSTaskDel+0xf6>
     e9e:	eb 85       	ldd	r30, Y+11	; 0x0b
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ea4:	80 95       	com	r24
     ea6:	e5 54       	subi	r30, 0x45	; 69
     ea8:	fb 4f       	sbci	r31, 0xFB	; 251
     eaa:	90 81       	ld	r25, Z
     eac:	89 23       	and	r24, r25
     eae:	80 83       	st	Z, r24
     eb0:	81 11       	cpse	r24, r1
     eb2:	08 c0       	rjmp	.+16     	; 0xec4 <OSTaskDel+0x60>
     eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb6:	98 2f       	mov	r25, r24
     eb8:	90 95       	com	r25
     eba:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <OSRdyGrp>
     ebe:	89 23       	and	r24, r25
     ec0:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <OSRdyGrp>
     ec4:	1f 82       	std	Y+7, r1	; 0x07
     ec6:	1e 82       	std	Y+6, r1	; 0x06
     ec8:	18 86       	std	Y+8, r1	; 0x08
     eca:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <OSLockNesting>
     ece:	8f 3f       	cpi	r24, 0xFF	; 255
     ed0:	19 f0       	breq	.+6      	; 0xed8 <OSTaskDel+0x74>
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
     ed4:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <OSLockNesting>
     ed8:	78 94       	sei
     eda:	f8 94       	cli
     edc:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <OSLockNesting>
     ee0:	88 23       	and	r24, r24
     ee2:	19 f0       	breq	.+6      	; 0xeea <OSTaskDel+0x86>
     ee4:	81 50       	subi	r24, 0x01	; 1
     ee6:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <OSLockNesting>
     eea:	ce 01       	movw	r24, r28
     eec:	0e 94 b0 04 	call	0x960	; 0x960 <OSTaskDelHook>
     ef0:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <OSTaskCtr>
     ef4:	81 50       	subi	r24, 0x01	; 1
     ef6:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <OSTaskCtr>
     efa:	f8 01       	movw	r30, r16
     efc:	ef 5f       	subi	r30, 0xFF	; 255
     efe:	f9 4f       	sbci	r31, 0xF9	; 249
     f00:	11 82       	std	Z+1, r1	; 0x01
     f02:	10 82       	st	Z, r1
     f04:	ec 81       	ldd	r30, Y+4	; 0x04
     f06:	fd 81       	ldd	r31, Y+5	; 0x05
     f08:	aa 81       	ldd	r26, Y+2	; 0x02
     f0a:	bb 81       	ldd	r27, Y+3	; 0x03
     f0c:	30 97       	sbiw	r30, 0x00	; 0
     f0e:	e1 f4       	brne	.+56     	; 0xf48 <OSTaskDel+0xe4>
     f10:	15 96       	adiw	r26, 0x05	; 5
     f12:	1c 92       	st	X, r1
     f14:	1e 92       	st	-X, r1
     f16:	14 97       	sbiw	r26, 0x04	; 4
     f18:	b0 93 b0 04 	sts	0x04B0, r27	; 0x8004b0 <OSTCBList+0x1>
     f1c:	a0 93 af 04 	sts	0x04AF, r26	; 0x8004af <OSTCBList>
     f20:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <OSTCBFreeList>
     f24:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <OSTCBFreeList+0x1>
     f28:	9b 83       	std	Y+3, r25	; 0x03
     f2a:	8a 83       	std	Y+2, r24	; 0x02
     f2c:	d0 93 b6 04 	sts	0x04B6, r29	; 0x8004b6 <OSTCBFreeList+0x1>
     f30:	c0 93 b5 04 	sts	0x04B5, r28	; 0x8004b5 <OSTCBFreeList>
     f34:	78 94       	sei
     f36:	0e 94 a0 05 	call	0xb40	; 0xb40 <OS_Sched>
     f3a:	8f 2d       	mov	r24, r15
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	08 95       	ret
     f48:	b3 83       	std	Z+3, r27	; 0x03
     f4a:	a2 83       	std	Z+2, r26	; 0x02
     f4c:	aa 81       	ldd	r26, Y+2	; 0x02
     f4e:	bb 81       	ldd	r27, Y+3	; 0x03
     f50:	15 96       	adiw	r26, 0x05	; 5
     f52:	fc 93       	st	X, r31
     f54:	ee 93       	st	-X, r30
     f56:	14 97       	sbiw	r26, 0x04	; 4
     f58:	e3 cf       	rjmp	.-58     	; 0xf20 <OSTaskDel+0xbc>
     f5a:	78 94       	sei
     f5c:	9c e3       	ldi	r25, 0x3C	; 60
     f5e:	f9 2e       	mov	r15, r25
     f60:	ec cf       	rjmp	.-40     	; 0xf3a <OSTaskDel+0xd6>
     f62:	8f e3       	ldi	r24, 0x3F	; 63
     f64:	f8 2e       	mov	r15, r24
     f66:	e9 cf       	rjmp	.-46     	; 0xf3a <OSTaskDel+0xd6>

00000f68 <OSTaskDelReq>:
     f68:	8f 3f       	cpi	r24, 0xFF	; 255
     f6a:	41 f4       	brne	.+16     	; 0xf7c <OSTaskDelReq+0x14>
     f6c:	f8 94       	cli
     f6e:	e0 91 c0 04 	lds	r30, 0x04C0	; 0x8004c0 <OSTCBCur>
     f72:	f0 91 c1 04 	lds	r31, 0x04C1	; 0x8004c1 <OSTCBCur+0x1>
     f76:	86 85       	ldd	r24, Z+14	; 0x0e
     f78:	78 94       	sei
     f7a:	08 95       	ret
     f7c:	f8 94       	cli
     f7e:	e8 2f       	mov	r30, r24
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ef 5f       	subi	r30, 0xFF	; 255
     f88:	f9 4f       	sbci	r31, 0xF9	; 249
     f8a:	01 90       	ld	r0, Z+
     f8c:	f0 81       	ld	r31, Z
     f8e:	e0 2d       	mov	r30, r0
     f90:	8b e0       	ldi	r24, 0x0B	; 11
     f92:	30 97       	sbiw	r30, 0x00	; 0
     f94:	89 f3       	breq	.-30     	; 0xf78 <OSTaskDelReq+0x10>
     f96:	8e e3       	ldi	r24, 0x3E	; 62
     f98:	86 87       	std	Z+14, r24	; 0x0e
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	ed cf       	rjmp	.-38     	; 0xf78 <OSTaskDelReq+0x10>

00000f9e <OSTimeDly>:
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	11 f0       	breq	.+4      	; 0xfa6 <OSTimeDly+0x8>
     fa2:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <OSTimeDly.part.0>
     fa6:	08 95       	ret

00000fa8 <OSTimeDlyHMSM>:
     fa8:	cf 92       	push	r12
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	81 11       	cpse	r24, r1
     fb2:	0d c0       	rjmp	.+26     	; 0xfce <OSTimeDlyHMSM+0x26>
     fb4:	61 11       	cpse	r22, r1
     fb6:	0b c0       	rjmp	.+22     	; 0xfce <OSTimeDlyHMSM+0x26>
     fb8:	41 11       	cpse	r20, r1
     fba:	0c c0       	rjmp	.+24     	; 0xfd4 <OSTimeDlyHMSM+0x2c>
     fbc:	21 15       	cp	r18, r1
     fbe:	31 05       	cpc	r19, r1
     fc0:	61 f4       	brne	.+24     	; 0xfda <OSTimeDlyHMSM+0x32>
     fc2:	84 e5       	ldi	r24, 0x54	; 84
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	08 95       	ret
     fce:	6c 33       	cpi	r22, 0x3C	; 60
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <OSTimeDlyHMSM+0x2c>
     fd2:	4f c0       	rjmp	.+158    	; 0x1072 <OSTimeDlyHMSM+0xca>
     fd4:	4c 33       	cpi	r20, 0x3C	; 60
     fd6:	08 f0       	brcs	.+2      	; 0xfda <OSTimeDlyHMSM+0x32>
     fd8:	4e c0       	rjmp	.+156    	; 0x1076 <OSTimeDlyHMSM+0xce>
     fda:	28 3e       	cpi	r18, 0xE8	; 232
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	39 07       	cpc	r19, r25
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <OSTimeDlyHMSM+0x3c>
     fe2:	4b c0       	rjmp	.+150    	; 0x107a <OSTimeDlyHMSM+0xd2>
     fe4:	f9 01       	movw	r30, r18
     fe6:	58 2f       	mov	r21, r24
     fe8:	26 2f       	mov	r18, r22
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	ac e3       	ldi	r26, 0x3C	; 60
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	0e 94 ad 08 	call	0x115a	; 0x115a <__umulhisi3>
     ff4:	6b 01       	movw	r12, r22
     ff6:	7c 01       	movw	r14, r24
     ff8:	c4 0e       	add	r12, r20
     ffa:	d1 1c       	adc	r13, r1
     ffc:	e1 1c       	adc	r14, r1
     ffe:	f1 1c       	adc	r15, r1
    1000:	25 2f       	mov	r18, r21
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	a0 e1       	ldi	r26, 0x10	; 16
    1006:	be e0       	ldi	r27, 0x0E	; 14
    1008:	0e 94 ad 08 	call	0x115a	; 0x115a <__umulhisi3>
    100c:	a7 01       	movw	r20, r14
    100e:	96 01       	movw	r18, r12
    1010:	26 0f       	add	r18, r22
    1012:	37 1f       	adc	r19, r23
    1014:	48 1f       	adc	r20, r24
    1016:	59 1f       	adc	r21, r25
    1018:	a4 e6       	ldi	r26, 0x64	; 100
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	0e 94 bc 08 	call	0x1178	; 0x1178 <__muluhisi3>
    1020:	6b 01       	movw	r12, r22
    1022:	7c 01       	movw	r14, r24
    1024:	9f 01       	movw	r18, r30
    1026:	0e 94 ad 08 	call	0x115a	; 0x115a <__umulhisi3>
    102a:	6c 50       	subi	r22, 0x0C	; 12
    102c:	7e 4f       	sbci	r23, 0xFE	; 254
    102e:	8f 4f       	sbci	r24, 0xFF	; 255
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	28 ee       	ldi	r18, 0xE8	; 232
    1034:	33 e0       	ldi	r19, 0x03	; 3
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	0e 94 8b 08 	call	0x1116	; 0x1116 <__udivmodsi4>
    103e:	d7 01       	movw	r26, r14
    1040:	c6 01       	movw	r24, r12
    1042:	82 0f       	add	r24, r18
    1044:	93 1f       	adc	r25, r19
    1046:	a4 1f       	adc	r26, r20
    1048:	b5 1f       	adc	r27, r21
    104a:	7d 01       	movw	r14, r26
    104c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <OSTimeDly>
    1050:	e1 14       	cp	r14, r1
    1052:	f1 04       	cpc	r15, r1
    1054:	11 f4       	brne	.+4      	; 0x105a <OSTimeDlyHMSM+0xb2>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	b5 cf       	rjmp	.-150    	; 0xfc4 <OSTimeDlyHMSM+0x1c>
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e8       	ldi	r25, 0x80	; 128
    105e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <OSTimeDly.part.0>
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e8       	ldi	r25, 0x80	; 128
    1066:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <OSTimeDly.part.0>
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	e8 1a       	sub	r14, r24
    106e:	f1 08       	sbc	r15, r1
    1070:	ef cf       	rjmp	.-34     	; 0x1050 <OSTimeDlyHMSM+0xa8>
    1072:	81 e5       	ldi	r24, 0x51	; 81
    1074:	a7 cf       	rjmp	.-178    	; 0xfc4 <OSTimeDlyHMSM+0x1c>
    1076:	82 e5       	ldi	r24, 0x52	; 82
    1078:	a5 cf       	rjmp	.-182    	; 0xfc4 <OSTimeDlyHMSM+0x1c>
    107a:	83 e5       	ldi	r24, 0x53	; 83
    107c:	a3 cf       	rjmp	.-186    	; 0xfc4 <OSTimeDlyHMSM+0x1c>

0000107e <main>:

}

int main( void )
{
    robo_Setup();                                          /* initialize HAL for RoboKar     */
    107e:	0e 94 8a 02 	call	0x514	; 0x514 <robo_Setup>
    OSInit();                                              /* initialize UCOS-II kernel      */
    1082:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <OSInit>

    robo_motorSpeed(STOP_SPEED, STOP_SPEED);               /* Stop the robot                 */
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	0e 94 ad 01 	call	0x35a	; 0x35a <robo_motorSpeed>
    myrobot.rspeed   = STOP_SPEED;                         /* Initialize myrobot states      */
    1092:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <myrobot+0x1>
    1096:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <myrobot>
    myrobot.lspeed   = STOP_SPEED;
    109a:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <myrobot+0x3>
    109e:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <myrobot+0x2>
    myrobot.obstacle = 0;                                  /*  No collisioin                 */
    10a2:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>

    OSTaskCreate(TaskStart,                                /* create TaskStart Task          */
    10a6:	21 e0       	ldi	r18, 0x01	; 1
    10a8:	4e e9       	ldi	r20, 0x9E	; 158
    10aa:	53 e0       	ldi	r21, 0x03	; 3
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	83 eb       	ldi	r24, 0xB3	; 179
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 83 06 	call	0xd06	; 0xd06 <OSTaskCreate>
                (void *)0,
                (void *)&TaskStartStk[TASK_STK_SZ - 1],
                TASK_START_PRIO);
	robo_Honk(); robo_wait4goPress();                      /* Wait for to GO                 */
    10b8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <robo_Honk>
    10bc:	0e 94 76 02 	call	0x4ec	; 0x4ec <robo_wait4goPress>
    OSStart();                                             /* Start multitasking             */
    10c0:	0e 94 3c 05 	call	0xa78	; 0xa78 <OSStart>
    10c4:	ff cf       	rjmp	.-2      	; 0x10c4 <main+0x46>

000010c6 <__udivmodhi4>:
    10c6:	aa 1b       	sub	r26, r26
    10c8:	bb 1b       	sub	r27, r27
    10ca:	51 e1       	ldi	r21, 0x11	; 17
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <__udivmodhi4_ep>

000010ce <__udivmodhi4_loop>:
    10ce:	aa 1f       	adc	r26, r26
    10d0:	bb 1f       	adc	r27, r27
    10d2:	a6 17       	cp	r26, r22
    10d4:	b7 07       	cpc	r27, r23
    10d6:	10 f0       	brcs	.+4      	; 0x10dc <__udivmodhi4_ep>
    10d8:	a6 1b       	sub	r26, r22
    10da:	b7 0b       	sbc	r27, r23

000010dc <__udivmodhi4_ep>:
    10dc:	88 1f       	adc	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	5a 95       	dec	r21
    10e2:	a9 f7       	brne	.-22     	; 0x10ce <__udivmodhi4_loop>
    10e4:	80 95       	com	r24
    10e6:	90 95       	com	r25
    10e8:	bc 01       	movw	r22, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	08 95       	ret

000010ee <__divmodhi4>:
    10ee:	97 fb       	bst	r25, 7
    10f0:	07 2e       	mov	r0, r23
    10f2:	16 f4       	brtc	.+4      	; 0x10f8 <__divmodhi4+0xa>
    10f4:	00 94       	com	r0
    10f6:	07 d0       	rcall	.+14     	; 0x1106 <__divmodhi4_neg1>
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	09 d0       	rcall	.+18     	; 0x110e <__divmodhi4_neg2>
    10fc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__udivmodhi4>
    1100:	07 fc       	sbrc	r0, 7
    1102:	05 d0       	rcall	.+10     	; 0x110e <__divmodhi4_neg2>
    1104:	3e f4       	brtc	.+14     	; 0x1114 <__divmodhi4_exit>

00001106 <__divmodhi4_neg1>:
    1106:	90 95       	com	r25
    1108:	81 95       	neg	r24
    110a:	9f 4f       	sbci	r25, 0xFF	; 255
    110c:	08 95       	ret

0000110e <__divmodhi4_neg2>:
    110e:	70 95       	com	r23
    1110:	61 95       	neg	r22
    1112:	7f 4f       	sbci	r23, 0xFF	; 255

00001114 <__divmodhi4_exit>:
    1114:	08 95       	ret

00001116 <__udivmodsi4>:
    1116:	a1 e2       	ldi	r26, 0x21	; 33
    1118:	1a 2e       	mov	r1, r26
    111a:	aa 1b       	sub	r26, r26
    111c:	bb 1b       	sub	r27, r27
    111e:	fd 01       	movw	r30, r26
    1120:	0d c0       	rjmp	.+26     	; 0x113c <__udivmodsi4_ep>

00001122 <__udivmodsi4_loop>:
    1122:	aa 1f       	adc	r26, r26
    1124:	bb 1f       	adc	r27, r27
    1126:	ee 1f       	adc	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	a2 17       	cp	r26, r18
    112c:	b3 07       	cpc	r27, r19
    112e:	e4 07       	cpc	r30, r20
    1130:	f5 07       	cpc	r31, r21
    1132:	20 f0       	brcs	.+8      	; 0x113c <__udivmodsi4_ep>
    1134:	a2 1b       	sub	r26, r18
    1136:	b3 0b       	sbc	r27, r19
    1138:	e4 0b       	sbc	r30, r20
    113a:	f5 0b       	sbc	r31, r21

0000113c <__udivmodsi4_ep>:
    113c:	66 1f       	adc	r22, r22
    113e:	77 1f       	adc	r23, r23
    1140:	88 1f       	adc	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	1a 94       	dec	r1
    1146:	69 f7       	brne	.-38     	; 0x1122 <__udivmodsi4_loop>
    1148:	60 95       	com	r22
    114a:	70 95       	com	r23
    114c:	80 95       	com	r24
    114e:	90 95       	com	r25
    1150:	9b 01       	movw	r18, r22
    1152:	ac 01       	movw	r20, r24
    1154:	bd 01       	movw	r22, r26
    1156:	cf 01       	movw	r24, r30
    1158:	08 95       	ret

0000115a <__umulhisi3>:
    115a:	a2 9f       	mul	r26, r18
    115c:	b0 01       	movw	r22, r0
    115e:	b3 9f       	mul	r27, r19
    1160:	c0 01       	movw	r24, r0
    1162:	a3 9f       	mul	r26, r19
    1164:	70 0d       	add	r23, r0
    1166:	81 1d       	adc	r24, r1
    1168:	11 24       	eor	r1, r1
    116a:	91 1d       	adc	r25, r1
    116c:	b2 9f       	mul	r27, r18
    116e:	70 0d       	add	r23, r0
    1170:	81 1d       	adc	r24, r1
    1172:	11 24       	eor	r1, r1
    1174:	91 1d       	adc	r25, r1
    1176:	08 95       	ret

00001178 <__muluhisi3>:
    1178:	0e 94 ad 08 	call	0x115a	; 0x115a <__umulhisi3>
    117c:	a5 9f       	mul	r26, r21
    117e:	90 0d       	add	r25, r0
    1180:	b4 9f       	mul	r27, r20
    1182:	90 0d       	add	r25, r0
    1184:	a4 9f       	mul	r26, r20
    1186:	80 0d       	add	r24, r0
    1188:	91 1d       	adc	r25, r1
    118a:	11 24       	eor	r1, r1
    118c:	08 95       	ret

0000118e <_exit>:
    118e:	f8 94       	cli

00001190 <__stop_program>:
    1190:	ff cf       	rjmp	.-2      	; 0x1190 <__stop_program>

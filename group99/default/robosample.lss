
robosample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800100  00001672  00001706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000411  00800250  00800250  00001856  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001856  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000018a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001589  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000856  00000000  00000000  00002f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a05  00000000  00000000  000037cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000041d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000687  00000000  00000000  00004280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ed  00000000  00000000  00004907  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00004af4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 39 02 	jmp	0x472	; 0x472 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e7       	ldi	r30, 0x72	; 114
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 35       	cpi	r26, 0x50	; 80
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a0 e5       	ldi	r26, 0x50	; 80
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 36       	cpi	r26, 0x61	; 97
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <main>
      9e:	0c 94 37 0b 	jmp	0x166e	; 0x166e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <TestLineSensor>:
        OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 500 ms                  */
    }
}

void TestLineSensor (void *data)
{
      a6:	ff cf       	rjmp	.-2      	; 0xa6 <TestLineSensor>

000000a8 <CheckCollision>:
void CheckCollision (void *data)
{
    for(;;)
    {
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      a8:	c1 e0       	ldi	r28, 0x01	; 1
/*------High pririority task----------*/
void CheckCollision (void *data)
{
    for(;;)
    {
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      aa:	0e 94 95 07 	call	0xf2a	; 0xf2a <robo_proxSensor>
      ae:	01 97       	sbiw	r24, 0x01	; 1
      b0:	51 f4       	brne	.+20     	; 0xc6 <CheckCollision+0x1e>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      b2:	c0 93 d4 02 	sts	0x02D4, r28	; 0x8002d4 <myrobot+0x4>
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */

		OSTimeDlyHMSM(0, 0, 0, 100);                /* Task period ~ 100 ms              */
      b6:	24 e6       	ldi	r18, 0x64	; 100
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	0e 94 07 06 	call	0xc0e	; 0xc0e <OSTimeDlyHMSM>
/*------High pririority task----------*/
void CheckCollision (void *data)
{
    for(;;)
    {
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      c4:	f2 cf       	rjmp	.-28     	; 0xaa <CheckCollision+0x2>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */
      c6:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <myrobot+0x4>
      ca:	f5 cf       	rjmp	.-22     	; 0xb6 <CheckCollision+0xe>

000000cc <CntrlMotors>:

    for(;;)
    {
        speed_r = myrobot.rspeed;
        speed_l = myrobot.lspeed;
        robo_motorSpeed(speed_l, speed_r);
      cc:	60 91 d0 02 	lds	r22, 0x02D0	; 0x8002d0 <myrobot>
      d0:	70 91 d1 02 	lds	r23, 0x02D1	; 0x8002d1 <myrobot+0x1>
      d4:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <myrobot+0x2>
      d8:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <myrobot+0x3>
      dc:	0e 94 3a 07 	call	0xe74	; 0xe74 <robo_motorSpeed>
        OSTimeDlyHMSM(0, 0, 0, 5);                /* Task period ~ 250 ms              */
      e0:	25 e0       	ldi	r18, 0x05	; 5
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 07 06 	call	0xc0e	; 0xc0e <OSTimeDlyHMSM>
      ee:	ee cf       	rjmp	.-36     	; 0xcc <CntrlMotors>

000000f0 <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here           */
void TaskStart( void *data )
{
    OS_ticks_init();                                        /* enable RTOS timer tick        */
      f0:	0e 94 08 08 	call	0x1010	; 0x1010 <OS_ticks_init>

    OSTaskCreate(CheckCollision,                            /* Task function                 */
      f4:	25 e0       	ldi	r18, 0x05	; 5
      f6:	4f ec       	ldi	r20, 0xCF	; 207
      f8:	52 e0       	ldi	r21, 0x02	; 2
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	84 e5       	ldi	r24, 0x54	; 84
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 b6 04 	call	0x96c	; 0x96c <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&ChkCollideStk[TASK_STK_SZ - 1],    /* stack allocated to task       */
                TASK_CHKCOLLIDE_PRIO);                      /* priority of task              */

    OSTaskCreate(CntrlMotors,                               /* Task function                 */
     106:	23 e0       	ldi	r18, 0x03	; 3
     108:	4c e5       	ldi	r20, 0x5C	; 92
     10a:	53 e0       	ldi	r21, 0x03	; 3
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	86 e6       	ldi	r24, 0x66	; 102
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 b6 04 	call	0x96c	; 0x96c <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&CtrlmotorStk[TASK_STK_SZ - 1],     /* stack allocated to task       */
                TASK_CTRLMOTOR_PRIO);                       /* priority of task              */

    OSTaskCreate(Navig,                                     /* Task function                 */
     118:	21 e0       	ldi	r18, 0x01	; 1
     11a:	4c ed       	ldi	r20, 0xDC	; 220
     11c:	54 e0       	ldi	r21, 0x04	; 4
     11e:	70 e0       	ldi	r23, 0x00	; 0
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	83 eb       	ldi	r24, 0xB3	; 179
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 b6 04 	call	0x96c	; 0x96c <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&NavigStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_NAVIG_PRIO);                           /* priority of task              */

 OSTaskCreate(TestLineSensor,                                     /* Task function                 */
     12a:	24 e0       	ldi	r18, 0x04	; 4
     12c:	4c e5       	ldi	r20, 0x5C	; 92
     12e:	54 e0       	ldi	r21, 0x04	; 4
     130:	70 e0       	ldi	r23, 0x00	; 0
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	83 e5       	ldi	r24, 0x53	; 83
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 b6 04 	call	0x96c	; 0x96c <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&LineStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_LINE_PRIO); 
    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	45 e0       	ldi	r20, 0x05	; 5
     142:	60 e0       	ldi	r22, 0x00	; 0
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	0e 94 07 06 	call	0xc0e	; 0xc0e <OSTimeDlyHMSM>
     14a:	f8 cf       	rjmp	.-16     	; 0x13c <TaskStart+0x4c>

0000014c <normalizeSensorReading>:
    }
}


int normalizeSensorReading (int sensorReading)
{
     14c:	01 97       	sbiw	r24, 0x01	; 1
     14e:	87 30       	cpi	r24, 0x07	; 7
     150:	91 05       	cpc	r25, r1
     152:	30 f4       	brcc	.+12     	; 0x160 <normalizeSensorReading+0x14>
     154:	88 5f       	subi	r24, 0xF8	; 248
     156:	9d 4f       	sbci	r25, 0xFD	; 253
     158:	fc 01       	movw	r30, r24
     15a:	80 81       	ld	r24, Z
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	08 95       	ret
//    switch statement, if 0 then 0, if 7 then then 150, if 2 then 50
    switch (sensorReading)
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	80 e0       	ldi	r24, 0x00	; 0
            return 100;
        default:
            return 0;       
    }

}
     164:	08 95       	ret

00000166 <Navig>:
        }

        // Line sensor measurement
        int lineSensorReading = normalizeSensorReading(robo_lineSensor());

        cprintf("line sensor reading: %d", lineSensorReading);
     166:	80 e2       	ldi	r24, 0x20	; 32
     168:	e8 2e       	mov	r14, r24
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	f8 2e       	mov	r15, r24
        robo_LED_on();


          // Calculate error
        double error = TARGET_LINE_POSITION - lineSensorReading;
     16e:	02 e3       	ldi	r16, 0x32	; 50
     170:	10 e0       	ldi	r17, 0x00	; 0
        // Update motor speeds based on control signal
        myrobot.rspeed = MEDIUM_SPEED - (int)controlSignal;
        myrobot.lspeed = MEDIUM_SPEED + (int)controlSignal;


        cprintf("rspeed: %d, lspeed: %d", myrobot.rspeed, myrobot.lspeed);
     172:	c8 e3       	ldi	r28, 0x38	; 56
     174:	d2 e0       	ldi	r29, 0x02	; 2

    for (;;)
    {


        if (myrobot.obstacle == 1)
     176:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <myrobot+0x4>
     17a:	81 30       	cpi	r24, 0x01	; 1
     17c:	81 f4       	brne	.+32     	; 0x19e <Navig+0x38>
        {
            myrobot.rspeed = 0;
     17e:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <myrobot+0x1>
     182:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <myrobot>
            myrobot.lspeed = 0;
     186:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <myrobot+0x3>
     18a:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <myrobot+0x2>
            OSTimeDlyHMSM(0, 0, 0, 1000);                /* Task period ~ 500 ms                  */
     18e:	28 ee       	ldi	r18, 0xE8	; 232
     190:	33 e0       	ldi	r19, 0x03	; 3
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	0e 94 07 06 	call	0xc0e	; 0xc0e <OSTimeDlyHMSM>
            continue;
     19c:	ec cf       	rjmp	.-40     	; 0x176 <Navig+0x10>
        }

        // Line sensor measurement
        int lineSensorReading = normalizeSensorReading(robo_lineSensor());
     19e:	0e 94 b8 07 	call	0xf70	; 0xf70 <robo_lineSensor>
     1a2:	0e 94 a6 00 	call	0x14c	; 0x14c <normalizeSensorReading>
     1a6:	5c 01       	movw	r10, r24

        cprintf("line sensor reading: %d", lineSensorReading);
     1a8:	bf 92       	push	r11
     1aa:	8f 93       	push	r24
     1ac:	ff 92       	push	r15
     1ae:	ef 92       	push	r14
     1b0:	0e 94 33 08 	call	0x1066	; 0x1066 <cprintf>
        robo_LED_on();
     1b4:	28 9a       	sbi	0x05, 0	; 5


          // Calculate error
        double error = TARGET_LINE_POSITION - lineSensorReading;
     1b6:	b8 01       	movw	r22, r16
     1b8:	6a 19       	sub	r22, r10
     1ba:	7b 09       	sbc	r23, r11
     1bc:	07 2e       	mov	r0, r23
     1be:	00 0c       	add	r0, r0
     1c0:	88 0b       	sbc	r24, r24
     1c2:	99 0b       	sbc	r25, r25
     1c4:	0e 94 15 0a 	call	0x142a	; 0x142a <__floatsisf>
     1c8:	4b 01       	movw	r8, r22
     1ca:	5c 01       	movw	r10, r24

         // Update integral term
        myrobot.integral += error;
     1cc:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <myrobot+0x9>
     1d0:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <myrobot+0xa>
     1d4:	40 91 db 02 	lds	r20, 0x02DB	; 0x8002db <myrobot+0xb>
     1d8:	50 91 dc 02 	lds	r21, 0x02DC	; 0x8002dc <myrobot+0xc>
     1dc:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__addsf3>
     1e0:	2b 01       	movw	r4, r22
     1e2:	3c 01       	movw	r6, r24

        // Limit the integral term to prevent excessive accumulation
        if (myrobot.integral > MAX_INTEGRAL_TERM)
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	48 ec       	ldi	r20, 0xC8	; 200
     1f2:	52 e4       	ldi	r21, 0x42	; 66
     1f4:	0e 94 c5 0a 	call	0x158a	; 0x158a <__gesf2>
     1f8:	18 16       	cp	r1, r24
     1fa:	6c f4       	brge	.+26     	; 0x216 <Navig+0xb0>
            myrobot.integral = MAX_INTEGRAL_TERM;
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	a8 ec       	ldi	r26, 0xC8	; 200
     202:	b2 e4       	ldi	r27, 0x42	; 66
        else if (myrobot.integral < -MAX_INTEGRAL_TERM)
            myrobot.integral = -MAX_INTEGRAL_TERM;
     204:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <myrobot+0x9>
     208:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <myrobot+0xa>
     20c:	a0 93 db 02 	sts	0x02DB, r26	; 0x8002db <myrobot+0xb>
     210:	b0 93 dc 02 	sts	0x02DC, r27	; 0x8002dc <myrobot+0xc>
     214:	12 c0       	rjmp	.+36     	; 0x23a <Navig+0xd4>
        myrobot.integral += error;

        // Limit the integral term to prevent excessive accumulation
        if (myrobot.integral > MAX_INTEGRAL_TERM)
            myrobot.integral = MAX_INTEGRAL_TERM;
        else if (myrobot.integral < -MAX_INTEGRAL_TERM)
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	48 ec       	ldi	r20, 0xC8	; 200
     21c:	52 ec       	ldi	r21, 0xC2	; 194
     21e:	c3 01       	movw	r24, r6
     220:	b2 01       	movw	r22, r4
     222:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__cmpsf2>
     226:	87 fd       	sbrc	r24, 7
     228:	5f c0       	rjmp	.+190    	; 0x2e8 <Navig+0x182>

          // Calculate error
        double error = TARGET_LINE_POSITION - lineSensorReading;

         // Update integral term
        myrobot.integral += error;
     22a:	40 92 d9 02 	sts	0x02D9, r4	; 0x8002d9 <myrobot+0x9>
     22e:	50 92 da 02 	sts	0x02DA, r5	; 0x8002da <myrobot+0xa>
     232:	60 92 db 02 	sts	0x02DB, r6	; 0x8002db <myrobot+0xb>
     236:	70 92 dc 02 	sts	0x02DC, r7	; 0x8002dc <myrobot+0xc>
            myrobot.integral = MAX_INTEGRAL_TERM;
        else if (myrobot.integral < -MAX_INTEGRAL_TERM)
            myrobot.integral = -MAX_INTEGRAL_TERM;

        // Calculate control signal
        double controlSignal = (Kp * error) + (Ki * myrobot.integral) + (Kd * (error - myrobot.prevError));
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	a9 01       	movw	r20, r18
     240:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <myrobot+0x9>
     244:	70 91 da 02 	lds	r23, 0x02DA	; 0x8002da <myrobot+0xa>
     248:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <myrobot+0xb>
     24c:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <myrobot+0xc>
     250:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__mulsf3>
     254:	a5 01       	movw	r20, r10
     256:	94 01       	movw	r18, r8
     258:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__addsf3>
     25c:	2b 01       	movw	r4, r22
     25e:	3c 01       	movw	r6, r24
     260:	20 91 d5 02 	lds	r18, 0x02D5	; 0x8002d5 <myrobot+0x5>
     264:	30 91 d6 02 	lds	r19, 0x02D6	; 0x8002d6 <myrobot+0x6>
     268:	40 91 d7 02 	lds	r20, 0x02D7	; 0x8002d7 <myrobot+0x7>
     26c:	50 91 d8 02 	lds	r21, 0x02D8	; 0x8002d8 <myrobot+0x8>
     270:	c5 01       	movw	r24, r10
     272:	b4 01       	movw	r22, r8
     274:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__subsf3>
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	a9 01       	movw	r20, r18
     27e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__mulsf3>
     282:	9b 01       	movw	r18, r22
     284:	ac 01       	movw	r20, r24
     286:	c3 01       	movw	r24, r6
     288:	b2 01       	movw	r22, r4
     28a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__addsf3>

        // Update previous error
        myrobot.prevError = error;
     28e:	80 92 d5 02 	sts	0x02D5, r8	; 0x8002d5 <myrobot+0x5>
     292:	90 92 d6 02 	sts	0x02D6, r9	; 0x8002d6 <myrobot+0x6>
     296:	a0 92 d7 02 	sts	0x02D7, r10	; 0x8002d7 <myrobot+0x7>
     29a:	b0 92 d8 02 	sts	0x02D8, r11	; 0x8002d8 <myrobot+0x8>

        // Update motor speeds based on control signal
        myrobot.rspeed = MEDIUM_SPEED - (int)controlSignal;
     29e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__fixsfsi>
     2a2:	98 01       	movw	r18, r16
     2a4:	26 1b       	sub	r18, r22
     2a6:	37 0b       	sbc	r19, r23
     2a8:	30 93 d1 02 	sts	0x02D1, r19	; 0x8002d1 <myrobot+0x1>
     2ac:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <myrobot>
        myrobot.lspeed = MEDIUM_SPEED + (int)controlSignal;
     2b0:	6e 5c       	subi	r22, 0xCE	; 206
     2b2:	7f 4f       	sbci	r23, 0xFF	; 255
     2b4:	70 93 d3 02 	sts	0x02D3, r23	; 0x8002d3 <myrobot+0x3>
     2b8:	60 93 d2 02 	sts	0x02D2, r22	; 0x8002d2 <myrobot+0x2>


        cprintf("rspeed: %d, lspeed: %d", myrobot.rspeed, myrobot.lspeed);
     2bc:	7f 93       	push	r23
     2be:	6f 93       	push	r22
     2c0:	3f 93       	push	r19
     2c2:	2f 93       	push	r18
     2c4:	df 93       	push	r29
     2c6:	cf 93       	push	r28
     2c8:	0e 94 33 08 	call	0x1066	; 0x1066 <cprintf>
       
        OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 500 ms                  */
     2cc:	2a e0       	ldi	r18, 0x0A	; 10
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	0e 94 07 06 	call	0xc0e	; 0xc0e <OSTimeDlyHMSM>
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	47 cf       	rjmp	.-370    	; 0x176 <Navig+0x10>

        // Limit the integral term to prevent excessive accumulation
        if (myrobot.integral > MAX_INTEGRAL_TERM)
            myrobot.integral = MAX_INTEGRAL_TERM;
        else if (myrobot.integral < -MAX_INTEGRAL_TERM)
            myrobot.integral = -MAX_INTEGRAL_TERM;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	a8 ec       	ldi	r26, 0xC8	; 200
     2ee:	b2 ec       	ldi	r27, 0xC2	; 194
     2f0:	89 cf       	rjmp	.-238    	; 0x204 <Navig+0x9e>

000002f2 <OSStartHighRdy>:
     2f2:	00 91 de 04 	lds	r16, 0x04DE	; 0x8004de <OSRunning>
     2f6:	03 95       	inc	r16
     2f8:	00 93 de 04 	sts	0x04DE, r16	; 0x8004de <OSRunning>
     2fc:	e0 91 ee 04 	lds	r30, 0x04EE	; 0x8004ee <OSTCBHighRdy>
     300:	f0 91 ef 04 	lds	r31, 0x04EF	; 0x8004ef <OSTCBHighRdy+0x1>
     304:	c1 91       	ld	r28, Z+
     306:	cd bf       	out	0x3d, r28	; 61
     308:	d1 91       	ld	r29, Z+
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f 91       	pop	r16
     30e:	0f bf       	out	0x3f, r16	; 63
     310:	ff 91       	pop	r31
     312:	ef 91       	pop	r30
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	bf 91       	pop	r27
     31a:	af 91       	pop	r26
     31c:	9f 91       	pop	r25
     31e:	8f 91       	pop	r24
     320:	7f 91       	pop	r23
     322:	6f 91       	pop	r22
     324:	5f 91       	pop	r21
     326:	4f 91       	pop	r20
     328:	3f 91       	pop	r19
     32a:	2f 91       	pop	r18
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	bf 90       	pop	r11
     33a:	af 90       	pop	r10
     33c:	9f 90       	pop	r9
     33e:	8f 90       	pop	r8
     340:	7f 90       	pop	r7
     342:	6f 90       	pop	r6
     344:	5f 90       	pop	r5
     346:	4f 90       	pop	r4
     348:	3f 90       	pop	r3
     34a:	2f 90       	pop	r2
     34c:	1f 90       	pop	r1
     34e:	0f 90       	pop	r0
     350:	08 95       	ret

00000352 <OSCtxSw>:
     352:	0f 92       	push	r0
     354:	1f 92       	push	r1
     356:	2f 92       	push	r2
     358:	3f 92       	push	r3
     35a:	4f 92       	push	r4
     35c:	5f 92       	push	r5
     35e:	6f 92       	push	r6
     360:	7f 92       	push	r7
     362:	8f 92       	push	r8
     364:	9f 92       	push	r9
     366:	af 92       	push	r10
     368:	bf 92       	push	r11
     36a:	cf 92       	push	r12
     36c:	df 92       	push	r13
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	2f 93       	push	r18
     378:	3f 93       	push	r19
     37a:	4f 93       	push	r20
     37c:	5f 93       	push	r21
     37e:	6f 93       	push	r22
     380:	7f 93       	push	r23
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
     386:	af 93       	push	r26
     388:	bf 93       	push	r27
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	ef 93       	push	r30
     390:	ff 93       	push	r31
     392:	0f b7       	in	r16, 0x3f	; 63
     394:	0f 93       	push	r16
     396:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <OSTCBCur>
     39a:	f0 91 f7 04 	lds	r31, 0x04F7	; 0x8004f7 <OSTCBCur+0x1>
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	c1 93       	st	Z+, r28
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	d1 93       	st	Z+, r29
     3a6:	00 91 e3 04 	lds	r16, 0x04E3	; 0x8004e3 <OSPrioHighRdy>
     3aa:	00 93 e4 04 	sts	0x04E4, r16	; 0x8004e4 <OSPrioCur>
     3ae:	e0 91 ee 04 	lds	r30, 0x04EE	; 0x8004ee <OSTCBHighRdy>
     3b2:	f0 91 ef 04 	lds	r31, 0x04EF	; 0x8004ef <OSTCBHighRdy+0x1>
     3b6:	e0 93 f6 04 	sts	0x04F6, r30	; 0x8004f6 <OSTCBCur>
     3ba:	f0 93 f7 04 	sts	0x04F7, r31	; 0x8004f7 <OSTCBCur+0x1>
     3be:	c1 91       	ld	r28, Z+
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	d1 91       	ld	r29, Z+
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f 91       	pop	r16
     3c8:	0f bf       	out	0x3f, r16	; 63
     3ca:	ff 91       	pop	r31
     3cc:	ef 91       	pop	r30
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	bf 91       	pop	r27
     3d4:	af 91       	pop	r26
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	7f 91       	pop	r23
     3dc:	6f 91       	pop	r22
     3de:	5f 91       	pop	r21
     3e0:	4f 91       	pop	r20
     3e2:	3f 91       	pop	r19
     3e4:	2f 91       	pop	r18
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	ff 90       	pop	r15
     3ec:	ef 90       	pop	r14
     3ee:	df 90       	pop	r13
     3f0:	cf 90       	pop	r12
     3f2:	bf 90       	pop	r11
     3f4:	af 90       	pop	r10
     3f6:	9f 90       	pop	r9
     3f8:	8f 90       	pop	r8
     3fa:	7f 90       	pop	r7
     3fc:	6f 90       	pop	r6
     3fe:	5f 90       	pop	r5
     400:	4f 90       	pop	r4
     402:	3f 90       	pop	r3
     404:	2f 90       	pop	r2
     406:	1f 90       	pop	r1
     408:	0f 90       	pop	r0
     40a:	08 95       	ret

0000040c <OSIntCtxSw>:
     40c:	00 91 e3 04 	lds	r16, 0x04E3	; 0x8004e3 <OSPrioHighRdy>
     410:	00 93 e4 04 	sts	0x04E4, r16	; 0x8004e4 <OSPrioCur>
     414:	e0 91 ee 04 	lds	r30, 0x04EE	; 0x8004ee <OSTCBHighRdy>
     418:	f0 91 ef 04 	lds	r31, 0x04EF	; 0x8004ef <OSTCBHighRdy+0x1>
     41c:	e0 93 f6 04 	sts	0x04F6, r30	; 0x8004f6 <OSTCBCur>
     420:	f0 93 f7 04 	sts	0x04F7, r31	; 0x8004f7 <OSTCBCur+0x1>
     424:	c1 91       	ld	r28, Z+
     426:	cd bf       	out	0x3d, r28	; 61
     428:	d1 91       	ld	r29, Z+
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f 91       	pop	r16
     42e:	0f bf       	out	0x3f, r16	; 63
     430:	ff 91       	pop	r31
     432:	ef 91       	pop	r30
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	bf 91       	pop	r27
     43a:	af 91       	pop	r26
     43c:	9f 91       	pop	r25
     43e:	8f 91       	pop	r24
     440:	7f 91       	pop	r23
     442:	6f 91       	pop	r22
     444:	5f 91       	pop	r21
     446:	4f 91       	pop	r20
     448:	3f 91       	pop	r19
     44a:	2f 91       	pop	r18
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	cf 90       	pop	r12
     458:	bf 90       	pop	r11
     45a:	af 90       	pop	r10
     45c:	9f 90       	pop	r9
     45e:	8f 90       	pop	r8
     460:	7f 90       	pop	r7
     462:	6f 90       	pop	r6
     464:	5f 90       	pop	r5
     466:	4f 90       	pop	r4
     468:	3f 90       	pop	r3
     46a:	2f 90       	pop	r2
     46c:	1f 90       	pop	r1
     46e:	0f 90       	pop	r0
     470:	08 95       	ret

00000472 <OSTickISR>:
     472:	0f 92       	push	r0
     474:	1f 92       	push	r1
     476:	2f 92       	push	r2
     478:	3f 92       	push	r3
     47a:	4f 92       	push	r4
     47c:	5f 92       	push	r5
     47e:	6f 92       	push	r6
     480:	7f 92       	push	r7
     482:	8f 92       	push	r8
     484:	9f 92       	push	r9
     486:	af 92       	push	r10
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	2f 93       	push	r18
     498:	3f 93       	push	r19
     49a:	4f 93       	push	r20
     49c:	5f 93       	push	r21
     49e:	6f 93       	push	r22
     4a0:	7f 93       	push	r23
     4a2:	8f 93       	push	r24
     4a4:	9f 93       	push	r25
     4a6:	af 93       	push	r26
     4a8:	bf 93       	push	r27
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	ef 93       	push	r30
     4b0:	ff 93       	push	r31
     4b2:	0f b7       	in	r16, 0x3f	; 63
     4b4:	00 68       	ori	r16, 0x80	; 128
     4b6:	0f 93       	push	r16
     4b8:	00 91 f5 04 	lds	r16, 0x04F5	; 0x8004f5 <OSIntNesting>
     4bc:	03 95       	inc	r16
     4be:	00 93 f5 04 	sts	0x04F5, r16	; 0x8004f5 <OSIntNesting>
     4c2:	01 30       	cpi	r16, 0x01	; 1
     4c4:	41 f4       	brne	.+16     	; 0x4d6 <_not_first_int>
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <OSTCBCur>
     4ce:	f0 91 f7 04 	lds	r31, 0x04F7	; 0x8004f7 <OSTCBCur+0x1>
     4d2:	c1 93       	st	Z+, r28
     4d4:	d1 93       	st	Z+, r29

000004d6 <_not_first_int>:
     4d6:	04 e6       	ldi	r16, 0x64	; 100
     4d8:	06 bd       	out	0x26, r16	; 38
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	1f 2e       	mov	r1, r31
     4de:	78 94       	sei
     4e0:	0e 94 9c 03 	call	0x738	; 0x738 <OSTimeTick>
     4e4:	00 00       	nop
     4e6:	0e 94 0f 03 	call	0x61e	; 0x61e <OSIntExit>
     4ea:	0f 91       	pop	r16
     4ec:	0f bf       	out	0x3f, r16	; 63
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	bf 91       	pop	r27
     4f8:	af 91       	pop	r26
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	7f 91       	pop	r23
     500:	6f 91       	pop	r22
     502:	5f 91       	pop	r21
     504:	4f 91       	pop	r20
     506:	3f 91       	pop	r19
     508:	2f 91       	pop	r18
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	bf 90       	pop	r11
     518:	af 90       	pop	r10
     51a:	9f 90       	pop	r9
     51c:	8f 90       	pop	r8
     51e:	7f 90       	pop	r7
     520:	6f 90       	pop	r6
     522:	5f 90       	pop	r5
     524:	4f 90       	pop	r4
     526:	3f 90       	pop	r3
     528:	2f 90       	pop	r2
     52a:	1f 90       	pop	r1
     52c:	0f 90       	pop	r0
     52e:	08 95       	ret

00000530 <OSTaskStkInit>:
     530:	fa 01       	movw	r30, r20
     532:	80 83       	st	Z, r24
     534:	31 97       	sbiw	r30, 0x01	; 1
     536:	90 83       	st	Z, r25
     538:	31 97       	sbiw	r30, 0x01	; 1
     53a:	10 82       	st	Z, r1
     53c:	31 97       	sbiw	r30, 0x01	; 1
     53e:	10 82       	st	Z, r1
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	10 82       	st	Z, r1
     544:	31 97       	sbiw	r30, 0x01	; 1
     546:	10 82       	st	Z, r1
     548:	31 97       	sbiw	r30, 0x01	; 1
     54a:	10 82       	st	Z, r1
     54c:	31 97       	sbiw	r30, 0x01	; 1
     54e:	10 82       	st	Z, r1
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	10 82       	st	Z, r1
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	10 82       	st	Z, r1
     558:	31 97       	sbiw	r30, 0x01	; 1
     55a:	10 82       	st	Z, r1
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	10 82       	st	Z, r1
     560:	31 97       	sbiw	r30, 0x01	; 1
     562:	10 82       	st	Z, r1
     564:	31 97       	sbiw	r30, 0x01	; 1
     566:	10 82       	st	Z, r1
     568:	31 97       	sbiw	r30, 0x01	; 1
     56a:	10 82       	st	Z, r1
     56c:	31 97       	sbiw	r30, 0x01	; 1
     56e:	10 82       	st	Z, r1
     570:	31 97       	sbiw	r30, 0x01	; 1
     572:	10 82       	st	Z, r1
     574:	31 97       	sbiw	r30, 0x01	; 1
     576:	10 82       	st	Z, r1
     578:	31 97       	sbiw	r30, 0x01	; 1
     57a:	10 82       	st	Z, r1
     57c:	31 97       	sbiw	r30, 0x01	; 1
     57e:	10 82       	st	Z, r1
     580:	31 97       	sbiw	r30, 0x01	; 1
     582:	10 82       	st	Z, r1
     584:	31 97       	sbiw	r30, 0x01	; 1
     586:	10 82       	st	Z, r1
     588:	31 97       	sbiw	r30, 0x01	; 1
     58a:	10 82       	st	Z, r1
     58c:	31 97       	sbiw	r30, 0x01	; 1
     58e:	10 82       	st	Z, r1
     590:	31 97       	sbiw	r30, 0x01	; 1
     592:	10 82       	st	Z, r1
     594:	31 97       	sbiw	r30, 0x01	; 1
     596:	10 82       	st	Z, r1
     598:	31 97       	sbiw	r30, 0x01	; 1
     59a:	60 83       	st	Z, r22
     59c:	31 97       	sbiw	r30, 0x01	; 1
     59e:	70 83       	st	Z, r23
     5a0:	31 97       	sbiw	r30, 0x01	; 1
     5a2:	10 82       	st	Z, r1
     5a4:	31 97       	sbiw	r30, 0x01	; 1
     5a6:	10 82       	st	Z, r1
     5a8:	31 97       	sbiw	r30, 0x01	; 1
     5aa:	10 82       	st	Z, r1
     5ac:	31 97       	sbiw	r30, 0x01	; 1
     5ae:	10 82       	st	Z, r1
     5b0:	31 97       	sbiw	r30, 0x01	; 1
     5b2:	10 82       	st	Z, r1
     5b4:	31 97       	sbiw	r30, 0x01	; 1
     5b6:	10 82       	st	Z, r1
     5b8:	31 97       	sbiw	r30, 0x01	; 1
     5ba:	80 e8       	ldi	r24, 0x80	; 128
     5bc:	80 83       	st	Z, r24
     5be:	ca 01       	movw	r24, r20
     5c0:	83 97       	sbiw	r24, 0x23	; 35
     5c2:	08 95       	ret

000005c4 <OSTaskCreateHook>:
     5c4:	08 95       	ret

000005c6 <OSTaskDelHook>:
     5c6:	08 95       	ret

000005c8 <OSTaskSwHook>:
     5c8:	08 95       	ret

000005ca <OSTaskStatHook>:
     5ca:	08 95       	ret

000005cc <OSTimeTickHook>:
     5cc:	08 95       	ret

000005ce <OSInitHookBegin>:
     5ce:	08 95       	ret

000005d0 <OSInitHookEnd>:
     5d0:	08 95       	ret

000005d2 <OSTaskIdleHook>:
     5d2:	08 95       	ret

000005d4 <OSTCBInitHook>:
     5d4:	08 95       	ret

000005d6 <OS_TaskIdle>:
     5d6:	f8 94       	cli
     5d8:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <OSIdleCtr>
     5dc:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <OSIdleCtr+0x1>
     5e0:	a0 91 e1 04 	lds	r26, 0x04E1	; 0x8004e1 <OSIdleCtr+0x2>
     5e4:	b0 91 e2 04 	lds	r27, 0x04E2	; 0x8004e2 <OSIdleCtr+0x3>
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	a1 1d       	adc	r26, r1
     5ec:	b1 1d       	adc	r27, r1
     5ee:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <OSIdleCtr>
     5f2:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <OSIdleCtr+0x1>
     5f6:	a0 93 e1 04 	sts	0x04E1, r26	; 0x8004e1 <OSIdleCtr+0x2>
     5fa:	b0 93 e2 04 	sts	0x04E2, r27	; 0x8004e2 <OSIdleCtr+0x3>
     5fe:	78 94       	sei
     600:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <OSTaskIdleHook>
     604:	e8 cf       	rjmp	.-48     	; 0x5d6 <OS_TaskIdle>

00000606 <OSIntEnter>:
     606:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <OSRunning>
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	39 f4       	brne	.+14     	; 0x61c <OSIntEnter+0x16>
     60e:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <OSIntNesting>
     612:	8f 3f       	cpi	r24, 0xFF	; 255
     614:	19 f0       	breq	.+6      	; 0x61c <OSIntEnter+0x16>
     616:	8f 5f       	subi	r24, 0xFF	; 255
     618:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <OSIntNesting>
     61c:	08 95       	ret

0000061e <OSIntExit>:
     61e:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <OSRunning>
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	09 f0       	breq	.+2      	; 0x628 <OSIntExit+0xa>
     626:	4c c0       	rjmp	.+152    	; 0x6c0 <OSIntExit+0xa2>
     628:	f8 94       	cli
     62a:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <OSIntNesting>
     62e:	88 23       	and	r24, r24
     630:	19 f0       	breq	.+6      	; 0x638 <OSIntExit+0x1a>
     632:	81 50       	subi	r24, 0x01	; 1
     634:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <OSIntNesting>
     638:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <OSIntNesting>
     63c:	81 11       	cpse	r24, r1
     63e:	3f c0       	rjmp	.+126    	; 0x6be <OSIntExit+0xa0>
     640:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <OSLockNesting>
     644:	81 11       	cpse	r24, r1
     646:	3b c0       	rjmp	.+118    	; 0x6be <OSIntExit+0xa0>
     648:	e0 91 f0 04 	lds	r30, 0x04F0	; 0x8004f0 <OSRdyGrp>
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	e0 50       	subi	r30, 0x00	; 0
     650:	ff 4f       	sbci	r31, 0xFF	; 255
     652:	e0 81       	ld	r30, Z
     654:	e0 93 f4 04 	sts	0x04F4, r30	; 0x8004f4 <OSIntExitY>
     658:	ae 2f       	mov	r26, r30
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	af 50       	subi	r26, 0x0F	; 15
     65e:	bb 4f       	sbci	r27, 0xFB	; 251
     660:	ac 91       	ld	r26, X
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	a0 50       	subi	r26, 0x00	; 0
     666:	bf 4f       	sbci	r27, 0xFF	; 255
     668:	ee 0f       	add	r30, r30
     66a:	ee 0f       	add	r30, r30
     66c:	ee 0f       	add	r30, r30
     66e:	8c 91       	ld	r24, X
     670:	e8 0f       	add	r30, r24
     672:	e0 93 e3 04 	sts	0x04E3, r30	; 0x8004e3 <OSPrioHighRdy>
     676:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <OSPrioCur>
     67a:	e8 17       	cp	r30, r24
     67c:	01 f1       	breq	.+64     	; 0x6be <OSIntExit+0xa0>
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	e9 5c       	subi	r30, 0xC9	; 201
     686:	f9 4f       	sbci	r31, 0xF9	; 249
     688:	80 81       	ld	r24, Z
     68a:	91 81       	ldd	r25, Z+1	; 0x01
     68c:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <OSTCBHighRdy+0x1>
     690:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <OSTCBHighRdy>
     694:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <OSCtxSwCtr>
     698:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <OSCtxSwCtr+0x1>
     69c:	a0 91 e9 04 	lds	r26, 0x04E9	; 0x8004e9 <OSCtxSwCtr+0x2>
     6a0:	b0 91 ea 04 	lds	r27, 0x04EA	; 0x8004ea <OSCtxSwCtr+0x3>
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	a1 1d       	adc	r26, r1
     6a8:	b1 1d       	adc	r27, r1
     6aa:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <OSCtxSwCtr>
     6ae:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <OSCtxSwCtr+0x1>
     6b2:	a0 93 e9 04 	sts	0x04E9, r26	; 0x8004e9 <OSCtxSwCtr+0x2>
     6b6:	b0 93 ea 04 	sts	0x04EA, r27	; 0x8004ea <OSCtxSwCtr+0x3>
     6ba:	0e 94 06 02 	call	0x40c	; 0x40c <OSIntCtxSw>
     6be:	78 94       	sei
     6c0:	08 95       	ret

000006c2 <OSSchedLock>:
     6c2:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <OSRunning>
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	49 f4       	brne	.+18     	; 0x6dc <OSSchedLock+0x1a>
     6ca:	f8 94       	cli
     6cc:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <OSLockNesting>
     6d0:	8f 3f       	cpi	r24, 0xFF	; 255
     6d2:	19 f0       	breq	.+6      	; 0x6da <OSSchedLock+0x18>
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
     6d6:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <OSLockNesting>
     6da:	78 94       	sei
     6dc:	08 95       	ret

000006de <OSStart>:
     6de:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <OSRunning>
     6e2:	81 11       	cpse	r24, r1
     6e4:	28 c0       	rjmp	.+80     	; 0x736 <OSStart+0x58>
     6e6:	e0 91 f0 04 	lds	r30, 0x04F0	; 0x8004f0 <OSRdyGrp>
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	e0 50       	subi	r30, 0x00	; 0
     6ee:	ff 4f       	sbci	r31, 0xFF	; 255
     6f0:	e0 81       	ld	r30, Z
     6f2:	ae 2f       	mov	r26, r30
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	af 50       	subi	r26, 0x0F	; 15
     6f8:	bb 4f       	sbci	r27, 0xFB	; 251
     6fa:	ac 91       	ld	r26, X
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	a0 50       	subi	r26, 0x00	; 0
     700:	bf 4f       	sbci	r27, 0xFF	; 255
     702:	ee 0f       	add	r30, r30
     704:	ee 0f       	add	r30, r30
     706:	ee 0f       	add	r30, r30
     708:	8c 91       	ld	r24, X
     70a:	e8 0f       	add	r30, r24
     70c:	e0 93 e3 04 	sts	0x04E3, r30	; 0x8004e3 <OSPrioHighRdy>
     710:	e0 93 e4 04 	sts	0x04E4, r30	; 0x8004e4 <OSPrioCur>
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	e9 5c       	subi	r30, 0xC9	; 201
     71c:	f9 4f       	sbci	r31, 0xF9	; 249
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <OSTCBHighRdy+0x1>
     726:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <OSTCBHighRdy>
     72a:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <OSTCBCur+0x1>
     72e:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <OSTCBCur>
     732:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <OSStartHighRdy>
     736:	08 95       	ret

00000738 <OSTimeTick>:
     738:	0e 94 e6 02 	call	0x5cc	; 0x5cc <OSTimeTickHook>
     73c:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <OSRunning>
     740:	e0 91 e5 04 	lds	r30, 0x04E5	; 0x8004e5 <OSTCBList>
     744:	f0 91 e6 04 	lds	r31, 0x04E6	; 0x8004e6 <OSTCBList+0x1>
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	01 f1       	breq	.+64     	; 0x790 <OSTimeTick+0x58>
     750:	08 95       	ret
     752:	f8 94       	cli
     754:	86 81       	ldd	r24, Z+6	; 0x06
     756:	97 81       	ldd	r25, Z+7	; 0x07
     758:	00 97       	sbiw	r24, 0x00	; 0
     75a:	b1 f0       	breq	.+44     	; 0x788 <OSTimeTick+0x50>
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	97 83       	std	Z+7, r25	; 0x07
     760:	86 83       	std	Z+6, r24	; 0x06
     762:	89 2b       	or	r24, r25
     764:	89 f4       	brne	.+34     	; 0x788 <OSTimeTick+0x50>
     766:	80 85       	ldd	r24, Z+8	; 0x08
     768:	83 fd       	sbrc	r24, 3
     76a:	16 c0       	rjmp	.+44     	; 0x798 <OSTimeTick+0x60>
     76c:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <OSRdyGrp>
     770:	95 85       	ldd	r25, Z+13	; 0x0d
     772:	89 2b       	or	r24, r25
     774:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <OSRdyGrp>
     778:	a3 85       	ldd	r26, Z+11	; 0x0b
     77a:	b0 e0       	ldi	r27, 0x00	; 0
     77c:	af 50       	subi	r26, 0x0F	; 15
     77e:	bb 4f       	sbci	r27, 0xFB	; 251
     780:	8c 91       	ld	r24, X
     782:	94 85       	ldd	r25, Z+12	; 0x0c
     784:	89 2b       	or	r24, r25
     786:	8c 93       	st	X, r24
     788:	02 80       	ldd	r0, Z+2	; 0x02
     78a:	f3 81       	ldd	r31, Z+3	; 0x03
     78c:	e0 2d       	mov	r30, r0
     78e:	78 94       	sei
     790:	81 85       	ldd	r24, Z+9	; 0x09
     792:	80 31       	cpi	r24, 0x10	; 16
     794:	f1 f6       	brne	.-68     	; 0x752 <OSTimeTick+0x1a>
     796:	dc cf       	rjmp	.-72     	; 0x750 <OSTimeTick+0x18>
     798:	37 83       	std	Z+7, r19	; 0x07
     79a:	26 83       	std	Z+6, r18	; 0x06
     79c:	f5 cf       	rjmp	.-22     	; 0x788 <OSTimeTick+0x50>

0000079e <OSVersion>:
     79e:	8c ef       	ldi	r24, 0xFC	; 252
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	08 95       	ret

000007a4 <OS_Dummy>:
     7a4:	08 95       	ret

000007a6 <OS_Sched>:
     7a6:	f8 94       	cli
     7a8:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <OSIntNesting>
     7ac:	81 11       	cpse	r24, r1
     7ae:	3d c0       	rjmp	.+122    	; 0x82a <OS_Sched+0x84>
     7b0:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <OSLockNesting>
     7b4:	81 11       	cpse	r24, r1
     7b6:	39 c0       	rjmp	.+114    	; 0x82a <OS_Sched+0x84>
     7b8:	e0 91 f0 04 	lds	r30, 0x04F0	; 0x8004f0 <OSRdyGrp>
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	e0 50       	subi	r30, 0x00	; 0
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	e0 81       	ld	r30, Z
     7c4:	ae 2f       	mov	r26, r30
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	af 50       	subi	r26, 0x0F	; 15
     7ca:	bb 4f       	sbci	r27, 0xFB	; 251
     7cc:	ac 91       	ld	r26, X
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
     7d0:	a0 50       	subi	r26, 0x00	; 0
     7d2:	bf 4f       	sbci	r27, 0xFF	; 255
     7d4:	ee 0f       	add	r30, r30
     7d6:	ee 0f       	add	r30, r30
     7d8:	ee 0f       	add	r30, r30
     7da:	8c 91       	ld	r24, X
     7dc:	e8 0f       	add	r30, r24
     7de:	e0 93 e3 04 	sts	0x04E3, r30	; 0x8004e3 <OSPrioHighRdy>
     7e2:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <OSPrioCur>
     7e6:	e8 17       	cp	r30, r24
     7e8:	01 f1       	breq	.+64     	; 0x82a <OS_Sched+0x84>
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
     7f0:	e9 5c       	subi	r30, 0xC9	; 201
     7f2:	f9 4f       	sbci	r31, 0xF9	; 249
     7f4:	80 81       	ld	r24, Z
     7f6:	91 81       	ldd	r25, Z+1	; 0x01
     7f8:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <OSTCBHighRdy+0x1>
     7fc:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <OSTCBHighRdy>
     800:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <OSCtxSwCtr>
     804:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <OSCtxSwCtr+0x1>
     808:	a0 91 e9 04 	lds	r26, 0x04E9	; 0x8004e9 <OSCtxSwCtr+0x2>
     80c:	b0 91 ea 04 	lds	r27, 0x04EA	; 0x8004ea <OSCtxSwCtr+0x3>
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	a1 1d       	adc	r26, r1
     814:	b1 1d       	adc	r27, r1
     816:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <OSCtxSwCtr>
     81a:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <OSCtxSwCtr+0x1>
     81e:	a0 93 e9 04 	sts	0x04E9, r26	; 0x8004e9 <OSCtxSwCtr+0x2>
     822:	b0 93 ea 04 	sts	0x04EA, r27	; 0x8004ea <OSCtxSwCtr+0x3>
     826:	0e 94 a9 01 	call	0x352	; 0x352 <OSCtxSw>
     82a:	78 94       	sei
     82c:	08 95       	ret

0000082e <OSSchedUnlock>:
     82e:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <OSRunning>
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	91 f4       	brne	.+36     	; 0x85a <OSSchedUnlock+0x2c>
     836:	f8 94       	cli
     838:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <OSLockNesting>
     83c:	88 23       	and	r24, r24
     83e:	61 f0       	breq	.+24     	; 0x858 <OSSchedUnlock+0x2a>
     840:	81 50       	subi	r24, 0x01	; 1
     842:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <OSLockNesting>
     846:	81 11       	cpse	r24, r1
     848:	07 c0       	rjmp	.+14     	; 0x858 <OSSchedUnlock+0x2a>
     84a:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <OSIntNesting>
     84e:	81 11       	cpse	r24, r1
     850:	03 c0       	rjmp	.+6      	; 0x858 <OSSchedUnlock+0x2a>
     852:	78 94       	sei
     854:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <OS_Sched>
     858:	78 94       	sei
     85a:	08 95       	ret

0000085c <OSTimeDly.part.0>:
     85c:	ac 01       	movw	r20, r24
     85e:	f8 94       	cli
     860:	a0 91 f6 04 	lds	r26, 0x04F6	; 0x8004f6 <OSTCBCur>
     864:	b0 91 f7 04 	lds	r27, 0x04F7	; 0x8004f7 <OSTCBCur+0x1>
     868:	1b 96       	adiw	r26, 0x0b	; 11
     86a:	ec 91       	ld	r30, X
     86c:	1b 97       	sbiw	r26, 0x0b	; 11
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	1c 96       	adiw	r26, 0x0c	; 12
     872:	9c 91       	ld	r25, X
     874:	1c 97       	sbiw	r26, 0x0c	; 12
     876:	90 95       	com	r25
     878:	ef 50       	subi	r30, 0x0F	; 15
     87a:	fb 4f       	sbci	r31, 0xFB	; 251
     87c:	80 81       	ld	r24, Z
     87e:	98 23       	and	r25, r24
     880:	90 83       	st	Z, r25
     882:	91 11       	cpse	r25, r1
     884:	0a c0       	rjmp	.+20     	; 0x89a <OSTimeDly.part.0+0x3e>
     886:	1d 96       	adiw	r26, 0x0d	; 13
     888:	9c 91       	ld	r25, X
     88a:	1d 97       	sbiw	r26, 0x0d	; 13
     88c:	29 2f       	mov	r18, r25
     88e:	20 95       	com	r18
     890:	90 91 f0 04 	lds	r25, 0x04F0	; 0x8004f0 <OSRdyGrp>
     894:	92 23       	and	r25, r18
     896:	90 93 f0 04 	sts	0x04F0, r25	; 0x8004f0 <OSRdyGrp>
     89a:	17 96       	adiw	r26, 0x07	; 7
     89c:	5c 93       	st	X, r21
     89e:	4e 93       	st	-X, r20
     8a0:	16 97       	sbiw	r26, 0x06	; 6
     8a2:	78 94       	sei
     8a4:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <OS_Sched>

000008a8 <OS_TCBInit>:
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	f8 94       	cli
     8b0:	c0 91 eb 04 	lds	r28, 0x04EB	; 0x8004eb <OSTCBFreeList>
     8b4:	d0 91 ec 04 	lds	r29, 0x04EC	; 0x8004ec <OSTCBFreeList+0x1>
     8b8:	20 97       	sbiw	r28, 0x00	; 0
     8ba:	09 f4       	brne	.+2      	; 0x8be <OS_TCBInit+0x16>
     8bc:	54 c0       	rjmp	.+168    	; 0x966 <__stack+0x67>
     8be:	18 2f       	mov	r17, r24
     8c0:	8a 81       	ldd	r24, Y+2	; 0x02
     8c2:	9b 81       	ldd	r25, Y+3	; 0x03
     8c4:	90 93 ec 04 	sts	0x04EC, r25	; 0x8004ec <OSTCBFreeList+0x1>
     8c8:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <OSTCBFreeList>
     8cc:	78 94       	sei
     8ce:	79 83       	std	Y+1, r23	; 0x01
     8d0:	68 83       	st	Y, r22
     8d2:	19 87       	std	Y+9, r17	; 0x09
     8d4:	18 86       	std	Y+8, r1	; 0x08
     8d6:	1f 82       	std	Y+7, r1	; 0x07
     8d8:	1e 82       	std	Y+6, r1	; 0x06
     8da:	1e 86       	std	Y+14, r1	; 0x0e
     8dc:	e1 2f       	mov	r30, r17
     8de:	e6 95       	lsr	r30
     8e0:	e6 95       	lsr	r30
     8e2:	e6 95       	lsr	r30
     8e4:	eb 87       	std	Y+11, r30	; 0x0b
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	e0 50       	subi	r30, 0x00	; 0
     8ea:	fe 4f       	sbci	r31, 0xFE	; 254
     8ec:	80 81       	ld	r24, Z
     8ee:	8d 87       	std	Y+13, r24	; 0x0d
     8f0:	e1 2f       	mov	r30, r17
     8f2:	e7 70       	andi	r30, 0x07	; 7
     8f4:	ea 87       	std	Y+10, r30	; 0x0a
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	e0 50       	subi	r30, 0x00	; 0
     8fa:	fe 4f       	sbci	r31, 0xFE	; 254
     8fc:	80 81       	ld	r24, Z
     8fe:	8c 87       	std	Y+12, r24	; 0x0c
     900:	ce 01       	movw	r24, r28
     902:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <OSTCBInitHook>
     906:	ce 01       	movw	r24, r28
     908:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <OSTaskCreateHook>
     90c:	f8 94       	cli
     90e:	e1 2f       	mov	r30, r17
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	ee 0f       	add	r30, r30
     914:	ff 1f       	adc	r31, r31
     916:	e9 5c       	subi	r30, 0xC9	; 201
     918:	f9 4f       	sbci	r31, 0xF9	; 249
     91a:	d1 83       	std	Z+1, r29	; 0x01
     91c:	c0 83       	st	Z, r28
     91e:	e0 91 e5 04 	lds	r30, 0x04E5	; 0x8004e5 <OSTCBList>
     922:	f0 91 e6 04 	lds	r31, 0x04E6	; 0x8004e6 <OSTCBList+0x1>
     926:	fb 83       	std	Y+3, r31	; 0x03
     928:	ea 83       	std	Y+2, r30	; 0x02
     92a:	1d 82       	std	Y+5, r1	; 0x05
     92c:	1c 82       	std	Y+4, r1	; 0x04
     92e:	30 97       	sbiw	r30, 0x00	; 0
     930:	11 f0       	breq	.+4      	; 0x936 <__stack+0x37>
     932:	d5 83       	std	Z+5, r29	; 0x05
     934:	c4 83       	std	Z+4, r28	; 0x04
     936:	d0 93 e6 04 	sts	0x04E6, r29	; 0x8004e6 <OSTCBList+0x1>
     93a:	c0 93 e5 04 	sts	0x04E5, r28	; 0x8004e5 <OSTCBList>
     93e:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <OSRdyGrp>
     942:	9d 85       	ldd	r25, Y+13	; 0x0d
     944:	89 2b       	or	r24, r25
     946:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <OSRdyGrp>
     94a:	eb 85       	ldd	r30, Y+11	; 0x0b
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	ef 50       	subi	r30, 0x0F	; 15
     950:	fb 4f       	sbci	r31, 0xFB	; 251
     952:	80 81       	ld	r24, Z
     954:	9c 85       	ldd	r25, Y+12	; 0x0c
     956:	89 2b       	or	r24, r25
     958:	80 83       	st	Z, r24
     95a:	78 94       	sei
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	08 95       	ret
     966:	78 94       	sei
     968:	86 e4       	ldi	r24, 0x46	; 70
     96a:	f9 cf       	rjmp	.-14     	; 0x95e <__stack+0x5f>

0000096c <OSTaskCreate>:
     96c:	9f 92       	push	r9
     96e:	af 92       	push	r10
     970:	bf 92       	push	r11
     972:	cf 92       	push	r12
     974:	df 92       	push	r13
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	f8 94       	cli
     984:	c2 2f       	mov	r28, r18
     986:	d0 e0       	ldi	r29, 0x00	; 0
     988:	cc 0f       	add	r28, r28
     98a:	dd 1f       	adc	r29, r29
     98c:	c9 5c       	subi	r28, 0xC9	; 201
     98e:	d9 4f       	sbci	r29, 0xF9	; 249
     990:	e8 81       	ld	r30, Y
     992:	f9 81       	ldd	r31, Y+1	; 0x01
     994:	ef 2b       	or	r30, r31
     996:	09 f0       	breq	.+2      	; 0x99a <OSTaskCreate+0x2e>
     998:	3b c0       	rjmp	.+118    	; 0xa10 <OSTaskCreate+0xa4>
     99a:	92 2e       	mov	r9, r18
     99c:	21 e0       	ldi	r18, 0x01	; 1
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	39 83       	std	Y+1, r19	; 0x01
     9a2:	28 83       	st	Y, r18
     9a4:	78 94       	sei
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	0e 94 98 02 	call	0x530	; 0x530 <OSTaskStkInit>
     9ae:	b1 2c       	mov	r11, r1
     9b0:	a1 2c       	mov	r10, r1
     9b2:	d1 2c       	mov	r13, r1
     9b4:	c1 2c       	mov	r12, r1
     9b6:	e1 2c       	mov	r14, r1
     9b8:	f1 2c       	mov	r15, r1
     9ba:	87 01       	movw	r16, r14
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	bc 01       	movw	r22, r24
     9c6:	89 2d       	mov	r24, r9
     9c8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <OS_TCBInit>
     9cc:	18 2f       	mov	r17, r24
     9ce:	81 11       	cpse	r24, r1
     9d0:	1a c0       	rjmp	.+52     	; 0xa06 <OSTaskCreate+0x9a>
     9d2:	f8 94       	cli
     9d4:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <OSTaskCtr>
     9d8:	8f 5f       	subi	r24, 0xFF	; 255
     9da:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <OSTaskCtr>
     9de:	78 94       	sei
     9e0:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <OSRunning>
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	11 f4       	brne	.+4      	; 0x9ec <OSTaskCreate+0x80>
     9e8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <OS_Sched>
     9ec:	81 2f       	mov	r24, r17
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	af 90       	pop	r10
     a02:	9f 90       	pop	r9
     a04:	08 95       	ret
     a06:	f8 94       	cli
     a08:	19 82       	std	Y+1, r1	; 0x01
     a0a:	18 82       	st	Y, r1
     a0c:	78 94       	sei
     a0e:	ee cf       	rjmp	.-36     	; 0x9ec <OSTaskCreate+0x80>
     a10:	78 94       	sei
     a12:	18 e2       	ldi	r17, 0x28	; 40
     a14:	eb cf       	rjmp	.-42     	; 0x9ec <OSTaskCreate+0x80>

00000a16 <OSInit>:
     a16:	0e 94 e7 02 	call	0x5ce	; 0x5ce <OSInitHookBegin>
     a1a:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <OSIntNesting>
     a1e:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <OSLockNesting>
     a22:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <OSTaskCtr>
     a26:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <OSRunning>
     a2a:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <OSCtxSwCtr>
     a2e:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <OSCtxSwCtr+0x1>
     a32:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <OSCtxSwCtr+0x2>
     a36:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <OSCtxSwCtr+0x3>
     a3a:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <OSIdleCtr>
     a3e:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <OSIdleCtr+0x1>
     a42:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <OSIdleCtr+0x2>
     a46:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <OSIdleCtr+0x3>
     a4a:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <OSRdyGrp>
     a4e:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <OSRdyTbl>
     a52:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <OSRdyTbl+0x1>
     a56:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <OSRdyTbl+0x2>
     a5a:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <OSPrioCur>
     a5e:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <OSPrioHighRdy>
     a62:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <OSTCBHighRdy+0x1>
     a66:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <OSTCBHighRdy>
     a6a:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <OSTCBCur+0x1>
     a6e:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <OSTCBCur>
     a72:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <OSTCBList+0x1>
     a76:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <OSTCBList>
     a7a:	e7 e3       	ldi	r30, 0x37	; 55
     a7c:	f6 e0       	ldi	r31, 0x06	; 6
     a7e:	11 92       	st	Z+, r1
     a80:	11 92       	st	Z+, r1
     a82:	86 e0       	ldi	r24, 0x06	; 6
     a84:	e9 35       	cpi	r30, 0x59	; 89
     a86:	f8 07       	cpc	r31, r24
     a88:	d1 f7       	brne	.-12     	; 0xa7e <OSInit+0x68>
     a8a:	e8 e3       	ldi	r30, 0x38	; 56
     a8c:	f5 e0       	ldi	r31, 0x05	; 5
     a8e:	cf 01       	movw	r24, r30
     a90:	0f 96       	adiw	r24, 0x0f	; 15
     a92:	93 83       	std	Z+3, r25	; 0x03
     a94:	82 83       	std	Z+2, r24	; 0x02
     a96:	fc 01       	movw	r30, r24
     a98:	86 e0       	ldi	r24, 0x06	; 6
     a9a:	e8 32       	cpi	r30, 0x28	; 40
     a9c:	f8 07       	cpc	r31, r24
     a9e:	b9 f7       	brne	.-18     	; 0xa8e <OSInit+0x78>
     aa0:	10 92 2b 06 	sts	0x062B, r1	; 0x80062b <OSTCBTbl+0xf3>
     aa4:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <OSTCBTbl+0xf2>
     aa8:	88 e3       	ldi	r24, 0x38	; 56
     aaa:	95 e0       	ldi	r25, 0x05	; 5
     aac:	90 93 ec 04 	sts	0x04EC, r25	; 0x8004ec <OSTCBFreeList+0x1>
     ab0:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <OSTCBFreeList>
     ab4:	20 e1       	ldi	r18, 0x10	; 16
     ab6:	47 e3       	ldi	r20, 0x37	; 55
     ab8:	55 e0       	ldi	r21, 0x05	; 5
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	8b ee       	ldi	r24, 0xEB	; 235
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	0e 94 b6 04 	call	0x96c	; 0x96c <OSTaskCreate>
     ac6:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <OSInitHookEnd>

00000aca <OSTaskDel>:
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	f0 90 f5 04 	lds	r15, 0x04F5	; 0x8004f5 <OSIntNesting>
     ad8:	f1 10       	cpse	r15, r1
     ada:	76 c0       	rjmp	.+236    	; 0xbc8 <OSTaskDel+0xfe>
     adc:	f8 94       	cli
     ade:	8f 3f       	cpi	r24, 0xFF	; 255
     ae0:	29 f4       	brne	.+10     	; 0xaec <OSTaskDel+0x22>
     ae2:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <OSTCBCur>
     ae6:	f0 91 f7 04 	lds	r31, 0x04F7	; 0x8004f7 <OSTCBCur+0x1>
     aea:	81 85       	ldd	r24, Z+9	; 0x09
     aec:	08 2f       	mov	r16, r24
     aee:	10 e0       	ldi	r17, 0x00	; 0
     af0:	00 0f       	add	r16, r16
     af2:	11 1f       	adc	r17, r17
     af4:	f8 01       	movw	r30, r16
     af6:	e9 5c       	subi	r30, 0xC9	; 201
     af8:	f9 4f       	sbci	r31, 0xF9	; 249
     afa:	c0 81       	ld	r28, Z
     afc:	d1 81       	ldd	r29, Z+1	; 0x01
     afe:	20 97       	sbiw	r28, 0x00	; 0
     b00:	09 f4       	brne	.+2      	; 0xb04 <OSTaskDel+0x3a>
     b02:	5e c0       	rjmp	.+188    	; 0xbc0 <OSTaskDel+0xf6>
     b04:	eb 85       	ldd	r30, Y+11	; 0x0b
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	8c 85       	ldd	r24, Y+12	; 0x0c
     b0a:	80 95       	com	r24
     b0c:	ef 50       	subi	r30, 0x0F	; 15
     b0e:	fb 4f       	sbci	r31, 0xFB	; 251
     b10:	90 81       	ld	r25, Z
     b12:	89 23       	and	r24, r25
     b14:	80 83       	st	Z, r24
     b16:	81 11       	cpse	r24, r1
     b18:	08 c0       	rjmp	.+16     	; 0xb2a <OSTaskDel+0x60>
     b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b1c:	98 2f       	mov	r25, r24
     b1e:	90 95       	com	r25
     b20:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <OSRdyGrp>
     b24:	89 23       	and	r24, r25
     b26:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <OSRdyGrp>
     b2a:	1f 82       	std	Y+7, r1	; 0x07
     b2c:	1e 82       	std	Y+6, r1	; 0x06
     b2e:	18 86       	std	Y+8, r1	; 0x08
     b30:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <OSLockNesting>
     b34:	8f 3f       	cpi	r24, 0xFF	; 255
     b36:	19 f0       	breq	.+6      	; 0xb3e <OSTaskDel+0x74>
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <OSLockNesting>
     b3e:	78 94       	sei
     b40:	f8 94       	cli
     b42:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <OSLockNesting>
     b46:	88 23       	and	r24, r24
     b48:	19 f0       	breq	.+6      	; 0xb50 <OSTaskDel+0x86>
     b4a:	81 50       	subi	r24, 0x01	; 1
     b4c:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <OSLockNesting>
     b50:	ce 01       	movw	r24, r28
     b52:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <OSTaskDelHook>
     b56:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <OSTaskCtr>
     b5a:	81 50       	subi	r24, 0x01	; 1
     b5c:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <OSTaskCtr>
     b60:	f8 01       	movw	r30, r16
     b62:	e9 5c       	subi	r30, 0xC9	; 201
     b64:	f9 4f       	sbci	r31, 0xF9	; 249
     b66:	11 82       	std	Z+1, r1	; 0x01
     b68:	10 82       	st	Z, r1
     b6a:	ec 81       	ldd	r30, Y+4	; 0x04
     b6c:	fd 81       	ldd	r31, Y+5	; 0x05
     b6e:	aa 81       	ldd	r26, Y+2	; 0x02
     b70:	bb 81       	ldd	r27, Y+3	; 0x03
     b72:	30 97       	sbiw	r30, 0x00	; 0
     b74:	e1 f4       	brne	.+56     	; 0xbae <OSTaskDel+0xe4>
     b76:	15 96       	adiw	r26, 0x05	; 5
     b78:	1c 92       	st	X, r1
     b7a:	1e 92       	st	-X, r1
     b7c:	14 97       	sbiw	r26, 0x04	; 4
     b7e:	b0 93 e6 04 	sts	0x04E6, r27	; 0x8004e6 <OSTCBList+0x1>
     b82:	a0 93 e5 04 	sts	0x04E5, r26	; 0x8004e5 <OSTCBList>
     b86:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <OSTCBFreeList>
     b8a:	90 91 ec 04 	lds	r25, 0x04EC	; 0x8004ec <OSTCBFreeList+0x1>
     b8e:	9b 83       	std	Y+3, r25	; 0x03
     b90:	8a 83       	std	Y+2, r24	; 0x02
     b92:	d0 93 ec 04 	sts	0x04EC, r29	; 0x8004ec <OSTCBFreeList+0x1>
     b96:	c0 93 eb 04 	sts	0x04EB, r28	; 0x8004eb <OSTCBFreeList>
     b9a:	78 94       	sei
     b9c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <OS_Sched>
     ba0:	8f 2d       	mov	r24, r15
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	08 95       	ret
     bae:	b3 83       	std	Z+3, r27	; 0x03
     bb0:	a2 83       	std	Z+2, r26	; 0x02
     bb2:	aa 81       	ldd	r26, Y+2	; 0x02
     bb4:	bb 81       	ldd	r27, Y+3	; 0x03
     bb6:	15 96       	adiw	r26, 0x05	; 5
     bb8:	fc 93       	st	X, r31
     bba:	ee 93       	st	-X, r30
     bbc:	14 97       	sbiw	r26, 0x04	; 4
     bbe:	e3 cf       	rjmp	.-58     	; 0xb86 <OSTaskDel+0xbc>
     bc0:	78 94       	sei
     bc2:	9c e3       	ldi	r25, 0x3C	; 60
     bc4:	f9 2e       	mov	r15, r25
     bc6:	ec cf       	rjmp	.-40     	; 0xba0 <OSTaskDel+0xd6>
     bc8:	8f e3       	ldi	r24, 0x3F	; 63
     bca:	f8 2e       	mov	r15, r24
     bcc:	e9 cf       	rjmp	.-46     	; 0xba0 <OSTaskDel+0xd6>

00000bce <OSTaskDelReq>:
     bce:	8f 3f       	cpi	r24, 0xFF	; 255
     bd0:	41 f4       	brne	.+16     	; 0xbe2 <OSTaskDelReq+0x14>
     bd2:	f8 94       	cli
     bd4:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <OSTCBCur>
     bd8:	f0 91 f7 04 	lds	r31, 0x04F7	; 0x8004f7 <OSTCBCur+0x1>
     bdc:	86 85       	ldd	r24, Z+14	; 0x0e
     bde:	78 94       	sei
     be0:	08 95       	ret
     be2:	f8 94       	cli
     be4:	e8 2f       	mov	r30, r24
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	e9 5c       	subi	r30, 0xC9	; 201
     bee:	f9 4f       	sbci	r31, 0xF9	; 249
     bf0:	01 90       	ld	r0, Z+
     bf2:	f0 81       	ld	r31, Z
     bf4:	e0 2d       	mov	r30, r0
     bf6:	8b e0       	ldi	r24, 0x0B	; 11
     bf8:	30 97       	sbiw	r30, 0x00	; 0
     bfa:	89 f3       	breq	.-30     	; 0xbde <OSTaskDelReq+0x10>
     bfc:	8e e3       	ldi	r24, 0x3E	; 62
     bfe:	86 87       	std	Z+14, r24	; 0x0e
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	ed cf       	rjmp	.-38     	; 0xbde <OSTaskDelReq+0x10>

00000c04 <OSTimeDly>:
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	11 f0       	breq	.+4      	; 0xc0c <OSTimeDly+0x8>
     c08:	0c 94 2e 04 	jmp	0x85c	; 0x85c <OSTimeDly.part.0>
     c0c:	08 95       	ret

00000c0e <OSTimeDlyHMSM>:
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	81 11       	cpse	r24, r1
     c18:	0d c0       	rjmp	.+26     	; 0xc34 <OSTimeDlyHMSM+0x26>
     c1a:	61 11       	cpse	r22, r1
     c1c:	0b c0       	rjmp	.+22     	; 0xc34 <OSTimeDlyHMSM+0x26>
     c1e:	41 11       	cpse	r20, r1
     c20:	0c c0       	rjmp	.+24     	; 0xc3a <OSTimeDlyHMSM+0x2c>
     c22:	21 15       	cp	r18, r1
     c24:	31 05       	cpc	r19, r1
     c26:	61 f4       	brne	.+24     	; 0xc40 <OSTimeDlyHMSM+0x32>
     c28:	84 e5       	ldi	r24, 0x54	; 84
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	df 90       	pop	r13
     c30:	cf 90       	pop	r12
     c32:	08 95       	ret
     c34:	6c 33       	cpi	r22, 0x3C	; 60
     c36:	08 f0       	brcs	.+2      	; 0xc3a <OSTimeDlyHMSM+0x2c>
     c38:	4f c0       	rjmp	.+158    	; 0xcd8 <OSTimeDlyHMSM+0xca>
     c3a:	4c 33       	cpi	r20, 0x3C	; 60
     c3c:	08 f0       	brcs	.+2      	; 0xc40 <OSTimeDlyHMSM+0x32>
     c3e:	4e c0       	rjmp	.+156    	; 0xcdc <OSTimeDlyHMSM+0xce>
     c40:	28 3e       	cpi	r18, 0xE8	; 232
     c42:	93 e0       	ldi	r25, 0x03	; 3
     c44:	39 07       	cpc	r19, r25
     c46:	08 f0       	brcs	.+2      	; 0xc4a <OSTimeDlyHMSM+0x3c>
     c48:	4b c0       	rjmp	.+150    	; 0xce0 <OSTimeDlyHMSM+0xd2>
     c4a:	f9 01       	movw	r30, r18
     c4c:	58 2f       	mov	r21, r24
     c4e:	26 2f       	mov	r18, r22
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	ac e3       	ldi	r26, 0x3C	; 60
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__umulhisi3>
     c5a:	6b 01       	movw	r12, r22
     c5c:	7c 01       	movw	r14, r24
     c5e:	c4 0e       	add	r12, r20
     c60:	d1 1c       	adc	r13, r1
     c62:	e1 1c       	adc	r14, r1
     c64:	f1 1c       	adc	r15, r1
     c66:	25 2f       	mov	r18, r21
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	a0 e1       	ldi	r26, 0x10	; 16
     c6c:	be e0       	ldi	r27, 0x0E	; 14
     c6e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__umulhisi3>
     c72:	a7 01       	movw	r20, r14
     c74:	96 01       	movw	r18, r12
     c76:	26 0f       	add	r18, r22
     c78:	37 1f       	adc	r19, r23
     c7a:	48 1f       	adc	r20, r24
     c7c:	59 1f       	adc	r21, r25
     c7e:	a4 e6       	ldi	r26, 0x64	; 100
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__muluhisi3>
     c86:	6b 01       	movw	r12, r22
     c88:	7c 01       	movw	r14, r24
     c8a:	9f 01       	movw	r18, r30
     c8c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__umulhisi3>
     c90:	6c 50       	subi	r22, 0x0C	; 12
     c92:	7e 4f       	sbci	r23, 0xFE	; 254
     c94:	8f 4f       	sbci	r24, 0xFF	; 255
     c96:	9f 4f       	sbci	r25, 0xFF	; 255
     c98:	28 ee       	ldi	r18, 0xE8	; 232
     c9a:	33 e0       	ldi	r19, 0x03	; 3
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	0e 94 2f 09 	call	0x125e	; 0x125e <__udivmodsi4>
     ca4:	d7 01       	movw	r26, r14
     ca6:	c6 01       	movw	r24, r12
     ca8:	82 0f       	add	r24, r18
     caa:	93 1f       	adc	r25, r19
     cac:	a4 1f       	adc	r26, r20
     cae:	b5 1f       	adc	r27, r21
     cb0:	7d 01       	movw	r14, r26
     cb2:	0e 94 02 06 	call	0xc04	; 0xc04 <OSTimeDly>
     cb6:	e1 14       	cp	r14, r1
     cb8:	f1 04       	cpc	r15, r1
     cba:	11 f4       	brne	.+4      	; 0xcc0 <OSTimeDlyHMSM+0xb2>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	b5 cf       	rjmp	.-150    	; 0xc2a <OSTimeDlyHMSM+0x1c>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e8       	ldi	r25, 0x80	; 128
     cc4:	0e 94 2e 04 	call	0x85c	; 0x85c <OSTimeDly.part.0>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e8       	ldi	r25, 0x80	; 128
     ccc:	0e 94 2e 04 	call	0x85c	; 0x85c <OSTimeDly.part.0>
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	e8 1a       	sub	r14, r24
     cd4:	f1 08       	sbc	r15, r1
     cd6:	ef cf       	rjmp	.-34     	; 0xcb6 <OSTimeDlyHMSM+0xa8>
     cd8:	81 e5       	ldi	r24, 0x51	; 81
     cda:	a7 cf       	rjmp	.-178    	; 0xc2a <OSTimeDlyHMSM+0x1c>
     cdc:	82 e5       	ldi	r24, 0x52	; 82
     cde:	a5 cf       	rjmp	.-182    	; 0xc2a <OSTimeDlyHMSM+0x1c>
     ce0:	83 e5       	ldi	r24, 0x53	; 83
     ce2:	a3 cf       	rjmp	.-186    	; 0xc2a <OSTimeDlyHMSM+0x1c>

00000ce4 <ADC_init>:
     ce4:	80 e4       	ldi	r24, 0x40	; 64
     ce6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     cea:	86 e8       	ldi	r24, 0x86	; 134
     cec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     cf0:	08 95       	ret

00000cf2 <ADC_read>:
     cf2:	f8 94       	cli
     cf4:	80 64       	ori	r24, 0x40	; 64
     cf6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     cfa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     cfe:	80 64       	ori	r24, 0x40	; 64
     d00:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d04:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d08:	84 ff       	sbrs	r24, 4
     d0a:	fc cf       	rjmp	.-8      	; 0xd04 <ADC_read+0x12>
     d0c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d10:	80 61       	ori	r24, 0x10	; 16
     d12:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d16:	78 94       	sei
     d18:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     d1c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     d20:	93 70       	andi	r25, 0x03	; 3
     d22:	08 95       	ret

00000d24 <PWM8_write>:
     d24:	81 11       	cpse	r24, r1
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <PWM8_write+0xe>
     d28:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     d2c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     d30:	08 95       	ret
     d32:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     d36:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     d3a:	08 95       	ret

00000d3c <motor_init>:
     d3c:	8a b1       	in	r24, 0x0a	; 10
     d3e:	80 6f       	ori	r24, 0xF0	; 240
     d40:	8a b9       	out	0x0a, r24	; 10
     d42:	8b b1       	in	r24, 0x0b	; 11
     d44:	8f 70       	andi	r24, 0x0F	; 15
     d46:	8b b9       	out	0x0b, r24	; 11
     d48:	81 ea       	ldi	r24, 0xA1	; 161
     d4a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     d54:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d58:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d5c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     d60:	a8 e8       	ldi	r26, 0x88	; 136
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	1c 92       	st	X, r1
     d66:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     d6a:	ea e8       	ldi	r30, 0x8A	; 138
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	10 82       	st	Z, r1
     d70:	84 b1       	in	r24, 0x04	; 4
     d72:	86 60       	ori	r24, 0x06	; 6
     d74:	84 b9       	out	0x04, r24	; 4
     d76:	11 96       	adiw	r26, 0x01	; 1
     d78:	1c 92       	st	X, r1
     d7a:	1e 92       	st	-X, r1
     d7c:	11 82       	std	Z+1, r1	; 0x01
     d7e:	10 82       	st	Z, r1
     d80:	08 95       	ret

00000d82 <motor_set_speed>:
     d82:	77 ff       	sbrs	r23, 7
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <motor_set_speed+0x8>
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	65 36       	cpi	r22, 0x65	; 101
     d8c:	71 05       	cpc	r23, r1
     d8e:	14 f0       	brlt	.+4      	; 0xd94 <motor_set_speed+0x12>
     d90:	64 e6       	ldi	r22, 0x64	; 100
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	9b 01       	movw	r18, r22
     d96:	22 0f       	add	r18, r18
     d98:	33 1f       	adc	r19, r19
     d9a:	75 95       	asr	r23
     d9c:	67 95       	ror	r22
     d9e:	62 0f       	add	r22, r18
     da0:	73 1f       	adc	r23, r19
     da2:	81 11       	cpse	r24, r1
     da4:	09 c0       	rjmp	.+18     	; 0xdb8 <motor_set_speed+0x36>
     da6:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     daa:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     dae:	70 93 5a 06 	sts	0x065A, r23	; 0x80065a <rightWst+0x1>
     db2:	60 93 59 06 	sts	0x0659, r22	; 0x800659 <rightWst>
     db6:	08 95       	ret
     db8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     dbc:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     dc0:	70 93 5e 06 	sts	0x065E, r23	; 0x80065e <leftWst+0x1>
     dc4:	60 93 5d 06 	sts	0x065D, r22	; 0x80065d <leftWst>
     dc8:	08 95       	ret

00000dca <motor_set_dir>:
     dca:	cf 93       	push	r28
     dcc:	c6 2f       	mov	r28, r22
     dce:	26 2f       	mov	r18, r22
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	81 11       	cpse	r24, r1
     dd4:	2b c0       	rjmp	.+86     	; 0xe2c <motor_set_dir+0x62>
     dd6:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <rightWst+0x2>
     dda:	90 91 5c 06 	lds	r25, 0x065C	; 0x80065c <rightWst+0x3>
     dde:	82 17       	cp	r24, r18
     de0:	93 07       	cpc	r25, r19
     de2:	59 f0       	breq	.+22     	; 0xdfa <motor_set_dir+0x30>
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	0e 94 c1 06 	call	0xd82	; 0xd82 <motor_set_speed>
     dee:	8f e9       	ldi	r24, 0x9F	; 159
     df0:	9f e0       	ldi	r25, 0x0F	; 15
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <motor_set_dir+0x28>
     df6:	00 c0       	rjmp	.+0      	; 0xdf8 <motor_set_dir+0x2e>
     df8:	00 00       	nop
     dfa:	c1 11       	cpse	r28, r1
     dfc:	0e c0       	rjmp	.+28     	; 0xe1a <motor_set_dir+0x50>
     dfe:	5e 98       	cbi	0x0b, 6	; 11
     e00:	5f 9a       	sbi	0x0b, 7	; 11
     e02:	10 92 5c 06 	sts	0x065C, r1	; 0x80065c <rightWst+0x3>
     e06:	10 92 5b 06 	sts	0x065B, r1	; 0x80065b <rightWst+0x2>
     e0a:	8f e3       	ldi	r24, 0x3F	; 63
     e0c:	9c e9       	ldi	r25, 0x9C	; 156
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	f1 f7       	brne	.-4      	; 0xe0e <motor_set_dir+0x44>
     e12:	00 c0       	rjmp	.+0      	; 0xe14 <motor_set_dir+0x4a>
     e14:	00 00       	nop
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret
     e1a:	5e 9a       	sbi	0x0b, 6	; 11
     e1c:	5f 98       	cbi	0x0b, 7	; 11
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	90 93 5c 06 	sts	0x065C, r25	; 0x80065c <rightWst+0x3>
     e26:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <rightWst+0x2>
     e2a:	ef cf       	rjmp	.-34     	; 0xe0a <motor_set_dir+0x40>
     e2c:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <leftWst+0x2>
     e30:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <leftWst+0x3>
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	59 f0       	breq	.+22     	; 0xe50 <motor_set_dir+0x86>
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	0e 94 c1 06 	call	0xd82	; 0xd82 <motor_set_speed>
     e44:	8f e9       	ldi	r24, 0x9F	; 159
     e46:	9f e0       	ldi	r25, 0x0F	; 15
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <motor_set_dir+0x7e>
     e4c:	00 c0       	rjmp	.+0      	; 0xe4e <motor_set_dir+0x84>
     e4e:	00 00       	nop
     e50:	c1 11       	cpse	r28, r1
     e52:	07 c0       	rjmp	.+14     	; 0xe62 <motor_set_dir+0x98>
     e54:	5c 9a       	sbi	0x0b, 4	; 11
     e56:	5d 98       	cbi	0x0b, 5	; 11
     e58:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <leftWst+0x3>
     e5c:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <leftWst+0x2>
     e60:	d4 cf       	rjmp	.-88     	; 0xe0a <motor_set_dir+0x40>
     e62:	5c 98       	cbi	0x0b, 4	; 11
     e64:	5d 9a       	sbi	0x0b, 5	; 11
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <leftWst+0x3>
     e6e:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <leftWst+0x2>
     e72:	cb cf       	rjmp	.-106    	; 0xe0a <motor_set_dir+0x40>

00000e74 <robo_motorSpeed>:
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	ec 01       	movw	r28, r24
     e7e:	8b 01       	movw	r16, r22
     e80:	97 ff       	sbrs	r25, 7
     e82:	1c c0       	rjmp	.+56     	; 0xebc <robo_motorSpeed+0x48>
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 e5 06 	call	0xdca	; 0xdca <motor_set_dir>
     e8c:	d1 95       	neg	r29
     e8e:	c1 95       	neg	r28
     e90:	d1 09       	sbc	r29, r1
     e92:	17 ff       	sbrs	r17, 7
     e94:	18 c0       	rjmp	.+48     	; 0xec6 <robo_motorSpeed+0x52>
     e96:	61 e0       	ldi	r22, 0x01	; 1
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	0e 94 e5 06 	call	0xdca	; 0xdca <motor_set_dir>
     e9e:	11 95       	neg	r17
     ea0:	01 95       	neg	r16
     ea2:	11 09       	sbc	r17, r1
     ea4:	b8 01       	movw	r22, r16
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	0e 94 c1 06 	call	0xd82	; 0xd82 <motor_set_speed>
     eac:	be 01       	movw	r22, r28
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <motor_set_speed>
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	0e 94 e5 06 	call	0xdca	; 0xdca <motor_set_dir>
     ec4:	e6 cf       	rjmp	.-52     	; 0xe92 <robo_motorSpeed+0x1e>
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	0e 94 e5 06 	call	0xdca	; 0xdca <motor_set_dir>
     ece:	ea cf       	rjmp	.-44     	; 0xea4 <robo_motorSpeed+0x30>

00000ed0 <USART0_init>:
     ed0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     ed4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     ed8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     edc:	88 e1       	ldi	r24, 0x18	; 24
     ede:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     ee2:	86 e0       	ldi	r24, 0x06	; 6
     ee4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     ee8:	08 95       	ret

00000eea <cputchar>:
     eea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     eee:	95 ff       	sbrs	r25, 5
     ef0:	fc cf       	rjmp	.-8      	; 0xeea <cputchar>
     ef2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     ef6:	08 95       	ret

00000ef8 <cgetchar>:
     ef8:	cf 93       	push	r28
     efa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     efe:	87 ff       	sbrs	r24, 7
     f00:	fc cf       	rjmp	.-8      	; 0xefa <cgetchar+0x2>
     f02:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     f06:	8c 2f       	mov	r24, r28
     f08:	0e 94 75 07 	call	0xeea	; 0xeea <cputchar>
     f0c:	8c 2f       	mov	r24, r28
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <cputs>:
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	ec 01       	movw	r28, r24
     f18:	89 91       	ld	r24, Y+
     f1a:	81 11       	cpse	r24, r1
     f1c:	03 c0       	rjmp	.+6      	; 0xf24 <cputs+0x12>
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret
     f24:	0e 94 75 07 	call	0xeea	; 0xeea <cputchar>
     f28:	f7 cf       	rjmp	.-18     	; 0xf18 <cputs+0x6>

00000f2a <robo_proxSensor>:
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <ADC_read>
     f30:	21 e0       	ldi	r18, 0x01	; 1
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	84 36       	cpi	r24, 0x64	; 100
     f36:	91 05       	cpc	r25, r1
     f38:	10 f0       	brcs	.+4      	; 0xf3e <robo_proxSensor+0x14>
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	c9 01       	movw	r24, r18
     f40:	08 95       	ret

00000f42 <robo_lightSensor>:
     f42:	84 e0       	ldi	r24, 0x04	; 4
     f44:	0e 94 79 06 	call	0xcf2	; 0xcf2 <ADC_read>
     f48:	2b ef       	ldi	r18, 0xFB	; 251
     f4a:	ac 01       	movw	r20, r24
     f4c:	24 03       	mulsu	r18, r20
     f4e:	c0 01       	movw	r24, r0
     f50:	25 9f       	mul	r18, r21
     f52:	90 0d       	add	r25, r0
     f54:	11 24       	eor	r1, r1
     f56:	85 50       	subi	r24, 0x05	; 5
     f58:	9c 4e       	sbci	r25, 0xEC	; 236
     f5a:	63 e3       	ldi	r22, 0x33	; 51
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	0e 94 1b 09 	call	0x1236	; 0x1236 <__divmodhi4>
     f62:	cb 01       	movw	r24, r22
     f64:	65 36       	cpi	r22, 0x65	; 101
     f66:	71 05       	cpc	r23, r1
     f68:	14 f0       	brlt	.+4      	; 0xf6e <robo_lightSensor+0x2c>
     f6a:	84 e6       	ldi	r24, 0x64	; 100
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	08 95       	ret

00000f70 <robo_lineSensor>:
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	c0 e0       	ldi	r28, 0x00	; 0
     f76:	d1 e0       	ldi	r29, 0x01	; 1
     f78:	cc 0f       	add	r28, r28
     f7a:	8d 2f       	mov	r24, r29
     f7c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <ADC_read>
     f80:	8c 32       	cpi	r24, 0x2C	; 44
     f82:	91 40       	sbci	r25, 0x01	; 1
     f84:	0c f4       	brge	.+2      	; 0xf88 <robo_lineSensor+0x18>
     f86:	c1 60       	ori	r28, 0x01	; 1
     f88:	df 5f       	subi	r29, 0xFF	; 255
     f8a:	d4 30       	cpi	r29, 0x04	; 4
     f8c:	a9 f7       	brne	.-22     	; 0xf78 <robo_lineSensor+0x8>
     f8e:	8c 2f       	mov	r24, r28
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <robo_bumpSensorR>:
     f98:	83 b1       	in	r24, 0x03	; 3
     f9a:	82 95       	swap	r24
     f9c:	8f 70       	andi	r24, 0x0F	; 15
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	89 27       	eor	r24, r25
     fa2:	81 70       	andi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	08 95       	ret

00000fa8 <robo_bumpSensorL>:
     fa8:	83 b1       	in	r24, 0x03	; 3
     faa:	86 95       	lsr	r24
     fac:	86 95       	lsr	r24
     fae:	86 95       	lsr	r24
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	89 27       	eor	r24, r25
     fb4:	81 70       	andi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	08 95       	ret

00000fba <robo_Honk>:
     fba:	5b 9a       	sbi	0x0b, 3	; 11
     fbc:	2f ef       	ldi	r18, 0xFF	; 255
     fbe:	85 ea       	ldi	r24, 0xA5	; 165
     fc0:	9e e0       	ldi	r25, 0x0E	; 14
     fc2:	21 50       	subi	r18, 0x01	; 1
     fc4:	80 40       	sbci	r24, 0x00	; 0
     fc6:	90 40       	sbci	r25, 0x00	; 0
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <robo_Honk+0x8>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <robo_Honk+0x12>
     fcc:	00 00       	nop
     fce:	5b 98       	cbi	0x0b, 3	; 11
     fd0:	2f ef       	ldi	r18, 0xFF	; 255
     fd2:	85 ea       	ldi	r24, 0xA5	; 165
     fd4:	9e e0       	ldi	r25, 0x0E	; 14
     fd6:	21 50       	subi	r18, 0x01	; 1
     fd8:	80 40       	sbci	r24, 0x00	; 0
     fda:	90 40       	sbci	r25, 0x00	; 0
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <robo_Honk+0x1c>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <robo_Honk+0x26>
     fe0:	00 00       	nop
     fe2:	08 95       	ret

00000fe4 <robo_checkBattery>:
     fe4:	85 e0       	ldi	r24, 0x05	; 5
     fe6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <ADC_read>
     fea:	84 3f       	cpi	r24, 0xF4	; 244
     fec:	91 40       	sbci	r25, 0x01	; 1
     fee:	10 f4       	brcc	.+4      	; 0xff4 <robo_checkBattery+0x10>
     ff0:	28 9a       	sbi	0x05, 0	; 5
     ff2:	08 95       	ret
     ff4:	28 98       	cbi	0x05, 0	; 5
     ff6:	08 95       	ret

00000ff8 <robo_goPressed>:
     ff8:	89 b1       	in	r24, 0x09	; 9
     ffa:	82 fb       	bst	r24, 2
     ffc:	88 27       	eor	r24, r24
     ffe:	80 f9       	bld	r24, 0
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	89 27       	eor	r24, r25
    1004:	08 95       	ret

00001006 <robo_wait4goPress>:
    1006:	0e 94 fc 07 	call	0xff8	; 0xff8 <robo_goPressed>
    100a:	88 23       	and	r24, r24
    100c:	e1 f3       	breq	.-8      	; 0x1006 <robo_wait4goPress>
    100e:	08 95       	ret

00001010 <OS_ticks_init>:
    1010:	f8 94       	cli
    1012:	85 e0       	ldi	r24, 0x05	; 5
    1014:	85 bd       	out	0x25, r24	; 37
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    101c:	84 e6       	ldi	r24, 0x64	; 100
    101e:	86 bd       	out	0x26, r24	; 38
    1020:	78 94       	sei
    1022:	08 95       	ret

00001024 <HAL_init>:
    1024:	87 e6       	ldi	r24, 0x67	; 103
    1026:	0e 94 68 07 	call	0xed0	; 0xed0 <USART0_init>
    102a:	0c 94 72 06 	jmp	0xce4	; 0xce4 <ADC_init>

0000102e <robo_Setup>:
    102e:	0e 94 12 08 	call	0x1024	; 0x1024 <HAL_init>
    1032:	0e 94 9e 06 	call	0xd3c	; 0xd3c <motor_init>
    1036:	53 9a       	sbi	0x0a, 3	; 10
    1038:	5b 98       	cbi	0x0b, 3	; 11
    103a:	20 9a       	sbi	0x04, 0	; 4
    103c:	52 98       	cbi	0x0a, 2	; 10
    103e:	5a 9a       	sbi	0x0b, 2	; 11
    1040:	24 98       	cbi	0x04, 4	; 4
    1042:	23 98       	cbi	0x04, 3	; 4
    1044:	85 b1       	in	r24, 0x05	; 5
    1046:	88 61       	ori	r24, 0x18	; 24
    1048:	85 b9       	out	0x05, r24	; 5
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	0e 94 e5 06 	call	0xdca	; 0xdca <motor_set_dir>
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	0e 94 e5 06 	call	0xdca	; 0xdca <motor_set_dir>
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <robo_motorSpeed>

00001066 <cprintf>:
    1066:	4f 92       	push	r4
    1068:	5f 92       	push	r5
    106a:	6f 92       	push	r6
    106c:	7f 92       	push	r7
    106e:	8f 92       	push	r8
    1070:	9f 92       	push	r9
    1072:	af 92       	push	r10
    1074:	bf 92       	push	r11
    1076:	cf 92       	push	r12
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	de 01       	movw	r26, r28
    108c:	53 96       	adiw	r26, 0x13	; 19
    108e:	ed 91       	ld	r30, X+
    1090:	fd 91       	ld	r31, X+
    1092:	8d 01       	movw	r16, r26
    1094:	5a e0       	ldi	r21, 0x0A	; 10
    1096:	65 2e       	mov	r6, r21
    1098:	71 2c       	mov	r7, r1
    109a:	80 81       	ld	r24, Z
    109c:	85 32       	cpi	r24, 0x25	; 37
    109e:	81 f4       	brne	.+32     	; 0x10c0 <cprintf+0x5a>
    10a0:	5f 01       	movw	r10, r30
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	a8 0e       	add	r10, r24
    10a6:	b1 1c       	adc	r11, r1
    10a8:	81 81       	ldd	r24, Z+1	; 0x01
    10aa:	84 36       	cpi	r24, 0x64	; 100
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <cprintf+0x4a>
    10ae:	50 c0       	rjmp	.+160    	; 0x1150 <cprintf+0xea>
    10b0:	90 f4       	brcc	.+36     	; 0x10d6 <cprintf+0x70>
    10b2:	83 36       	cpi	r24, 0x63	; 99
    10b4:	61 f4       	brne	.+24     	; 0x10ce <cprintf+0x68>
    10b6:	f8 01       	movw	r30, r16
    10b8:	80 81       	ld	r24, Z
    10ba:	0e 5f       	subi	r16, 0xFE	; 254
    10bc:	1f 4f       	sbci	r17, 0xFF	; 255
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <cprintf+0x68>
    10c0:	88 23       	and	r24, r24
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <cprintf+0x60>
    10c4:	5d c0       	rjmp	.+186    	; 0x1180 <cprintf+0x11a>
    10c6:	5f 01       	movw	r10, r30
    10c8:	9f ef       	ldi	r25, 0xFF	; 255
    10ca:	a9 1a       	sub	r10, r25
    10cc:	b9 0a       	sbc	r11, r25
    10ce:	0e 94 75 07 	call	0xeea	; 0xeea <cputchar>
    10d2:	f5 01       	movw	r30, r10
    10d4:	e2 cf       	rjmp	.-60     	; 0x109a <cprintf+0x34>
    10d6:	83 37       	cpi	r24, 0x73	; 115
    10d8:	71 f1       	breq	.+92     	; 0x1136 <cprintf+0xd0>
    10da:	30 e1       	ldi	r19, 0x10	; 16
    10dc:	83 2e       	mov	r8, r19
    10de:	91 2c       	mov	r9, r1
    10e0:	e1 2c       	mov	r14, r1
    10e2:	40 e1       	ldi	r20, 0x10	; 16
    10e4:	f4 2e       	mov	r15, r20
    10e6:	88 37       	cpi	r24, 0x78	; 120
    10e8:	91 f7       	brne	.-28     	; 0x10ce <cprintf+0x68>
    10ea:	f8 01       	movw	r30, r16
    10ec:	c0 80       	ld	r12, Z
    10ee:	d1 80       	ldd	r13, Z+1	; 0x01
    10f0:	0e 5f       	subi	r16, 0xFE	; 254
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	84 36       	cpi	r24, 0x64	; 100
    10f6:	59 f4       	brne	.+22     	; 0x110e <cprintf+0xa8>
    10f8:	d7 fe       	sbrs	r13, 7
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <cprintf+0xa2>
    10fc:	d1 94       	neg	r13
    10fe:	c1 94       	neg	r12
    1100:	d1 08       	sbc	r13, r1
    1102:	8d e2       	ldi	r24, 0x2D	; 45
    1104:	0e 94 75 07 	call	0xeea	; 0xeea <cputchar>
    1108:	ce 14       	cp	r12, r14
    110a:	df 04       	cpc	r13, r15
    110c:	48 f1       	brcs	.+82     	; 0x1160 <cprintf+0xfa>
    110e:	c6 01       	movw	r24, r12
    1110:	b7 01       	movw	r22, r14
    1112:	0e 94 07 09 	call	0x120e	; 0x120e <__udivmodhi4>
    1116:	2c 01       	movw	r4, r24
    1118:	61 5f       	subi	r22, 0xF1	; 241
    111a:	7d 4f       	sbci	r23, 0xFD	; 253
    111c:	fb 01       	movw	r30, r22
    111e:	80 81       	ld	r24, Z
    1120:	0e 94 75 07 	call	0xeea	; 0xeea <cputchar>
    1124:	62 01       	movw	r12, r4
    1126:	c7 01       	movw	r24, r14
    1128:	b4 01       	movw	r22, r8
    112a:	0e 94 07 09 	call	0x120e	; 0x120e <__udivmodhi4>
    112e:	7b 01       	movw	r14, r22
    1130:	67 2b       	or	r22, r23
    1132:	69 f7       	brne	.-38     	; 0x110e <cprintf+0xa8>
    1134:	ce cf       	rjmp	.-100    	; 0x10d2 <cprintf+0x6c>
    1136:	f8 01       	movw	r30, r16
    1138:	e0 80       	ld	r14, Z
    113a:	f1 80       	ldd	r15, Z+1	; 0x01
    113c:	0e 5f       	subi	r16, 0xFE	; 254
    113e:	1f 4f       	sbci	r17, 0xFF	; 255
    1140:	f7 01       	movw	r30, r14
    1142:	81 91       	ld	r24, Z+
    1144:	7f 01       	movw	r14, r30
    1146:	88 23       	and	r24, r24
    1148:	21 f2       	breq	.-120    	; 0x10d2 <cprintf+0x6c>
    114a:	0e 94 75 07 	call	0xeea	; 0xeea <cputchar>
    114e:	f8 cf       	rjmp	.-16     	; 0x1140 <cprintf+0xda>
    1150:	9a e0       	ldi	r25, 0x0A	; 10
    1152:	89 2e       	mov	r8, r25
    1154:	91 2c       	mov	r9, r1
    1156:	20 e1       	ldi	r18, 0x10	; 16
    1158:	e2 2e       	mov	r14, r18
    115a:	27 e2       	ldi	r18, 0x27	; 39
    115c:	f2 2e       	mov	r15, r18
    115e:	c5 cf       	rjmp	.-118    	; 0x10ea <cprintf+0x84>
    1160:	c7 01       	movw	r24, r14
    1162:	b3 01       	movw	r22, r6
    1164:	0e 94 07 09 	call	0x120e	; 0x120e <__udivmodhi4>
    1168:	7b 01       	movw	r14, r22
    116a:	62 30       	cpi	r22, 0x02	; 2
    116c:	71 05       	cpc	r23, r1
    116e:	60 f6       	brcc	.-104    	; 0x1108 <cprintf+0xa2>
    1170:	c6 01       	movw	r24, r12
    1172:	0e 94 07 09 	call	0x120e	; 0x120e <__udivmodhi4>
    1176:	fb 01       	movw	r30, r22
    1178:	e1 5f       	subi	r30, 0xF1	; 241
    117a:	fd 4f       	sbci	r31, 0xFD	; 253
    117c:	80 81       	ld	r24, Z
    117e:	a7 cf       	rjmp	.-178    	; 0x10ce <cprintf+0x68>
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	bf 90       	pop	r11
    1196:	af 90       	pop	r10
    1198:	9f 90       	pop	r9
    119a:	8f 90       	pop	r8
    119c:	7f 90       	pop	r7
    119e:	6f 90       	pop	r6
    11a0:	5f 90       	pop	r5
    11a2:	4f 90       	pop	r4
    11a4:	08 95       	ret

000011a6 <main>:

}

int main( void )
{
    robo_Setup();                                          /* initialize HAL for RoboKar     */
    11a6:	0e 94 17 08 	call	0x102e	; 0x102e <robo_Setup>
    OSInit();                                              /* initialize UCOS-II kernel      */
    11aa:	0e 94 0b 05 	call	0xa16	; 0xa16 <OSInit>

    robo_motorSpeed(STOP_SPEED, STOP_SPEED);               /* Stop the robot                 */
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	0e 94 3a 07 	call	0xe74	; 0xe74 <robo_motorSpeed>
    myrobot.rspeed   = STOP_SPEED;                         /* Initialize myrobot states      */
    11ba:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <myrobot+0x1>
    11be:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <myrobot>
    myrobot.lspeed   = STOP_SPEED;
    11c2:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <myrobot+0x3>
    11c6:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <myrobot+0x2>
    myrobot.obstacle = 0;    
    11ca:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <myrobot+0x4>
                                  /*  No collisioin                 */

    myrobot.prevError = 0.0;
    11ce:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <myrobot+0x5>
    11d2:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <myrobot+0x6>
    11d6:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <myrobot+0x7>
    11da:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <myrobot+0x8>
    myrobot.integral = 0.0;
    11de:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <myrobot+0x9>
    11e2:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <myrobot+0xa>
    11e6:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <myrobot+0xb>
    11ea:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <myrobot+0xc>
    OSTaskCreate(TaskStart,                                /* create TaskStart Task          */
    11ee:	22 e0       	ldi	r18, 0x02	; 2
    11f0:	4c ed       	ldi	r20, 0xDC	; 220
    11f2:	53 e0       	ldi	r21, 0x03	; 3
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	88 e7       	ldi	r24, 0x78	; 120
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 b6 04 	call	0x96c	; 0x96c <OSTaskCreate>
                (void *)0,
                (void *)&TaskStartStk[TASK_STK_SZ - 1],
                TASK_START_PRIO);
	robo_Honk(); robo_wait4goPress();                      /* Wait for to GO                 */
    1200:	0e 94 dd 07 	call	0xfba	; 0xfba <robo_Honk>
    1204:	0e 94 03 08 	call	0x1006	; 0x1006 <robo_wait4goPress>
    OSStart();                                             /* Start multitasking             */
    1208:	0e 94 6f 03 	call	0x6de	; 0x6de <OSStart>
    120c:	ff cf       	rjmp	.-2      	; 0x120c <main+0x66>

0000120e <__udivmodhi4>:
    120e:	aa 1b       	sub	r26, r26
    1210:	bb 1b       	sub	r27, r27
    1212:	51 e1       	ldi	r21, 0x11	; 17
    1214:	07 c0       	rjmp	.+14     	; 0x1224 <__udivmodhi4_ep>

00001216 <__udivmodhi4_loop>:
    1216:	aa 1f       	adc	r26, r26
    1218:	bb 1f       	adc	r27, r27
    121a:	a6 17       	cp	r26, r22
    121c:	b7 07       	cpc	r27, r23
    121e:	10 f0       	brcs	.+4      	; 0x1224 <__udivmodhi4_ep>
    1220:	a6 1b       	sub	r26, r22
    1222:	b7 0b       	sbc	r27, r23

00001224 <__udivmodhi4_ep>:
    1224:	88 1f       	adc	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	5a 95       	dec	r21
    122a:	a9 f7       	brne	.-22     	; 0x1216 <__udivmodhi4_loop>
    122c:	80 95       	com	r24
    122e:	90 95       	com	r25
    1230:	bc 01       	movw	r22, r24
    1232:	cd 01       	movw	r24, r26
    1234:	08 95       	ret

00001236 <__divmodhi4>:
    1236:	97 fb       	bst	r25, 7
    1238:	07 2e       	mov	r0, r23
    123a:	16 f4       	brtc	.+4      	; 0x1240 <__divmodhi4+0xa>
    123c:	00 94       	com	r0
    123e:	07 d0       	rcall	.+14     	; 0x124e <__divmodhi4_neg1>
    1240:	77 fd       	sbrc	r23, 7
    1242:	09 d0       	rcall	.+18     	; 0x1256 <__divmodhi4_neg2>
    1244:	0e 94 07 09 	call	0x120e	; 0x120e <__udivmodhi4>
    1248:	07 fc       	sbrc	r0, 7
    124a:	05 d0       	rcall	.+10     	; 0x1256 <__divmodhi4_neg2>
    124c:	3e f4       	brtc	.+14     	; 0x125c <__divmodhi4_exit>

0000124e <__divmodhi4_neg1>:
    124e:	90 95       	com	r25
    1250:	81 95       	neg	r24
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	08 95       	ret

00001256 <__divmodhi4_neg2>:
    1256:	70 95       	com	r23
    1258:	61 95       	neg	r22
    125a:	7f 4f       	sbci	r23, 0xFF	; 255

0000125c <__divmodhi4_exit>:
    125c:	08 95       	ret

0000125e <__udivmodsi4>:
    125e:	a1 e2       	ldi	r26, 0x21	; 33
    1260:	1a 2e       	mov	r1, r26
    1262:	aa 1b       	sub	r26, r26
    1264:	bb 1b       	sub	r27, r27
    1266:	fd 01       	movw	r30, r26
    1268:	0d c0       	rjmp	.+26     	; 0x1284 <__udivmodsi4_ep>

0000126a <__udivmodsi4_loop>:
    126a:	aa 1f       	adc	r26, r26
    126c:	bb 1f       	adc	r27, r27
    126e:	ee 1f       	adc	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	a2 17       	cp	r26, r18
    1274:	b3 07       	cpc	r27, r19
    1276:	e4 07       	cpc	r30, r20
    1278:	f5 07       	cpc	r31, r21
    127a:	20 f0       	brcs	.+8      	; 0x1284 <__udivmodsi4_ep>
    127c:	a2 1b       	sub	r26, r18
    127e:	b3 0b       	sbc	r27, r19
    1280:	e4 0b       	sbc	r30, r20
    1282:	f5 0b       	sbc	r31, r21

00001284 <__udivmodsi4_ep>:
    1284:	66 1f       	adc	r22, r22
    1286:	77 1f       	adc	r23, r23
    1288:	88 1f       	adc	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	1a 94       	dec	r1
    128e:	69 f7       	brne	.-38     	; 0x126a <__udivmodsi4_loop>
    1290:	60 95       	com	r22
    1292:	70 95       	com	r23
    1294:	80 95       	com	r24
    1296:	90 95       	com	r25
    1298:	9b 01       	movw	r18, r22
    129a:	ac 01       	movw	r20, r24
    129c:	bd 01       	movw	r22, r26
    129e:	cf 01       	movw	r24, r30
    12a0:	08 95       	ret

000012a2 <__umulhisi3>:
    12a2:	a2 9f       	mul	r26, r18
    12a4:	b0 01       	movw	r22, r0
    12a6:	b3 9f       	mul	r27, r19
    12a8:	c0 01       	movw	r24, r0
    12aa:	a3 9f       	mul	r26, r19
    12ac:	70 0d       	add	r23, r0
    12ae:	81 1d       	adc	r24, r1
    12b0:	11 24       	eor	r1, r1
    12b2:	91 1d       	adc	r25, r1
    12b4:	b2 9f       	mul	r27, r18
    12b6:	70 0d       	add	r23, r0
    12b8:	81 1d       	adc	r24, r1
    12ba:	11 24       	eor	r1, r1
    12bc:	91 1d       	adc	r25, r1
    12be:	08 95       	ret

000012c0 <__muluhisi3>:
    12c0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__umulhisi3>
    12c4:	a5 9f       	mul	r26, r21
    12c6:	90 0d       	add	r25, r0
    12c8:	b4 9f       	mul	r27, r20
    12ca:	90 0d       	add	r25, r0
    12cc:	a4 9f       	mul	r26, r20
    12ce:	80 0d       	add	r24, r0
    12d0:	91 1d       	adc	r25, r1
    12d2:	11 24       	eor	r1, r1
    12d4:	08 95       	ret

000012d6 <__subsf3>:
    12d6:	50 58       	subi	r21, 0x80	; 128

000012d8 <__addsf3>:
    12d8:	bb 27       	eor	r27, r27
    12da:	aa 27       	eor	r26, r26
    12dc:	0e 94 83 09 	call	0x1306	; 0x1306 <__addsf3x>
    12e0:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__fp_round>
    12e4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_pscA>
    12e8:	38 f0       	brcs	.+14     	; 0x12f8 <__addsf3+0x20>
    12ea:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_pscB>
    12ee:	20 f0       	brcs	.+8      	; 0x12f8 <__addsf3+0x20>
    12f0:	39 f4       	brne	.+14     	; 0x1300 <__addsf3+0x28>
    12f2:	9f 3f       	cpi	r25, 0xFF	; 255
    12f4:	19 f4       	brne	.+6      	; 0x12fc <__addsf3+0x24>
    12f6:	26 f4       	brtc	.+8      	; 0x1300 <__addsf3+0x28>
    12f8:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__fp_nan>
    12fc:	0e f4       	brtc	.+2      	; 0x1300 <__addsf3+0x28>
    12fe:	e0 95       	com	r30
    1300:	e7 fb       	bst	r30, 7
    1302:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_inf>

00001306 <__addsf3x>:
    1306:	e9 2f       	mov	r30, r25
    1308:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fp_split3>
    130c:	58 f3       	brcs	.-42     	; 0x12e4 <__addsf3+0xc>
    130e:	ba 17       	cp	r27, r26
    1310:	62 07       	cpc	r22, r18
    1312:	73 07       	cpc	r23, r19
    1314:	84 07       	cpc	r24, r20
    1316:	95 07       	cpc	r25, r21
    1318:	20 f0       	brcs	.+8      	; 0x1322 <__addsf3x+0x1c>
    131a:	79 f4       	brne	.+30     	; 0x133a <__addsf3x+0x34>
    131c:	a6 f5       	brtc	.+104    	; 0x1386 <__addsf3x+0x80>
    131e:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_zero>
    1322:	0e f4       	brtc	.+2      	; 0x1326 <__addsf3x+0x20>
    1324:	e0 95       	com	r30
    1326:	0b 2e       	mov	r0, r27
    1328:	ba 2f       	mov	r27, r26
    132a:	a0 2d       	mov	r26, r0
    132c:	0b 01       	movw	r0, r22
    132e:	b9 01       	movw	r22, r18
    1330:	90 01       	movw	r18, r0
    1332:	0c 01       	movw	r0, r24
    1334:	ca 01       	movw	r24, r20
    1336:	a0 01       	movw	r20, r0
    1338:	11 24       	eor	r1, r1
    133a:	ff 27       	eor	r31, r31
    133c:	59 1b       	sub	r21, r25
    133e:	99 f0       	breq	.+38     	; 0x1366 <__addsf3x+0x60>
    1340:	59 3f       	cpi	r21, 0xF9	; 249
    1342:	50 f4       	brcc	.+20     	; 0x1358 <__addsf3x+0x52>
    1344:	50 3e       	cpi	r21, 0xE0	; 224
    1346:	68 f1       	brcs	.+90     	; 0x13a2 <__addsf3x+0x9c>
    1348:	1a 16       	cp	r1, r26
    134a:	f0 40       	sbci	r31, 0x00	; 0
    134c:	a2 2f       	mov	r26, r18
    134e:	23 2f       	mov	r18, r19
    1350:	34 2f       	mov	r19, r20
    1352:	44 27       	eor	r20, r20
    1354:	58 5f       	subi	r21, 0xF8	; 248
    1356:	f3 cf       	rjmp	.-26     	; 0x133e <__addsf3x+0x38>
    1358:	46 95       	lsr	r20
    135a:	37 95       	ror	r19
    135c:	27 95       	ror	r18
    135e:	a7 95       	ror	r26
    1360:	f0 40       	sbci	r31, 0x00	; 0
    1362:	53 95       	inc	r21
    1364:	c9 f7       	brne	.-14     	; 0x1358 <__addsf3x+0x52>
    1366:	7e f4       	brtc	.+30     	; 0x1386 <__addsf3x+0x80>
    1368:	1f 16       	cp	r1, r31
    136a:	ba 0b       	sbc	r27, r26
    136c:	62 0b       	sbc	r22, r18
    136e:	73 0b       	sbc	r23, r19
    1370:	84 0b       	sbc	r24, r20
    1372:	ba f0       	brmi	.+46     	; 0x13a2 <__addsf3x+0x9c>
    1374:	91 50       	subi	r25, 0x01	; 1
    1376:	a1 f0       	breq	.+40     	; 0x13a0 <__addsf3x+0x9a>
    1378:	ff 0f       	add	r31, r31
    137a:	bb 1f       	adc	r27, r27
    137c:	66 1f       	adc	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	88 1f       	adc	r24, r24
    1382:	c2 f7       	brpl	.-16     	; 0x1374 <__addsf3x+0x6e>
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <__addsf3x+0x9c>
    1386:	ba 0f       	add	r27, r26
    1388:	62 1f       	adc	r22, r18
    138a:	73 1f       	adc	r23, r19
    138c:	84 1f       	adc	r24, r20
    138e:	48 f4       	brcc	.+18     	; 0x13a2 <__addsf3x+0x9c>
    1390:	87 95       	ror	r24
    1392:	77 95       	ror	r23
    1394:	67 95       	ror	r22
    1396:	b7 95       	ror	r27
    1398:	f7 95       	ror	r31
    139a:	9e 3f       	cpi	r25, 0xFE	; 254
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <__addsf3x+0x9a>
    139e:	b0 cf       	rjmp	.-160    	; 0x1300 <__addsf3+0x28>
    13a0:	93 95       	inc	r25
    13a2:	88 0f       	add	r24, r24
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <__addsf3x+0xa2>
    13a6:	99 27       	eor	r25, r25
    13a8:	ee 0f       	add	r30, r30
    13aa:	97 95       	ror	r25
    13ac:	87 95       	ror	r24
    13ae:	08 95       	ret

000013b0 <__cmpsf2>:
    13b0:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fp_cmp>
    13b4:	08 f4       	brcc	.+2      	; 0x13b8 <__cmpsf2+0x8>
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	08 95       	ret

000013ba <__fixsfsi>:
    13ba:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__fixunssfsi>
    13be:	68 94       	set
    13c0:	b1 11       	cpse	r27, r1
    13c2:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_szero>
    13c6:	08 95       	ret

000013c8 <__fixunssfsi>:
    13c8:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fp_splitA>
    13cc:	88 f0       	brcs	.+34     	; 0x13f0 <__fixunssfsi+0x28>
    13ce:	9f 57       	subi	r25, 0x7F	; 127
    13d0:	98 f0       	brcs	.+38     	; 0x13f8 <__fixunssfsi+0x30>
    13d2:	b9 2f       	mov	r27, r25
    13d4:	99 27       	eor	r25, r25
    13d6:	b7 51       	subi	r27, 0x17	; 23
    13d8:	b0 f0       	brcs	.+44     	; 0x1406 <__fixunssfsi+0x3e>
    13da:	e1 f0       	breq	.+56     	; 0x1414 <__fixunssfsi+0x4c>
    13dc:	66 0f       	add	r22, r22
    13de:	77 1f       	adc	r23, r23
    13e0:	88 1f       	adc	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	1a f0       	brmi	.+6      	; 0x13ec <__fixunssfsi+0x24>
    13e6:	ba 95       	dec	r27
    13e8:	c9 f7       	brne	.-14     	; 0x13dc <__fixunssfsi+0x14>
    13ea:	14 c0       	rjmp	.+40     	; 0x1414 <__fixunssfsi+0x4c>
    13ec:	b1 30       	cpi	r27, 0x01	; 1
    13ee:	91 f0       	breq	.+36     	; 0x1414 <__fixunssfsi+0x4c>
    13f0:	0e 94 be 0a 	call	0x157c	; 0x157c <__fp_zero>
    13f4:	b1 e0       	ldi	r27, 0x01	; 1
    13f6:	08 95       	ret
    13f8:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_zero>
    13fc:	67 2f       	mov	r22, r23
    13fe:	78 2f       	mov	r23, r24
    1400:	88 27       	eor	r24, r24
    1402:	b8 5f       	subi	r27, 0xF8	; 248
    1404:	39 f0       	breq	.+14     	; 0x1414 <__fixunssfsi+0x4c>
    1406:	b9 3f       	cpi	r27, 0xF9	; 249
    1408:	cc f3       	brlt	.-14     	; 0x13fc <__fixunssfsi+0x34>
    140a:	86 95       	lsr	r24
    140c:	77 95       	ror	r23
    140e:	67 95       	ror	r22
    1410:	b3 95       	inc	r27
    1412:	d9 f7       	brne	.-10     	; 0x140a <__fixunssfsi+0x42>
    1414:	3e f4       	brtc	.+14     	; 0x1424 <__fixunssfsi+0x5c>
    1416:	90 95       	com	r25
    1418:	80 95       	com	r24
    141a:	70 95       	com	r23
    141c:	61 95       	neg	r22
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	8f 4f       	sbci	r24, 0xFF	; 255
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	08 95       	ret

00001426 <__floatunsisf>:
    1426:	e8 94       	clt
    1428:	09 c0       	rjmp	.+18     	; 0x143c <__floatsisf+0x12>

0000142a <__floatsisf>:
    142a:	97 fb       	bst	r25, 7
    142c:	3e f4       	brtc	.+14     	; 0x143c <__floatsisf+0x12>
    142e:	90 95       	com	r25
    1430:	80 95       	com	r24
    1432:	70 95       	com	r23
    1434:	61 95       	neg	r22
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	99 23       	and	r25, r25
    143e:	a9 f0       	breq	.+42     	; 0x146a <__floatsisf+0x40>
    1440:	f9 2f       	mov	r31, r25
    1442:	96 e9       	ldi	r25, 0x96	; 150
    1444:	bb 27       	eor	r27, r27
    1446:	93 95       	inc	r25
    1448:	f6 95       	lsr	r31
    144a:	87 95       	ror	r24
    144c:	77 95       	ror	r23
    144e:	67 95       	ror	r22
    1450:	b7 95       	ror	r27
    1452:	f1 11       	cpse	r31, r1
    1454:	f8 cf       	rjmp	.-16     	; 0x1446 <__floatsisf+0x1c>
    1456:	fa f4       	brpl	.+62     	; 0x1496 <__floatsisf+0x6c>
    1458:	bb 0f       	add	r27, r27
    145a:	11 f4       	brne	.+4      	; 0x1460 <__floatsisf+0x36>
    145c:	60 ff       	sbrs	r22, 0
    145e:	1b c0       	rjmp	.+54     	; 0x1496 <__floatsisf+0x6c>
    1460:	6f 5f       	subi	r22, 0xFF	; 255
    1462:	7f 4f       	sbci	r23, 0xFF	; 255
    1464:	8f 4f       	sbci	r24, 0xFF	; 255
    1466:	9f 4f       	sbci	r25, 0xFF	; 255
    1468:	16 c0       	rjmp	.+44     	; 0x1496 <__floatsisf+0x6c>
    146a:	88 23       	and	r24, r24
    146c:	11 f0       	breq	.+4      	; 0x1472 <__floatsisf+0x48>
    146e:	96 e9       	ldi	r25, 0x96	; 150
    1470:	11 c0       	rjmp	.+34     	; 0x1494 <__floatsisf+0x6a>
    1472:	77 23       	and	r23, r23
    1474:	21 f0       	breq	.+8      	; 0x147e <__floatsisf+0x54>
    1476:	9e e8       	ldi	r25, 0x8E	; 142
    1478:	87 2f       	mov	r24, r23
    147a:	76 2f       	mov	r23, r22
    147c:	05 c0       	rjmp	.+10     	; 0x1488 <__floatsisf+0x5e>
    147e:	66 23       	and	r22, r22
    1480:	71 f0       	breq	.+28     	; 0x149e <__floatsisf+0x74>
    1482:	96 e8       	ldi	r25, 0x86	; 134
    1484:	86 2f       	mov	r24, r22
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	2a f0       	brmi	.+10     	; 0x1496 <__floatsisf+0x6c>
    148c:	9a 95       	dec	r25
    148e:	66 0f       	add	r22, r22
    1490:	77 1f       	adc	r23, r23
    1492:	88 1f       	adc	r24, r24
    1494:	da f7       	brpl	.-10     	; 0x148c <__floatsisf+0x62>
    1496:	88 0f       	add	r24, r24
    1498:	96 95       	lsr	r25
    149a:	87 95       	ror	r24
    149c:	97 f9       	bld	r25, 7
    149e:	08 95       	ret

000014a0 <__fp_cmp>:
    14a0:	99 0f       	add	r25, r25
    14a2:	00 08       	sbc	r0, r0
    14a4:	55 0f       	add	r21, r21
    14a6:	aa 0b       	sbc	r26, r26
    14a8:	e0 e8       	ldi	r30, 0x80	; 128
    14aa:	fe ef       	ldi	r31, 0xFE	; 254
    14ac:	16 16       	cp	r1, r22
    14ae:	17 06       	cpc	r1, r23
    14b0:	e8 07       	cpc	r30, r24
    14b2:	f9 07       	cpc	r31, r25
    14b4:	c0 f0       	brcs	.+48     	; 0x14e6 <__fp_cmp+0x46>
    14b6:	12 16       	cp	r1, r18
    14b8:	13 06       	cpc	r1, r19
    14ba:	e4 07       	cpc	r30, r20
    14bc:	f5 07       	cpc	r31, r21
    14be:	98 f0       	brcs	.+38     	; 0x14e6 <__fp_cmp+0x46>
    14c0:	62 1b       	sub	r22, r18
    14c2:	73 0b       	sbc	r23, r19
    14c4:	84 0b       	sbc	r24, r20
    14c6:	95 0b       	sbc	r25, r21
    14c8:	39 f4       	brne	.+14     	; 0x14d8 <__fp_cmp+0x38>
    14ca:	0a 26       	eor	r0, r26
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <__fp_cmp+0x46>
    14ce:	23 2b       	or	r18, r19
    14d0:	24 2b       	or	r18, r20
    14d2:	25 2b       	or	r18, r21
    14d4:	21 f4       	brne	.+8      	; 0x14de <__fp_cmp+0x3e>
    14d6:	08 95       	ret
    14d8:	0a 26       	eor	r0, r26
    14da:	09 f4       	brne	.+2      	; 0x14de <__fp_cmp+0x3e>
    14dc:	a1 40       	sbci	r26, 0x01	; 1
    14de:	a6 95       	lsr	r26
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	81 1d       	adc	r24, r1
    14e4:	81 1d       	adc	r24, r1
    14e6:	08 95       	ret

000014e8 <__fp_inf>:
    14e8:	97 f9       	bld	r25, 7
    14ea:	9f 67       	ori	r25, 0x7F	; 127
    14ec:	80 e8       	ldi	r24, 0x80	; 128
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	08 95       	ret

000014f4 <__fp_nan>:
    14f4:	9f ef       	ldi	r25, 0xFF	; 255
    14f6:	80 ec       	ldi	r24, 0xC0	; 192
    14f8:	08 95       	ret

000014fa <__fp_pscA>:
    14fa:	00 24       	eor	r0, r0
    14fc:	0a 94       	dec	r0
    14fe:	16 16       	cp	r1, r22
    1500:	17 06       	cpc	r1, r23
    1502:	18 06       	cpc	r1, r24
    1504:	09 06       	cpc	r0, r25
    1506:	08 95       	ret

00001508 <__fp_pscB>:
    1508:	00 24       	eor	r0, r0
    150a:	0a 94       	dec	r0
    150c:	12 16       	cp	r1, r18
    150e:	13 06       	cpc	r1, r19
    1510:	14 06       	cpc	r1, r20
    1512:	05 06       	cpc	r0, r21
    1514:	08 95       	ret

00001516 <__fp_round>:
    1516:	09 2e       	mov	r0, r25
    1518:	03 94       	inc	r0
    151a:	00 0c       	add	r0, r0
    151c:	11 f4       	brne	.+4      	; 0x1522 <__fp_round+0xc>
    151e:	88 23       	and	r24, r24
    1520:	52 f0       	brmi	.+20     	; 0x1536 <__fp_round+0x20>
    1522:	bb 0f       	add	r27, r27
    1524:	40 f4       	brcc	.+16     	; 0x1536 <__fp_round+0x20>
    1526:	bf 2b       	or	r27, r31
    1528:	11 f4       	brne	.+4      	; 0x152e <__fp_round+0x18>
    152a:	60 ff       	sbrs	r22, 0
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <__fp_round+0x20>
    152e:	6f 5f       	subi	r22, 0xFF	; 255
    1530:	7f 4f       	sbci	r23, 0xFF	; 255
    1532:	8f 4f       	sbci	r24, 0xFF	; 255
    1534:	9f 4f       	sbci	r25, 0xFF	; 255
    1536:	08 95       	ret

00001538 <__fp_split3>:
    1538:	57 fd       	sbrc	r21, 7
    153a:	90 58       	subi	r25, 0x80	; 128
    153c:	44 0f       	add	r20, r20
    153e:	55 1f       	adc	r21, r21
    1540:	59 f0       	breq	.+22     	; 0x1558 <__fp_splitA+0x10>
    1542:	5f 3f       	cpi	r21, 0xFF	; 255
    1544:	71 f0       	breq	.+28     	; 0x1562 <__fp_splitA+0x1a>
    1546:	47 95       	ror	r20

00001548 <__fp_splitA>:
    1548:	88 0f       	add	r24, r24
    154a:	97 fb       	bst	r25, 7
    154c:	99 1f       	adc	r25, r25
    154e:	61 f0       	breq	.+24     	; 0x1568 <__fp_splitA+0x20>
    1550:	9f 3f       	cpi	r25, 0xFF	; 255
    1552:	79 f0       	breq	.+30     	; 0x1572 <__fp_splitA+0x2a>
    1554:	87 95       	ror	r24
    1556:	08 95       	ret
    1558:	12 16       	cp	r1, r18
    155a:	13 06       	cpc	r1, r19
    155c:	14 06       	cpc	r1, r20
    155e:	55 1f       	adc	r21, r21
    1560:	f2 cf       	rjmp	.-28     	; 0x1546 <__fp_split3+0xe>
    1562:	46 95       	lsr	r20
    1564:	f1 df       	rcall	.-30     	; 0x1548 <__fp_splitA>
    1566:	08 c0       	rjmp	.+16     	; 0x1578 <__fp_splitA+0x30>
    1568:	16 16       	cp	r1, r22
    156a:	17 06       	cpc	r1, r23
    156c:	18 06       	cpc	r1, r24
    156e:	99 1f       	adc	r25, r25
    1570:	f1 cf       	rjmp	.-30     	; 0x1554 <__fp_splitA+0xc>
    1572:	86 95       	lsr	r24
    1574:	71 05       	cpc	r23, r1
    1576:	61 05       	cpc	r22, r1
    1578:	08 94       	sec
    157a:	08 95       	ret

0000157c <__fp_zero>:
    157c:	e8 94       	clt

0000157e <__fp_szero>:
    157e:	bb 27       	eor	r27, r27
    1580:	66 27       	eor	r22, r22
    1582:	77 27       	eor	r23, r23
    1584:	cb 01       	movw	r24, r22
    1586:	97 f9       	bld	r25, 7
    1588:	08 95       	ret

0000158a <__gesf2>:
    158a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__fp_cmp>
    158e:	08 f4       	brcc	.+2      	; 0x1592 <__gesf2+0x8>
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	08 95       	ret

00001594 <__mulsf3>:
    1594:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3x>
    1598:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__fp_round>
    159c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_pscA>
    15a0:	38 f0       	brcs	.+14     	; 0x15b0 <__mulsf3+0x1c>
    15a2:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_pscB>
    15a6:	20 f0       	brcs	.+8      	; 0x15b0 <__mulsf3+0x1c>
    15a8:	95 23       	and	r25, r21
    15aa:	11 f0       	breq	.+4      	; 0x15b0 <__mulsf3+0x1c>
    15ac:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_inf>
    15b0:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__fp_nan>
    15b4:	11 24       	eor	r1, r1
    15b6:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_szero>

000015ba <__mulsf3x>:
    15ba:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fp_split3>
    15be:	70 f3       	brcs	.-36     	; 0x159c <__mulsf3+0x8>

000015c0 <__mulsf3_pse>:
    15c0:	95 9f       	mul	r25, r21
    15c2:	c1 f3       	breq	.-16     	; 0x15b4 <__mulsf3+0x20>
    15c4:	95 0f       	add	r25, r21
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	55 1f       	adc	r21, r21
    15ca:	62 9f       	mul	r22, r18
    15cc:	f0 01       	movw	r30, r0
    15ce:	72 9f       	mul	r23, r18
    15d0:	bb 27       	eor	r27, r27
    15d2:	f0 0d       	add	r31, r0
    15d4:	b1 1d       	adc	r27, r1
    15d6:	63 9f       	mul	r22, r19
    15d8:	aa 27       	eor	r26, r26
    15da:	f0 0d       	add	r31, r0
    15dc:	b1 1d       	adc	r27, r1
    15de:	aa 1f       	adc	r26, r26
    15e0:	64 9f       	mul	r22, r20
    15e2:	66 27       	eor	r22, r22
    15e4:	b0 0d       	add	r27, r0
    15e6:	a1 1d       	adc	r26, r1
    15e8:	66 1f       	adc	r22, r22
    15ea:	82 9f       	mul	r24, r18
    15ec:	22 27       	eor	r18, r18
    15ee:	b0 0d       	add	r27, r0
    15f0:	a1 1d       	adc	r26, r1
    15f2:	62 1f       	adc	r22, r18
    15f4:	73 9f       	mul	r23, r19
    15f6:	b0 0d       	add	r27, r0
    15f8:	a1 1d       	adc	r26, r1
    15fa:	62 1f       	adc	r22, r18
    15fc:	83 9f       	mul	r24, r19
    15fe:	a0 0d       	add	r26, r0
    1600:	61 1d       	adc	r22, r1
    1602:	22 1f       	adc	r18, r18
    1604:	74 9f       	mul	r23, r20
    1606:	33 27       	eor	r19, r19
    1608:	a0 0d       	add	r26, r0
    160a:	61 1d       	adc	r22, r1
    160c:	23 1f       	adc	r18, r19
    160e:	84 9f       	mul	r24, r20
    1610:	60 0d       	add	r22, r0
    1612:	21 1d       	adc	r18, r1
    1614:	82 2f       	mov	r24, r18
    1616:	76 2f       	mov	r23, r22
    1618:	6a 2f       	mov	r22, r26
    161a:	11 24       	eor	r1, r1
    161c:	9f 57       	subi	r25, 0x7F	; 127
    161e:	50 40       	sbci	r21, 0x00	; 0
    1620:	9a f0       	brmi	.+38     	; 0x1648 <__mulsf3_pse+0x88>
    1622:	f1 f0       	breq	.+60     	; 0x1660 <__mulsf3_pse+0xa0>
    1624:	88 23       	and	r24, r24
    1626:	4a f0       	brmi	.+18     	; 0x163a <__mulsf3_pse+0x7a>
    1628:	ee 0f       	add	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	bb 1f       	adc	r27, r27
    162e:	66 1f       	adc	r22, r22
    1630:	77 1f       	adc	r23, r23
    1632:	88 1f       	adc	r24, r24
    1634:	91 50       	subi	r25, 0x01	; 1
    1636:	50 40       	sbci	r21, 0x00	; 0
    1638:	a9 f7       	brne	.-22     	; 0x1624 <__mulsf3_pse+0x64>
    163a:	9e 3f       	cpi	r25, 0xFE	; 254
    163c:	51 05       	cpc	r21, r1
    163e:	80 f0       	brcs	.+32     	; 0x1660 <__mulsf3_pse+0xa0>
    1640:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_inf>
    1644:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_szero>
    1648:	5f 3f       	cpi	r21, 0xFF	; 255
    164a:	e4 f3       	brlt	.-8      	; 0x1644 <__mulsf3_pse+0x84>
    164c:	98 3e       	cpi	r25, 0xE8	; 232
    164e:	d4 f3       	brlt	.-12     	; 0x1644 <__mulsf3_pse+0x84>
    1650:	86 95       	lsr	r24
    1652:	77 95       	ror	r23
    1654:	67 95       	ror	r22
    1656:	b7 95       	ror	r27
    1658:	f7 95       	ror	r31
    165a:	e7 95       	ror	r30
    165c:	9f 5f       	subi	r25, 0xFF	; 255
    165e:	c1 f7       	brne	.-16     	; 0x1650 <__mulsf3_pse+0x90>
    1660:	fe 2b       	or	r31, r30
    1662:	88 0f       	add	r24, r24
    1664:	91 1d       	adc	r25, r1
    1666:	96 95       	lsr	r25
    1668:	87 95       	ror	r24
    166a:	97 f9       	bld	r25, 7
    166c:	08 95       	ret

0000166e <_exit>:
    166e:	f8 94       	cli

00001670 <__stop_program>:
    1670:	ff cf       	rjmp	.-2      	; 0x1670 <__stop_program>

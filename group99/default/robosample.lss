
robosample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800100  000016da  0000176e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000411  0080022a  0080022a  00001898  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000018f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ee  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088f  00000000  00000000  00003026  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a77  00000000  00000000  000038b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  0000432c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b3  00000000  00000000  000043f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f6  00000000  00000000  00004aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00004c99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 6d 02 	jmp	0x4da	; 0x4da <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ed       	ldi	r30, 0xDA	; 218
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 32       	cpi	r26, 0x2A	; 42
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	aa e2       	ldi	r26, 0x2A	; 42
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 33       	cpi	r26, 0x3B	; 59
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 07 09 	call	0x120e	; 0x120e <main>
      9e:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <TestLineSensor>:
        OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 500 ms                  */
    }
}

void TestLineSensor (void *data)
{
      a6:	ff cf       	rjmp	.-2      	; 0xa6 <TestLineSensor>

000000a8 <CheckCollision>:
void CheckCollision (void *data)
{
    for(;;)
    {
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      a8:	c1 e0       	ldi	r28, 0x01	; 1
/*------High pririority task----------*/
void CheckCollision (void *data)
{
    for(;;)
    {
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      aa:	0e 94 c9 07 	call	0xf92	; 0xf92 <robo_proxSensor>
      ae:	01 97       	sbiw	r24, 0x01	; 1
      b0:	51 f4       	brne	.+20     	; 0xc6 <CheckCollision+0x1e>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
      b2:	c0 93 ae 02 	sts	0x02AE, r28	; 0x8002ae <myrobot+0x4>
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */

		OSTimeDlyHMSM(0, 0, 0, 100);                /* Task period ~ 100 ms              */
      b6:	24 e6       	ldi	r18, 0x64	; 100
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	0e 94 3b 06 	call	0xc76	; 0xc76 <OSTimeDlyHMSM>
/*------High pririority task----------*/
void CheckCollision (void *data)
{
    for(;;)
    {
        if ( (robo_proxSensor() == 1) )             /* obstacle?                         */
      c4:	f2 cf       	rjmp	.-28     	; 0xaa <CheckCollision+0x2>
            myrobot.obstacle = 1;                   /* signal obstacle present           */
        else
            myrobot.obstacle = 0;                   /* signal no obstacle                */
      c6:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <myrobot+0x4>
      ca:	f5 cf       	rjmp	.-22     	; 0xb6 <CheckCollision+0xe>

000000cc <CntrlMotors>:

    for(;;)
    {
        speed_r = myrobot.rspeed;
        speed_l = myrobot.lspeed;
        robo_motorSpeed(speed_l, speed_r);
      cc:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <myrobot>
      d0:	70 91 ab 02 	lds	r23, 0x02AB	; 0x8002ab <myrobot+0x1>
      d4:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <myrobot+0x2>
      d8:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <myrobot+0x3>
      dc:	0e 94 6e 07 	call	0xedc	; 0xedc <robo_motorSpeed>
        OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 250 ms              */
      e0:	2a e0       	ldi	r18, 0x0A	; 10
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 3b 06 	call	0xc76	; 0xc76 <OSTimeDlyHMSM>
      ee:	ee cf       	rjmp	.-36     	; 0xcc <CntrlMotors>

000000f0 <Navig>:
        int lineSensorReading = normalizeSensorReading(rawReading);
        // cprintf("line sensor reading: %d \r\n", lineSensorReading);


          // Calculate error
        double error = TARGET_LINE_POSITION - lineSensorReading;
      f0:	38 ee       	ldi	r19, 0xE8	; 232
      f2:	83 2e       	mov	r8, r19
      f4:	33 e0       	ldi	r19, 0x03	; 3
      f6:	93 2e       	mov	r9, r19
        // Update previous error
        myrobot.prevError = error;

        // Update motor speeds based on control signal
        myrobot.rspeed = (MEDIUM_SPEED + (int)controlSignal);
        myrobot.lspeed = (MEDIUM_SPEED - (int)controlSignal);
      f8:	42 e3       	ldi	r20, 0x32	; 50
      fa:	a4 2e       	mov	r10, r20
      fc:	b1 2c       	mov	r11, r1

        if (myrobot.rspeed > 100)
            myrobot.rspeed = 100;
        else if (myrobot.rspeed < -100)
            myrobot.rspeed = -100;
      fe:	cc e9       	ldi	r28, 0x9C	; 156
     100:	df ef       	ldi	r29, 0xFF	; 255
        // Update motor speeds based on control signal
        myrobot.rspeed = (MEDIUM_SPEED + (int)controlSignal);
        myrobot.lspeed = (MEDIUM_SPEED - (int)controlSignal);

        if (myrobot.rspeed > 100)
            myrobot.rspeed = 100;
     102:	04 e6       	ldi	r16, 0x64	; 100
     104:	10 e0       	ldi	r17, 0x00	; 0

    for (;;)
    {

        // Line sensor measurement
        int rawReading = robo_lineSensor();
     106:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <robo_lineSensor>
     10a:	88 30       	cpi	r24, 0x08	; 8
     10c:	91 05       	cpc	r25, r1
     10e:	98 f5       	brcc	.+102    	; 0x176 <Navig+0x86>
     110:	88 0f       	add	r24, r24
     112:	99 1f       	adc	r25, r25
     114:	fc 01       	movw	r30, r24
     116:	e8 5f       	subi	r30, 0xF8	; 248
     118:	fd 4f       	sbci	r31, 0xFD	; 253
     11a:	80 81       	ld	r24, Z
     11c:	91 81       	ldd	r25, Z+1	; 0x01
        int lineSensorReading = normalizeSensorReading(rawReading);
        // cprintf("line sensor reading: %d \r\n", lineSensorReading);


          // Calculate error
        double error = TARGET_LINE_POSITION - lineSensorReading;
     11e:	b4 01       	movw	r22, r8
     120:	68 1b       	sub	r22, r24
     122:	79 0b       	sbc	r23, r25
     124:	07 2e       	mov	r0, r23
     126:	00 0c       	add	r0, r0
     128:	88 0b       	sbc	r24, r24
     12a:	99 0b       	sbc	r25, r25
     12c:	0e 94 49 0a 	call	0x1492	; 0x1492 <__floatsisf>
     130:	6b 01       	movw	r12, r22
     132:	7c 01       	movw	r14, r24

         // Update integral term
        myrobot.integral += error;
     134:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <myrobot+0x9>
     138:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <myrobot+0xa>
     13c:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <myrobot+0xb>
     140:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <myrobot+0xc>
     144:	0e 94 a0 09 	call	0x1340	; 0x1340 <__addsf3>
     148:	2b 01       	movw	r4, r22
     14a:	3c 01       	movw	r6, r24

        // Limit the integral term to prevent excessive accumulation
        if (myrobot.integral > MAX_INTEGRAL_TERM)
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e5       	ldi	r19, 0x50	; 80
     150:	43 e4       	ldi	r20, 0x43	; 67
     152:	57 e4       	ldi	r21, 0x47	; 71
     154:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__gesf2>
     158:	18 16       	cp	r1, r24
     15a:	84 f4       	brge	.+32     	; 0x17c <Navig+0x8c>
            myrobot.integral = MAX_INTEGRAL_TERM;
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	90 e5       	ldi	r25, 0x50	; 80
     160:	a3 e4       	ldi	r26, 0x43	; 67
     162:	b7 e4       	ldi	r27, 0x47	; 71
        else if (myrobot.integral < -MAX_INTEGRAL_TERM)
            myrobot.integral = -MAX_INTEGRAL_TERM;
     164:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <myrobot+0x9>
     168:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <myrobot+0xa>
     16c:	a0 93 b5 02 	sts	0x02B5, r26	; 0x8002b5 <myrobot+0xb>
     170:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <myrobot+0xc>
     174:	15 c0       	rjmp	.+42     	; 0x1a0 <Navig+0xb0>

    for (;;)
    {

        // Line sensor measurement
        int rawReading = robo_lineSensor();
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	d1 cf       	rjmp	.-94     	; 0x11e <Navig+0x2e>
        myrobot.integral += error;

        // Limit the integral term to prevent excessive accumulation
        if (myrobot.integral > MAX_INTEGRAL_TERM)
            myrobot.integral = MAX_INTEGRAL_TERM;
        else if (myrobot.integral < -MAX_INTEGRAL_TERM)
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e5       	ldi	r19, 0x50	; 80
     180:	43 e4       	ldi	r20, 0x43	; 67
     182:	57 ec       	ldi	r21, 0xC7	; 199
     184:	c3 01       	movw	r24, r6
     186:	b2 01       	movw	r22, r4
     188:	0e 94 0c 0a 	call	0x1418	; 0x1418 <__cmpsf2>
     18c:	87 fd       	sbrc	r24, 7
     18e:	6c c0       	rjmp	.+216    	; 0x268 <Navig+0x178>

          // Calculate error
        double error = TARGET_LINE_POSITION - lineSensorReading;

         // Update integral term
        myrobot.integral += error;
     190:	40 92 b3 02 	sts	0x02B3, r4	; 0x8002b3 <myrobot+0x9>
     194:	50 92 b4 02 	sts	0x02B4, r5	; 0x8002b4 <myrobot+0xa>
     198:	60 92 b5 02 	sts	0x02B5, r6	; 0x8002b5 <myrobot+0xb>
     19c:	70 92 b6 02 	sts	0x02B6, r7	; 0x8002b6 <myrobot+0xc>
            myrobot.integral = MAX_INTEGRAL_TERM;
        else if (myrobot.integral < -MAX_INTEGRAL_TERM)
            myrobot.integral = -MAX_INTEGRAL_TERM;

        // Calculate control signal
        double controlSignal = (Kp * error) + (Ki * myrobot.integral) + (Kd * (error - myrobot.prevError));
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	a9 01       	movw	r20, r18
     1a6:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <myrobot+0x9>
     1aa:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <myrobot+0xa>
     1ae:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <myrobot+0xb>
     1b2:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <myrobot+0xc>
     1b6:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__mulsf3>
     1ba:	2b 01       	movw	r4, r22
     1bc:	3c 01       	movw	r6, r24
     1be:	2d ec       	ldi	r18, 0xCD	; 205
     1c0:	3c ec       	ldi	r19, 0xCC	; 204
     1c2:	4c ec       	ldi	r20, 0xCC	; 204
     1c4:	5d e3       	ldi	r21, 0x3D	; 61
     1c6:	c7 01       	movw	r24, r14
     1c8:	b6 01       	movw	r22, r12
     1ca:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__mulsf3>
     1ce:	9b 01       	movw	r18, r22
     1d0:	ac 01       	movw	r20, r24
     1d2:	c3 01       	movw	r24, r6
     1d4:	b2 01       	movw	r22, r4
     1d6:	0e 94 a0 09 	call	0x1340	; 0x1340 <__addsf3>
     1da:	2b 01       	movw	r4, r22
     1dc:	3c 01       	movw	r6, r24
     1de:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <myrobot+0x5>
     1e2:	30 91 b0 02 	lds	r19, 0x02B0	; 0x8002b0 <myrobot+0x6>
     1e6:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <myrobot+0x7>
     1ea:	50 91 b2 02 	lds	r21, 0x02B2	; 0x8002b2 <myrobot+0x8>
     1ee:	c7 01       	movw	r24, r14
     1f0:	b6 01       	movw	r22, r12
     1f2:	0e 94 9f 09 	call	0x133e	; 0x133e <__subsf3>
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	a9 01       	movw	r20, r18
     1fc:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__mulsf3>
     200:	9b 01       	movw	r18, r22
     202:	ac 01       	movw	r20, r24
     204:	c3 01       	movw	r24, r6
     206:	b2 01       	movw	r22, r4
     208:	0e 94 a0 09 	call	0x1340	; 0x1340 <__addsf3>

        // Update previous error
        myrobot.prevError = error;
     20c:	c0 92 af 02 	sts	0x02AF, r12	; 0x8002af <myrobot+0x5>
     210:	d0 92 b0 02 	sts	0x02B0, r13	; 0x8002b0 <myrobot+0x6>
     214:	e0 92 b1 02 	sts	0x02B1, r14	; 0x8002b1 <myrobot+0x7>
     218:	f0 92 b2 02 	sts	0x02B2, r15	; 0x8002b2 <myrobot+0x8>

        // Update motor speeds based on control signal
        myrobot.rspeed = (MEDIUM_SPEED + (int)controlSignal);
     21c:	0e 94 11 0a 	call	0x1422	; 0x1422 <__fixsfsi>
     220:	9b 01       	movw	r18, r22
     222:	2e 5c       	subi	r18, 0xCE	; 206
     224:	3f 4f       	sbci	r19, 0xFF	; 255
     226:	30 93 ab 02 	sts	0x02AB, r19	; 0x8002ab <myrobot+0x1>
     22a:	20 93 aa 02 	sts	0x02AA, r18	; 0x8002aa <myrobot>
        myrobot.lspeed = (MEDIUM_SPEED - (int)controlSignal);
     22e:	c5 01       	movw	r24, r10
     230:	86 1b       	sub	r24, r22
     232:	97 0b       	sbc	r25, r23
     234:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <myrobot+0x3>
     238:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <myrobot+0x2>

        if (myrobot.rspeed > 100)
     23c:	25 36       	cpi	r18, 0x65	; 101
     23e:	31 05       	cpc	r19, r1
     240:	c4 f0       	brlt	.+48     	; 0x272 <Navig+0x182>
            myrobot.rspeed = 100;
     242:	10 93 ab 02 	sts	0x02AB, r17	; 0x8002ab <myrobot+0x1>
     246:	00 93 aa 02 	sts	0x02AA, r16	; 0x8002aa <myrobot>
        else if (myrobot.rspeed < -100)
            myrobot.rspeed = -100;

        if (myrobot.lspeed > 100)
     24a:	85 36       	cpi	r24, 0x65	; 101
     24c:	91 05       	cpc	r25, r1
     24e:	cc f0       	brlt	.+50     	; 0x282 <Navig+0x192>
            myrobot.lspeed = 100;
     250:	10 93 ad 02 	sts	0x02AD, r17	; 0x8002ad <myrobot+0x3>
     254:	00 93 ac 02 	sts	0x02AC, r16	; 0x8002ac <myrobot+0x2>
            myrobot.lspeed = -100;


        // cprintf("rspeed: %d, lspeed: %d \r\n", myrobot.rspeed, myrobot.lspeed);
       
        OSTimeDlyHMSM(0, 0, 0, 10);                /* Task period ~ 500 ms                  */
     258:	2a e0       	ldi	r18, 0x0A	; 10
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	0e 94 3b 06 	call	0xc76	; 0xc76 <OSTimeDlyHMSM>
    double Kd = 0;     // Derivative gain



    for (;;)
    {
     266:	4f cf       	rjmp	.-354    	; 0x106 <Navig+0x16>

        // Limit the integral term to prevent excessive accumulation
        if (myrobot.integral > MAX_INTEGRAL_TERM)
            myrobot.integral = MAX_INTEGRAL_TERM;
        else if (myrobot.integral < -MAX_INTEGRAL_TERM)
            myrobot.integral = -MAX_INTEGRAL_TERM;
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	90 e5       	ldi	r25, 0x50	; 80
     26c:	a3 e4       	ldi	r26, 0x43	; 67
     26e:	b7 ec       	ldi	r27, 0xC7	; 199
     270:	79 cf       	rjmp	.-270    	; 0x164 <Navig+0x74>
        myrobot.rspeed = (MEDIUM_SPEED + (int)controlSignal);
        myrobot.lspeed = (MEDIUM_SPEED - (int)controlSignal);

        if (myrobot.rspeed > 100)
            myrobot.rspeed = 100;
        else if (myrobot.rspeed < -100)
     272:	2c 39       	cpi	r18, 0x9C	; 156
     274:	3f 4f       	sbci	r19, 0xFF	; 255
     276:	4c f7       	brge	.-46     	; 0x24a <Navig+0x15a>
            myrobot.rspeed = -100;
     278:	d0 93 ab 02 	sts	0x02AB, r29	; 0x8002ab <myrobot+0x1>
     27c:	c0 93 aa 02 	sts	0x02AA, r28	; 0x8002aa <myrobot>
     280:	e4 cf       	rjmp	.-56     	; 0x24a <Navig+0x15a>

        if (myrobot.lspeed > 100)
            myrobot.lspeed = 100;
        else if (myrobot.lspeed < -100)
     282:	8c 39       	cpi	r24, 0x9C	; 156
     284:	9f 4f       	sbci	r25, 0xFF	; 255
     286:	44 f7       	brge	.-48     	; 0x258 <Navig+0x168>
            myrobot.lspeed = -100;
     288:	d0 93 ad 02 	sts	0x02AD, r29	; 0x8002ad <myrobot+0x3>
     28c:	c0 93 ac 02 	sts	0x02AC, r28	; 0x8002ac <myrobot+0x2>
     290:	e3 cf       	rjmp	.-58     	; 0x258 <Navig+0x168>

00000292 <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here           */
void TaskStart( void *data )
{
    OS_ticks_init();                                        /* enable RTOS timer tick        */
     292:	0e 94 3c 08 	call	0x1078	; 0x1078 <OS_ticks_init>

    OSTaskCreate(CheckCollision,                            /* Task function                 */
     296:	25 e0       	ldi	r18, 0x05	; 5
     298:	49 ea       	ldi	r20, 0xA9	; 169
     29a:	52 e0       	ldi	r21, 0x02	; 2
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	84 e5       	ldi	r24, 0x54	; 84
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&ChkCollideStk[TASK_STK_SZ - 1],    /* stack allocated to task       */
                TASK_CHKCOLLIDE_PRIO);                      /* priority of task              */

    OSTaskCreate(CntrlMotors,                               /* Task function                 */
     2a8:	23 e0       	ldi	r18, 0x03	; 3
     2aa:	46 e3       	ldi	r20, 0x36	; 54
     2ac:	53 e0       	ldi	r21, 0x03	; 3
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	86 e6       	ldi	r24, 0x66	; 102
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&CtrlmotorStk[TASK_STK_SZ - 1],     /* stack allocated to task       */
                TASK_CTRLMOTOR_PRIO);                       /* priority of task              */

    OSTaskCreate(Navig,                                     /* Task function                 */
     2ba:	21 e0       	ldi	r18, 0x01	; 1
     2bc:	46 eb       	ldi	r20, 0xB6	; 182
     2be:	54 e0       	ldi	r21, 0x04	; 4
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	88 e7       	ldi	r24, 0x78	; 120
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&NavigStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_NAVIG_PRIO);                           /* priority of task              */

 OSTaskCreate(TestLineSensor,                                     /* Task function                 */
     2cc:	24 e0       	ldi	r18, 0x04	; 4
     2ce:	46 e3       	ldi	r20, 0x36	; 54
     2d0:	54 e0       	ldi	r21, 0x04	; 4
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	83 e5       	ldi	r24, 0x53	; 83
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <OSTaskCreate>
                (void *)0,                                  /* nothing passed to task        */
                (void *)&LineStk[TASK_STK_SZ - 1],         /* stack allocated to task       */
                TASK_LINE_PRIO); 
    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	45 e0       	ldi	r20, 0x05	; 5
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	0e 94 3b 06 	call	0xc76	; 0xc76 <OSTimeDlyHMSM>
     2ec:	f8 cf       	rjmp	.-16     	; 0x2de <TaskStart+0x4c>

000002ee <normalizeSensorReading>:
    }
}


int normalizeSensorReading (int sensorReading)
{
     2ee:	88 30       	cpi	r24, 0x08	; 8
     2f0:	91 05       	cpc	r25, r1
     2f2:	40 f4       	brcc	.+16     	; 0x304 <normalizeSensorReading+0x16>
     2f4:	88 0f       	add	r24, r24
     2f6:	99 1f       	adc	r25, r25
     2f8:	fc 01       	movw	r30, r24
     2fa:	e8 5f       	subi	r30, 0xF8	; 248
     2fc:	fd 4f       	sbci	r31, 0xFD	; 253
     2fe:	80 81       	ld	r24, Z
     300:	91 81       	ldd	r25, Z+1	; 0x01
     302:	08 95       	ret
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	80 e0       	ldi	r24, 0x00	; 0
        default: 
            return 0;
        
    }

}
     308:	08 95       	ret

0000030a <turnRight>:
}


/*------Navigation controllers utils----------*/
void turnRight(void *data){
    myrobot.rspeed   = -MEDIUM_SPEED;       
     30a:	ea ea       	ldi	r30, 0xAA	; 170
     30c:	f2 e0       	ldi	r31, 0x02	; 2
     30e:	8e ec       	ldi	r24, 0xCE	; 206
     310:	9f ef       	ldi	r25, 0xFF	; 255
     312:	91 83       	std	Z+1, r25	; 0x01
     314:	80 83       	st	Z, r24
    myrobot.lspeed   = MEDIUM_SPEED;
     316:	82 e3       	ldi	r24, 0x32	; 50
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	93 83       	std	Z+3, r25	; 0x03
     31c:	82 83       	std	Z+2, r24	; 0x02
}
     31e:	08 95       	ret

00000320 <turnLeft>:

void turnLeft(void *data){
    myrobot.rspeed   = MEDIUM_SPEED;       
     320:	ea ea       	ldi	r30, 0xAA	; 170
     322:	f2 e0       	ldi	r31, 0x02	; 2
     324:	82 e3       	ldi	r24, 0x32	; 50
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
    myrobot.lspeed   = -MEDIUM_SPEED;
     32c:	8e ec       	ldi	r24, 0xCE	; 206
     32e:	9f ef       	ldi	r25, 0xFF	; 255
     330:	93 83       	std	Z+3, r25	; 0x03
     332:	82 83       	std	Z+2, r24	; 0x02
}
     334:	08 95       	ret

00000336 <goStraight>:

void goStraight(void *data){
    myrobot.rspeed   = HIGH_SPEED;       
     336:	ea ea       	ldi	r30, 0xAA	; 170
     338:	f2 e0       	ldi	r31, 0x02	; 2
     33a:	80 e5       	ldi	r24, 0x50	; 80
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	91 83       	std	Z+1, r25	; 0x01
     340:	80 83       	st	Z, r24
    myrobot.lspeed   = HIGH_SPEED;
     342:	93 83       	std	Z+3, r25	; 0x03
     344:	82 83       	std	Z+2, r24	; 0x02
}
     346:	08 95       	ret

00000348 <goBackword>:

void goBackword(void *data){
    myrobot.rspeed   = -HIGH_SPEED;       
     348:	ea ea       	ldi	r30, 0xAA	; 170
     34a:	f2 e0       	ldi	r31, 0x02	; 2
     34c:	80 eb       	ldi	r24, 0xB0	; 176
     34e:	9f ef       	ldi	r25, 0xFF	; 255
     350:	91 83       	std	Z+1, r25	; 0x01
     352:	80 83       	st	Z, r24
    myrobot.lspeed   = -HIGH_SPEED;
     354:	93 83       	std	Z+3, r25	; 0x03
     356:	82 83       	std	Z+2, r24	; 0x02
}
     358:	08 95       	ret

0000035a <OSStartHighRdy>:
     35a:	00 91 b8 04 	lds	r16, 0x04B8	; 0x8004b8 <OSRunning>
     35e:	03 95       	inc	r16
     360:	00 93 b8 04 	sts	0x04B8, r16	; 0x8004b8 <OSRunning>
     364:	e0 91 c8 04 	lds	r30, 0x04C8	; 0x8004c8 <OSTCBHighRdy>
     368:	f0 91 c9 04 	lds	r31, 0x04C9	; 0x8004c9 <OSTCBHighRdy+0x1>
     36c:	c1 91       	ld	r28, Z+
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	d1 91       	ld	r29, Z+
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f 91       	pop	r16
     376:	0f bf       	out	0x3f, r16	; 63
     378:	ff 91       	pop	r31
     37a:	ef 91       	pop	r30
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	bf 91       	pop	r27
     382:	af 91       	pop	r26
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	7f 91       	pop	r23
     38a:	6f 91       	pop	r22
     38c:	5f 91       	pop	r21
     38e:	4f 91       	pop	r20
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	9f 90       	pop	r9
     3a6:	8f 90       	pop	r8
     3a8:	7f 90       	pop	r7
     3aa:	6f 90       	pop	r6
     3ac:	5f 90       	pop	r5
     3ae:	4f 90       	pop	r4
     3b0:	3f 90       	pop	r3
     3b2:	2f 90       	pop	r2
     3b4:	1f 90       	pop	r1
     3b6:	0f 90       	pop	r0
     3b8:	08 95       	ret

000003ba <OSCtxSw>:
     3ba:	0f 92       	push	r0
     3bc:	1f 92       	push	r1
     3be:	2f 92       	push	r2
     3c0:	3f 92       	push	r3
     3c2:	4f 92       	push	r4
     3c4:	5f 92       	push	r5
     3c6:	6f 92       	push	r6
     3c8:	7f 92       	push	r7
     3ca:	8f 92       	push	r8
     3cc:	9f 92       	push	r9
     3ce:	af 92       	push	r10
     3d0:	bf 92       	push	r11
     3d2:	cf 92       	push	r12
     3d4:	df 92       	push	r13
     3d6:	ef 92       	push	r14
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	2f 93       	push	r18
     3e0:	3f 93       	push	r19
     3e2:	4f 93       	push	r20
     3e4:	5f 93       	push	r21
     3e6:	6f 93       	push	r22
     3e8:	7f 93       	push	r23
     3ea:	8f 93       	push	r24
     3ec:	9f 93       	push	r25
     3ee:	af 93       	push	r26
     3f0:	bf 93       	push	r27
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	ef 93       	push	r30
     3f8:	ff 93       	push	r31
     3fa:	0f b7       	in	r16, 0x3f	; 63
     3fc:	0f 93       	push	r16
     3fe:	e0 91 d0 04 	lds	r30, 0x04D0	; 0x8004d0 <OSTCBCur>
     402:	f0 91 d1 04 	lds	r31, 0x04D1	; 0x8004d1 <OSTCBCur+0x1>
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	c1 93       	st	Z+, r28
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	d1 93       	st	Z+, r29
     40e:	00 91 bd 04 	lds	r16, 0x04BD	; 0x8004bd <OSPrioHighRdy>
     412:	00 93 be 04 	sts	0x04BE, r16	; 0x8004be <OSPrioCur>
     416:	e0 91 c8 04 	lds	r30, 0x04C8	; 0x8004c8 <OSTCBHighRdy>
     41a:	f0 91 c9 04 	lds	r31, 0x04C9	; 0x8004c9 <OSTCBHighRdy+0x1>
     41e:	e0 93 d0 04 	sts	0x04D0, r30	; 0x8004d0 <OSTCBCur>
     422:	f0 93 d1 04 	sts	0x04D1, r31	; 0x8004d1 <OSTCBCur+0x1>
     426:	c1 91       	ld	r28, Z+
     428:	cd bf       	out	0x3d, r28	; 61
     42a:	d1 91       	ld	r29, Z+
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	0f 91       	pop	r16
     430:	0f bf       	out	0x3f, r16	; 63
     432:	ff 91       	pop	r31
     434:	ef 91       	pop	r30
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	bf 91       	pop	r27
     43c:	af 91       	pop	r26
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	7f 91       	pop	r23
     444:	6f 91       	pop	r22
     446:	5f 91       	pop	r21
     448:	4f 91       	pop	r20
     44a:	3f 91       	pop	r19
     44c:	2f 91       	pop	r18
     44e:	1f 91       	pop	r17
     450:	0f 91       	pop	r16
     452:	ff 90       	pop	r15
     454:	ef 90       	pop	r14
     456:	df 90       	pop	r13
     458:	cf 90       	pop	r12
     45a:	bf 90       	pop	r11
     45c:	af 90       	pop	r10
     45e:	9f 90       	pop	r9
     460:	8f 90       	pop	r8
     462:	7f 90       	pop	r7
     464:	6f 90       	pop	r6
     466:	5f 90       	pop	r5
     468:	4f 90       	pop	r4
     46a:	3f 90       	pop	r3
     46c:	2f 90       	pop	r2
     46e:	1f 90       	pop	r1
     470:	0f 90       	pop	r0
     472:	08 95       	ret

00000474 <OSIntCtxSw>:
     474:	00 91 bd 04 	lds	r16, 0x04BD	; 0x8004bd <OSPrioHighRdy>
     478:	00 93 be 04 	sts	0x04BE, r16	; 0x8004be <OSPrioCur>
     47c:	e0 91 c8 04 	lds	r30, 0x04C8	; 0x8004c8 <OSTCBHighRdy>
     480:	f0 91 c9 04 	lds	r31, 0x04C9	; 0x8004c9 <OSTCBHighRdy+0x1>
     484:	e0 93 d0 04 	sts	0x04D0, r30	; 0x8004d0 <OSTCBCur>
     488:	f0 93 d1 04 	sts	0x04D1, r31	; 0x8004d1 <OSTCBCur+0x1>
     48c:	c1 91       	ld	r28, Z+
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	d1 91       	ld	r29, Z+
     492:	de bf       	out	0x3e, r29	; 62
     494:	0f 91       	pop	r16
     496:	0f bf       	out	0x3f, r16	; 63
     498:	ff 91       	pop	r31
     49a:	ef 91       	pop	r30
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	bf 91       	pop	r27
     4a2:	af 91       	pop	r26
     4a4:	9f 91       	pop	r25
     4a6:	8f 91       	pop	r24
     4a8:	7f 91       	pop	r23
     4aa:	6f 91       	pop	r22
     4ac:	5f 91       	pop	r21
     4ae:	4f 91       	pop	r20
     4b0:	3f 91       	pop	r19
     4b2:	2f 91       	pop	r18
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	bf 90       	pop	r11
     4c2:	af 90       	pop	r10
     4c4:	9f 90       	pop	r9
     4c6:	8f 90       	pop	r8
     4c8:	7f 90       	pop	r7
     4ca:	6f 90       	pop	r6
     4cc:	5f 90       	pop	r5
     4ce:	4f 90       	pop	r4
     4d0:	3f 90       	pop	r3
     4d2:	2f 90       	pop	r2
     4d4:	1f 90       	pop	r1
     4d6:	0f 90       	pop	r0
     4d8:	08 95       	ret

000004da <OSTickISR>:
     4da:	0f 92       	push	r0
     4dc:	1f 92       	push	r1
     4de:	2f 92       	push	r2
     4e0:	3f 92       	push	r3
     4e2:	4f 92       	push	r4
     4e4:	5f 92       	push	r5
     4e6:	6f 92       	push	r6
     4e8:	7f 92       	push	r7
     4ea:	8f 92       	push	r8
     4ec:	9f 92       	push	r9
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	2f 93       	push	r18
     500:	3f 93       	push	r19
     502:	4f 93       	push	r20
     504:	5f 93       	push	r21
     506:	6f 93       	push	r22
     508:	7f 93       	push	r23
     50a:	8f 93       	push	r24
     50c:	9f 93       	push	r25
     50e:	af 93       	push	r26
     510:	bf 93       	push	r27
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	ef 93       	push	r30
     518:	ff 93       	push	r31
     51a:	0f b7       	in	r16, 0x3f	; 63
     51c:	00 68       	ori	r16, 0x80	; 128
     51e:	0f 93       	push	r16
     520:	00 91 cf 04 	lds	r16, 0x04CF	; 0x8004cf <OSIntNesting>
     524:	03 95       	inc	r16
     526:	00 93 cf 04 	sts	0x04CF, r16	; 0x8004cf <OSIntNesting>
     52a:	01 30       	cpi	r16, 0x01	; 1
     52c:	41 f4       	brne	.+16     	; 0x53e <_not_first_int>
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	e0 91 d0 04 	lds	r30, 0x04D0	; 0x8004d0 <OSTCBCur>
     536:	f0 91 d1 04 	lds	r31, 0x04D1	; 0x8004d1 <OSTCBCur+0x1>
     53a:	c1 93       	st	Z+, r28
     53c:	d1 93       	st	Z+, r29

0000053e <_not_first_int>:
     53e:	04 e6       	ldi	r16, 0x64	; 100
     540:	06 bd       	out	0x26, r16	; 38
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	1f 2e       	mov	r1, r31
     546:	78 94       	sei
     548:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <OSTimeTick>
     54c:	00 00       	nop
     54e:	0e 94 43 03 	call	0x686	; 0x686 <OSIntExit>
     552:	0f 91       	pop	r16
     554:	0f bf       	out	0x3f, r16	; 63
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	bf 91       	pop	r27
     560:	af 91       	pop	r26
     562:	9f 91       	pop	r25
     564:	8f 91       	pop	r24
     566:	7f 91       	pop	r23
     568:	6f 91       	pop	r22
     56a:	5f 91       	pop	r21
     56c:	4f 91       	pop	r20
     56e:	3f 91       	pop	r19
     570:	2f 91       	pop	r18
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	df 90       	pop	r13
     57c:	cf 90       	pop	r12
     57e:	bf 90       	pop	r11
     580:	af 90       	pop	r10
     582:	9f 90       	pop	r9
     584:	8f 90       	pop	r8
     586:	7f 90       	pop	r7
     588:	6f 90       	pop	r6
     58a:	5f 90       	pop	r5
     58c:	4f 90       	pop	r4
     58e:	3f 90       	pop	r3
     590:	2f 90       	pop	r2
     592:	1f 90       	pop	r1
     594:	0f 90       	pop	r0
     596:	08 95       	ret

00000598 <OSTaskStkInit>:
     598:	fa 01       	movw	r30, r20
     59a:	80 83       	st	Z, r24
     59c:	31 97       	sbiw	r30, 0x01	; 1
     59e:	90 83       	st	Z, r25
     5a0:	31 97       	sbiw	r30, 0x01	; 1
     5a2:	10 82       	st	Z, r1
     5a4:	31 97       	sbiw	r30, 0x01	; 1
     5a6:	10 82       	st	Z, r1
     5a8:	31 97       	sbiw	r30, 0x01	; 1
     5aa:	10 82       	st	Z, r1
     5ac:	31 97       	sbiw	r30, 0x01	; 1
     5ae:	10 82       	st	Z, r1
     5b0:	31 97       	sbiw	r30, 0x01	; 1
     5b2:	10 82       	st	Z, r1
     5b4:	31 97       	sbiw	r30, 0x01	; 1
     5b6:	10 82       	st	Z, r1
     5b8:	31 97       	sbiw	r30, 0x01	; 1
     5ba:	10 82       	st	Z, r1
     5bc:	31 97       	sbiw	r30, 0x01	; 1
     5be:	10 82       	st	Z, r1
     5c0:	31 97       	sbiw	r30, 0x01	; 1
     5c2:	10 82       	st	Z, r1
     5c4:	31 97       	sbiw	r30, 0x01	; 1
     5c6:	10 82       	st	Z, r1
     5c8:	31 97       	sbiw	r30, 0x01	; 1
     5ca:	10 82       	st	Z, r1
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	10 82       	st	Z, r1
     5d0:	31 97       	sbiw	r30, 0x01	; 1
     5d2:	10 82       	st	Z, r1
     5d4:	31 97       	sbiw	r30, 0x01	; 1
     5d6:	10 82       	st	Z, r1
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	10 82       	st	Z, r1
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	10 82       	st	Z, r1
     5e0:	31 97       	sbiw	r30, 0x01	; 1
     5e2:	10 82       	st	Z, r1
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	10 82       	st	Z, r1
     5e8:	31 97       	sbiw	r30, 0x01	; 1
     5ea:	10 82       	st	Z, r1
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	10 82       	st	Z, r1
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	10 82       	st	Z, r1
     5f4:	31 97       	sbiw	r30, 0x01	; 1
     5f6:	10 82       	st	Z, r1
     5f8:	31 97       	sbiw	r30, 0x01	; 1
     5fa:	10 82       	st	Z, r1
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	10 82       	st	Z, r1
     600:	31 97       	sbiw	r30, 0x01	; 1
     602:	60 83       	st	Z, r22
     604:	31 97       	sbiw	r30, 0x01	; 1
     606:	70 83       	st	Z, r23
     608:	31 97       	sbiw	r30, 0x01	; 1
     60a:	10 82       	st	Z, r1
     60c:	31 97       	sbiw	r30, 0x01	; 1
     60e:	10 82       	st	Z, r1
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	10 82       	st	Z, r1
     614:	31 97       	sbiw	r30, 0x01	; 1
     616:	10 82       	st	Z, r1
     618:	31 97       	sbiw	r30, 0x01	; 1
     61a:	10 82       	st	Z, r1
     61c:	31 97       	sbiw	r30, 0x01	; 1
     61e:	10 82       	st	Z, r1
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	80 e8       	ldi	r24, 0x80	; 128
     624:	80 83       	st	Z, r24
     626:	ca 01       	movw	r24, r20
     628:	83 97       	sbiw	r24, 0x23	; 35
     62a:	08 95       	ret

0000062c <OSTaskCreateHook>:
     62c:	08 95       	ret

0000062e <OSTaskDelHook>:
     62e:	08 95       	ret

00000630 <OSTaskSwHook>:
     630:	08 95       	ret

00000632 <OSTaskStatHook>:
     632:	08 95       	ret

00000634 <OSTimeTickHook>:
     634:	08 95       	ret

00000636 <OSInitHookBegin>:
     636:	08 95       	ret

00000638 <OSInitHookEnd>:
     638:	08 95       	ret

0000063a <OSTaskIdleHook>:
     63a:	08 95       	ret

0000063c <OSTCBInitHook>:
     63c:	08 95       	ret

0000063e <OS_TaskIdle>:
     63e:	f8 94       	cli
     640:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <OSIdleCtr>
     644:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <OSIdleCtr+0x1>
     648:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <OSIdleCtr+0x2>
     64c:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <OSIdleCtr+0x3>
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	a1 1d       	adc	r26, r1
     654:	b1 1d       	adc	r27, r1
     656:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <OSIdleCtr>
     65a:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <OSIdleCtr+0x1>
     65e:	a0 93 bb 04 	sts	0x04BB, r26	; 0x8004bb <OSIdleCtr+0x2>
     662:	b0 93 bc 04 	sts	0x04BC, r27	; 0x8004bc <OSIdleCtr+0x3>
     666:	78 94       	sei
     668:	0e 94 1d 03 	call	0x63a	; 0x63a <OSTaskIdleHook>
     66c:	e8 cf       	rjmp	.-48     	; 0x63e <OS_TaskIdle>

0000066e <OSIntEnter>:
     66e:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <OSRunning>
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	39 f4       	brne	.+14     	; 0x684 <OSIntEnter+0x16>
     676:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <OSIntNesting>
     67a:	8f 3f       	cpi	r24, 0xFF	; 255
     67c:	19 f0       	breq	.+6      	; 0x684 <OSIntEnter+0x16>
     67e:	8f 5f       	subi	r24, 0xFF	; 255
     680:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <OSIntNesting>
     684:	08 95       	ret

00000686 <OSIntExit>:
     686:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <OSRunning>
     68a:	81 30       	cpi	r24, 0x01	; 1
     68c:	09 f0       	breq	.+2      	; 0x690 <OSIntExit+0xa>
     68e:	4c c0       	rjmp	.+152    	; 0x728 <OSIntExit+0xa2>
     690:	f8 94       	cli
     692:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <OSIntNesting>
     696:	88 23       	and	r24, r24
     698:	19 f0       	breq	.+6      	; 0x6a0 <OSIntExit+0x1a>
     69a:	81 50       	subi	r24, 0x01	; 1
     69c:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <OSIntNesting>
     6a0:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <OSIntNesting>
     6a4:	81 11       	cpse	r24, r1
     6a6:	3f c0       	rjmp	.+126    	; 0x726 <OSIntExit+0xa0>
     6a8:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <OSLockNesting>
     6ac:	81 11       	cpse	r24, r1
     6ae:	3b c0       	rjmp	.+118    	; 0x726 <OSIntExit+0xa0>
     6b0:	e0 91 ca 04 	lds	r30, 0x04CA	; 0x8004ca <OSRdyGrp>
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	e0 50       	subi	r30, 0x00	; 0
     6b8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ba:	e0 81       	ld	r30, Z
     6bc:	e0 93 ce 04 	sts	0x04CE, r30	; 0x8004ce <OSIntExitY>
     6c0:	ae 2f       	mov	r26, r30
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	a5 53       	subi	r26, 0x35	; 53
     6c6:	bb 4f       	sbci	r27, 0xFB	; 251
     6c8:	ac 91       	ld	r26, X
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	a0 50       	subi	r26, 0x00	; 0
     6ce:	bf 4f       	sbci	r27, 0xFF	; 255
     6d0:	ee 0f       	add	r30, r30
     6d2:	ee 0f       	add	r30, r30
     6d4:	ee 0f       	add	r30, r30
     6d6:	8c 91       	ld	r24, X
     6d8:	e8 0f       	add	r30, r24
     6da:	e0 93 bd 04 	sts	0x04BD, r30	; 0x8004bd <OSPrioHighRdy>
     6de:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <OSPrioCur>
     6e2:	e8 17       	cp	r30, r24
     6e4:	01 f1       	breq	.+64     	; 0x726 <OSIntExit+0xa0>
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	ef 5e       	subi	r30, 0xEF	; 239
     6ee:	f9 4f       	sbci	r31, 0xF9	; 249
     6f0:	80 81       	ld	r24, Z
     6f2:	91 81       	ldd	r25, Z+1	; 0x01
     6f4:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <OSTCBHighRdy+0x1>
     6f8:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <OSTCBHighRdy>
     6fc:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <OSCtxSwCtr>
     700:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <OSCtxSwCtr+0x1>
     704:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <OSCtxSwCtr+0x2>
     708:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <OSCtxSwCtr+0x3>
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	a1 1d       	adc	r26, r1
     710:	b1 1d       	adc	r27, r1
     712:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <OSCtxSwCtr>
     716:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <OSCtxSwCtr+0x1>
     71a:	a0 93 c3 04 	sts	0x04C3, r26	; 0x8004c3 <OSCtxSwCtr+0x2>
     71e:	b0 93 c4 04 	sts	0x04C4, r27	; 0x8004c4 <OSCtxSwCtr+0x3>
     722:	0e 94 3a 02 	call	0x474	; 0x474 <OSIntCtxSw>
     726:	78 94       	sei
     728:	08 95       	ret

0000072a <OSSchedLock>:
     72a:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <OSRunning>
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	49 f4       	brne	.+18     	; 0x744 <OSSchedLock+0x1a>
     732:	f8 94       	cli
     734:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <OSLockNesting>
     738:	8f 3f       	cpi	r24, 0xFF	; 255
     73a:	19 f0       	breq	.+6      	; 0x742 <OSSchedLock+0x18>
     73c:	8f 5f       	subi	r24, 0xFF	; 255
     73e:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <OSLockNesting>
     742:	78 94       	sei
     744:	08 95       	ret

00000746 <OSStart>:
     746:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <OSRunning>
     74a:	81 11       	cpse	r24, r1
     74c:	28 c0       	rjmp	.+80     	; 0x79e <OSStart+0x58>
     74e:	e0 91 ca 04 	lds	r30, 0x04CA	; 0x8004ca <OSRdyGrp>
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	e0 50       	subi	r30, 0x00	; 0
     756:	ff 4f       	sbci	r31, 0xFF	; 255
     758:	e0 81       	ld	r30, Z
     75a:	ae 2f       	mov	r26, r30
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	a5 53       	subi	r26, 0x35	; 53
     760:	bb 4f       	sbci	r27, 0xFB	; 251
     762:	ac 91       	ld	r26, X
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	a0 50       	subi	r26, 0x00	; 0
     768:	bf 4f       	sbci	r27, 0xFF	; 255
     76a:	ee 0f       	add	r30, r30
     76c:	ee 0f       	add	r30, r30
     76e:	ee 0f       	add	r30, r30
     770:	8c 91       	ld	r24, X
     772:	e8 0f       	add	r30, r24
     774:	e0 93 bd 04 	sts	0x04BD, r30	; 0x8004bd <OSPrioHighRdy>
     778:	e0 93 be 04 	sts	0x04BE, r30	; 0x8004be <OSPrioCur>
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	ef 5e       	subi	r30, 0xEF	; 239
     784:	f9 4f       	sbci	r31, 0xF9	; 249
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <OSTCBHighRdy+0x1>
     78e:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <OSTCBHighRdy>
     792:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <OSTCBCur+0x1>
     796:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <OSTCBCur>
     79a:	0c 94 ad 01 	jmp	0x35a	; 0x35a <OSStartHighRdy>
     79e:	08 95       	ret

000007a0 <OSTimeTick>:
     7a0:	0e 94 1a 03 	call	0x634	; 0x634 <OSTimeTickHook>
     7a4:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <OSRunning>
     7a8:	e0 91 bf 04 	lds	r30, 0x04BF	; 0x8004bf <OSTCBList>
     7ac:	f0 91 c0 04 	lds	r31, 0x04C0	; 0x8004c0 <OSTCBList+0x1>
     7b0:	21 e0       	ldi	r18, 0x01	; 1
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	01 f1       	breq	.+64     	; 0x7f8 <OSTimeTick+0x58>
     7b8:	08 95       	ret
     7ba:	f8 94       	cli
     7bc:	86 81       	ldd	r24, Z+6	; 0x06
     7be:	97 81       	ldd	r25, Z+7	; 0x07
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	b1 f0       	breq	.+44     	; 0x7f0 <OSTimeTick+0x50>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	97 83       	std	Z+7, r25	; 0x07
     7c8:	86 83       	std	Z+6, r24	; 0x06
     7ca:	89 2b       	or	r24, r25
     7cc:	89 f4       	brne	.+34     	; 0x7f0 <OSTimeTick+0x50>
     7ce:	80 85       	ldd	r24, Z+8	; 0x08
     7d0:	83 fd       	sbrc	r24, 3
     7d2:	16 c0       	rjmp	.+44     	; 0x800 <OSTimeTick+0x60>
     7d4:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <OSRdyGrp>
     7d8:	95 85       	ldd	r25, Z+13	; 0x0d
     7da:	89 2b       	or	r24, r25
     7dc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <OSRdyGrp>
     7e0:	a3 85       	ldd	r26, Z+11	; 0x0b
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	a5 53       	subi	r26, 0x35	; 53
     7e6:	bb 4f       	sbci	r27, 0xFB	; 251
     7e8:	8c 91       	ld	r24, X
     7ea:	94 85       	ldd	r25, Z+12	; 0x0c
     7ec:	89 2b       	or	r24, r25
     7ee:	8c 93       	st	X, r24
     7f0:	02 80       	ldd	r0, Z+2	; 0x02
     7f2:	f3 81       	ldd	r31, Z+3	; 0x03
     7f4:	e0 2d       	mov	r30, r0
     7f6:	78 94       	sei
     7f8:	81 85       	ldd	r24, Z+9	; 0x09
     7fa:	80 31       	cpi	r24, 0x10	; 16
     7fc:	f1 f6       	brne	.-68     	; 0x7ba <OSTimeTick+0x1a>
     7fe:	dc cf       	rjmp	.-72     	; 0x7b8 <OSTimeTick+0x18>
     800:	37 83       	std	Z+7, r19	; 0x07
     802:	26 83       	std	Z+6, r18	; 0x06
     804:	f5 cf       	rjmp	.-22     	; 0x7f0 <OSTimeTick+0x50>

00000806 <OSVersion>:
     806:	8c ef       	ldi	r24, 0xFC	; 252
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	08 95       	ret

0000080c <OS_Dummy>:
     80c:	08 95       	ret

0000080e <OS_Sched>:
     80e:	f8 94       	cli
     810:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <OSIntNesting>
     814:	81 11       	cpse	r24, r1
     816:	3d c0       	rjmp	.+122    	; 0x892 <OS_Sched+0x84>
     818:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <OSLockNesting>
     81c:	81 11       	cpse	r24, r1
     81e:	39 c0       	rjmp	.+114    	; 0x892 <OS_Sched+0x84>
     820:	e0 91 ca 04 	lds	r30, 0x04CA	; 0x8004ca <OSRdyGrp>
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	e0 50       	subi	r30, 0x00	; 0
     828:	ff 4f       	sbci	r31, 0xFF	; 255
     82a:	e0 81       	ld	r30, Z
     82c:	ae 2f       	mov	r26, r30
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	a5 53       	subi	r26, 0x35	; 53
     832:	bb 4f       	sbci	r27, 0xFB	; 251
     834:	ac 91       	ld	r26, X
     836:	b0 e0       	ldi	r27, 0x00	; 0
     838:	a0 50       	subi	r26, 0x00	; 0
     83a:	bf 4f       	sbci	r27, 0xFF	; 255
     83c:	ee 0f       	add	r30, r30
     83e:	ee 0f       	add	r30, r30
     840:	ee 0f       	add	r30, r30
     842:	8c 91       	ld	r24, X
     844:	e8 0f       	add	r30, r24
     846:	e0 93 bd 04 	sts	0x04BD, r30	; 0x8004bd <OSPrioHighRdy>
     84a:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <OSPrioCur>
     84e:	e8 17       	cp	r30, r24
     850:	01 f1       	breq	.+64     	; 0x892 <OS_Sched+0x84>
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	ef 5e       	subi	r30, 0xEF	; 239
     85a:	f9 4f       	sbci	r31, 0xF9	; 249
     85c:	80 81       	ld	r24, Z
     85e:	91 81       	ldd	r25, Z+1	; 0x01
     860:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <OSTCBHighRdy+0x1>
     864:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <OSTCBHighRdy>
     868:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <OSCtxSwCtr>
     86c:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <OSCtxSwCtr+0x1>
     870:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <OSCtxSwCtr+0x2>
     874:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <OSCtxSwCtr+0x3>
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	a1 1d       	adc	r26, r1
     87c:	b1 1d       	adc	r27, r1
     87e:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <OSCtxSwCtr>
     882:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <OSCtxSwCtr+0x1>
     886:	a0 93 c3 04 	sts	0x04C3, r26	; 0x8004c3 <OSCtxSwCtr+0x2>
     88a:	b0 93 c4 04 	sts	0x04C4, r27	; 0x8004c4 <OSCtxSwCtr+0x3>
     88e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <OSCtxSw>
     892:	78 94       	sei
     894:	08 95       	ret

00000896 <OSSchedUnlock>:
     896:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <OSRunning>
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	91 f4       	brne	.+36     	; 0x8c2 <OSSchedUnlock+0x2c>
     89e:	f8 94       	cli
     8a0:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <OSLockNesting>
     8a4:	88 23       	and	r24, r24
     8a6:	61 f0       	breq	.+24     	; 0x8c0 <OSSchedUnlock+0x2a>
     8a8:	81 50       	subi	r24, 0x01	; 1
     8aa:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <OSLockNesting>
     8ae:	81 11       	cpse	r24, r1
     8b0:	07 c0       	rjmp	.+14     	; 0x8c0 <OSSchedUnlock+0x2a>
     8b2:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <OSIntNesting>
     8b6:	81 11       	cpse	r24, r1
     8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <OSSchedUnlock+0x2a>
     8ba:	78 94       	sei
     8bc:	0c 94 07 04 	jmp	0x80e	; 0x80e <OS_Sched>
     8c0:	78 94       	sei
     8c2:	08 95       	ret

000008c4 <OSTimeDly.part.0>:
     8c4:	ac 01       	movw	r20, r24
     8c6:	f8 94       	cli
     8c8:	a0 91 d0 04 	lds	r26, 0x04D0	; 0x8004d0 <OSTCBCur>
     8cc:	b0 91 d1 04 	lds	r27, 0x04D1	; 0x8004d1 <OSTCBCur+0x1>
     8d0:	1b 96       	adiw	r26, 0x0b	; 11
     8d2:	ec 91       	ld	r30, X
     8d4:	1b 97       	sbiw	r26, 0x0b	; 11
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	1c 96       	adiw	r26, 0x0c	; 12
     8da:	9c 91       	ld	r25, X
     8dc:	1c 97       	sbiw	r26, 0x0c	; 12
     8de:	90 95       	com	r25
     8e0:	e5 53       	subi	r30, 0x35	; 53
     8e2:	fb 4f       	sbci	r31, 0xFB	; 251
     8e4:	80 81       	ld	r24, Z
     8e6:	98 23       	and	r25, r24
     8e8:	90 83       	st	Z, r25
     8ea:	91 11       	cpse	r25, r1
     8ec:	0a c0       	rjmp	.+20     	; 0x902 <__stack+0x3>
     8ee:	1d 96       	adiw	r26, 0x0d	; 13
     8f0:	9c 91       	ld	r25, X
     8f2:	1d 97       	sbiw	r26, 0x0d	; 13
     8f4:	29 2f       	mov	r18, r25
     8f6:	20 95       	com	r18
     8f8:	90 91 ca 04 	lds	r25, 0x04CA	; 0x8004ca <OSRdyGrp>
     8fc:	92 23       	and	r25, r18
     8fe:	90 93 ca 04 	sts	0x04CA, r25	; 0x8004ca <OSRdyGrp>
     902:	17 96       	adiw	r26, 0x07	; 7
     904:	5c 93       	st	X, r21
     906:	4e 93       	st	-X, r20
     908:	16 97       	sbiw	r26, 0x06	; 6
     90a:	78 94       	sei
     90c:	0c 94 07 04 	jmp	0x80e	; 0x80e <OS_Sched>

00000910 <OS_TCBInit>:
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	f8 94       	cli
     918:	c0 91 c5 04 	lds	r28, 0x04C5	; 0x8004c5 <OSTCBFreeList>
     91c:	d0 91 c6 04 	lds	r29, 0x04C6	; 0x8004c6 <OSTCBFreeList+0x1>
     920:	20 97       	sbiw	r28, 0x00	; 0
     922:	09 f4       	brne	.+2      	; 0x926 <OS_TCBInit+0x16>
     924:	54 c0       	rjmp	.+168    	; 0x9ce <OS_TCBInit+0xbe>
     926:	18 2f       	mov	r17, r24
     928:	8a 81       	ldd	r24, Y+2	; 0x02
     92a:	9b 81       	ldd	r25, Y+3	; 0x03
     92c:	90 93 c6 04 	sts	0x04C6, r25	; 0x8004c6 <OSTCBFreeList+0x1>
     930:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <OSTCBFreeList>
     934:	78 94       	sei
     936:	79 83       	std	Y+1, r23	; 0x01
     938:	68 83       	st	Y, r22
     93a:	19 87       	std	Y+9, r17	; 0x09
     93c:	18 86       	std	Y+8, r1	; 0x08
     93e:	1f 82       	std	Y+7, r1	; 0x07
     940:	1e 82       	std	Y+6, r1	; 0x06
     942:	1e 86       	std	Y+14, r1	; 0x0e
     944:	e1 2f       	mov	r30, r17
     946:	e6 95       	lsr	r30
     948:	e6 95       	lsr	r30
     94a:	e6 95       	lsr	r30
     94c:	eb 87       	std	Y+11, r30	; 0x0b
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	e0 50       	subi	r30, 0x00	; 0
     952:	fe 4f       	sbci	r31, 0xFE	; 254
     954:	80 81       	ld	r24, Z
     956:	8d 87       	std	Y+13, r24	; 0x0d
     958:	e1 2f       	mov	r30, r17
     95a:	e7 70       	andi	r30, 0x07	; 7
     95c:	ea 87       	std	Y+10, r30	; 0x0a
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	e0 50       	subi	r30, 0x00	; 0
     962:	fe 4f       	sbci	r31, 0xFE	; 254
     964:	80 81       	ld	r24, Z
     966:	8c 87       	std	Y+12, r24	; 0x0c
     968:	ce 01       	movw	r24, r28
     96a:	0e 94 1e 03 	call	0x63c	; 0x63c <OSTCBInitHook>
     96e:	ce 01       	movw	r24, r28
     970:	0e 94 16 03 	call	0x62c	; 0x62c <OSTaskCreateHook>
     974:	f8 94       	cli
     976:	e1 2f       	mov	r30, r17
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	ef 5e       	subi	r30, 0xEF	; 239
     980:	f9 4f       	sbci	r31, 0xF9	; 249
     982:	d1 83       	std	Z+1, r29	; 0x01
     984:	c0 83       	st	Z, r28
     986:	e0 91 bf 04 	lds	r30, 0x04BF	; 0x8004bf <OSTCBList>
     98a:	f0 91 c0 04 	lds	r31, 0x04C0	; 0x8004c0 <OSTCBList+0x1>
     98e:	fb 83       	std	Y+3, r31	; 0x03
     990:	ea 83       	std	Y+2, r30	; 0x02
     992:	1d 82       	std	Y+5, r1	; 0x05
     994:	1c 82       	std	Y+4, r1	; 0x04
     996:	30 97       	sbiw	r30, 0x00	; 0
     998:	11 f0       	breq	.+4      	; 0x99e <OS_TCBInit+0x8e>
     99a:	d5 83       	std	Z+5, r29	; 0x05
     99c:	c4 83       	std	Z+4, r28	; 0x04
     99e:	d0 93 c0 04 	sts	0x04C0, r29	; 0x8004c0 <OSTCBList+0x1>
     9a2:	c0 93 bf 04 	sts	0x04BF, r28	; 0x8004bf <OSTCBList>
     9a6:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <OSRdyGrp>
     9aa:	9d 85       	ldd	r25, Y+13	; 0x0d
     9ac:	89 2b       	or	r24, r25
     9ae:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <OSRdyGrp>
     9b2:	eb 85       	ldd	r30, Y+11	; 0x0b
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	e5 53       	subi	r30, 0x35	; 53
     9b8:	fb 4f       	sbci	r31, 0xFB	; 251
     9ba:	80 81       	ld	r24, Z
     9bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     9be:	89 2b       	or	r24, r25
     9c0:	80 83       	st	Z, r24
     9c2:	78 94       	sei
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	08 95       	ret
     9ce:	78 94       	sei
     9d0:	86 e4       	ldi	r24, 0x46	; 70
     9d2:	f9 cf       	rjmp	.-14     	; 0x9c6 <OS_TCBInit+0xb6>

000009d4 <OSTaskCreate>:
     9d4:	9f 92       	push	r9
     9d6:	af 92       	push	r10
     9d8:	bf 92       	push	r11
     9da:	cf 92       	push	r12
     9dc:	df 92       	push	r13
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	f8 94       	cli
     9ec:	c2 2f       	mov	r28, r18
     9ee:	d0 e0       	ldi	r29, 0x00	; 0
     9f0:	cc 0f       	add	r28, r28
     9f2:	dd 1f       	adc	r29, r29
     9f4:	cf 5e       	subi	r28, 0xEF	; 239
     9f6:	d9 4f       	sbci	r29, 0xF9	; 249
     9f8:	e8 81       	ld	r30, Y
     9fa:	f9 81       	ldd	r31, Y+1	; 0x01
     9fc:	ef 2b       	or	r30, r31
     9fe:	09 f0       	breq	.+2      	; 0xa02 <OSTaskCreate+0x2e>
     a00:	3b c0       	rjmp	.+118    	; 0xa78 <OSTaskCreate+0xa4>
     a02:	92 2e       	mov	r9, r18
     a04:	21 e0       	ldi	r18, 0x01	; 1
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	39 83       	std	Y+1, r19	; 0x01
     a0a:	28 83       	st	Y, r18
     a0c:	78 94       	sei
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	0e 94 cc 02 	call	0x598	; 0x598 <OSTaskStkInit>
     a16:	b1 2c       	mov	r11, r1
     a18:	a1 2c       	mov	r10, r1
     a1a:	d1 2c       	mov	r13, r1
     a1c:	c1 2c       	mov	r12, r1
     a1e:	e1 2c       	mov	r14, r1
     a20:	f1 2c       	mov	r15, r1
     a22:	87 01       	movw	r16, r14
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	bc 01       	movw	r22, r24
     a2e:	89 2d       	mov	r24, r9
     a30:	0e 94 88 04 	call	0x910	; 0x910 <OS_TCBInit>
     a34:	18 2f       	mov	r17, r24
     a36:	81 11       	cpse	r24, r1
     a38:	1a c0       	rjmp	.+52     	; 0xa6e <OSTaskCreate+0x9a>
     a3a:	f8 94       	cli
     a3c:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <OSTaskCtr>
     a40:	8f 5f       	subi	r24, 0xFF	; 255
     a42:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <OSTaskCtr>
     a46:	78 94       	sei
     a48:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <OSRunning>
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	11 f4       	brne	.+4      	; 0xa54 <OSTaskCreate+0x80>
     a50:	0e 94 07 04 	call	0x80e	; 0x80e <OS_Sched>
     a54:	81 2f       	mov	r24, r17
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	df 90       	pop	r13
     a64:	cf 90       	pop	r12
     a66:	bf 90       	pop	r11
     a68:	af 90       	pop	r10
     a6a:	9f 90       	pop	r9
     a6c:	08 95       	ret
     a6e:	f8 94       	cli
     a70:	19 82       	std	Y+1, r1	; 0x01
     a72:	18 82       	st	Y, r1
     a74:	78 94       	sei
     a76:	ee cf       	rjmp	.-36     	; 0xa54 <OSTaskCreate+0x80>
     a78:	78 94       	sei
     a7a:	18 e2       	ldi	r17, 0x28	; 40
     a7c:	eb cf       	rjmp	.-42     	; 0xa54 <OSTaskCreate+0x80>

00000a7e <OSInit>:
     a7e:	0e 94 1b 03 	call	0x636	; 0x636 <OSInitHookBegin>
     a82:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <OSIntNesting>
     a86:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <OSLockNesting>
     a8a:	10 92 c7 04 	sts	0x04C7, r1	; 0x8004c7 <OSTaskCtr>
     a8e:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <OSRunning>
     a92:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <OSCtxSwCtr>
     a96:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <OSCtxSwCtr+0x1>
     a9a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <OSCtxSwCtr+0x2>
     a9e:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <OSCtxSwCtr+0x3>
     aa2:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <OSIdleCtr>
     aa6:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <OSIdleCtr+0x1>
     aaa:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <OSIdleCtr+0x2>
     aae:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <OSIdleCtr+0x3>
     ab2:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <OSRdyGrp>
     ab6:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <OSRdyTbl>
     aba:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <OSRdyTbl+0x1>
     abe:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <OSRdyTbl+0x2>
     ac2:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <OSPrioCur>
     ac6:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <OSPrioHighRdy>
     aca:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <OSTCBHighRdy+0x1>
     ace:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <OSTCBHighRdy>
     ad2:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <OSTCBCur+0x1>
     ad6:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <OSTCBCur>
     ada:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <OSTCBList+0x1>
     ade:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <OSTCBList>
     ae2:	e1 e1       	ldi	r30, 0x11	; 17
     ae4:	f6 e0       	ldi	r31, 0x06	; 6
     ae6:	11 92       	st	Z+, r1
     ae8:	11 92       	st	Z+, r1
     aea:	86 e0       	ldi	r24, 0x06	; 6
     aec:	e3 33       	cpi	r30, 0x33	; 51
     aee:	f8 07       	cpc	r31, r24
     af0:	d1 f7       	brne	.-12     	; 0xae6 <OSInit+0x68>
     af2:	e2 e1       	ldi	r30, 0x12	; 18
     af4:	f5 e0       	ldi	r31, 0x05	; 5
     af6:	cf 01       	movw	r24, r30
     af8:	0f 96       	adiw	r24, 0x0f	; 15
     afa:	93 83       	std	Z+3, r25	; 0x03
     afc:	82 83       	std	Z+2, r24	; 0x02
     afe:	fc 01       	movw	r30, r24
     b00:	86 e0       	ldi	r24, 0x06	; 6
     b02:	e2 30       	cpi	r30, 0x02	; 2
     b04:	f8 07       	cpc	r31, r24
     b06:	b9 f7       	brne	.-18     	; 0xaf6 <OSInit+0x78>
     b08:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <OSTCBTbl+0xf3>
     b0c:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <OSTCBTbl+0xf2>
     b10:	82 e1       	ldi	r24, 0x12	; 18
     b12:	95 e0       	ldi	r25, 0x05	; 5
     b14:	90 93 c6 04 	sts	0x04C6, r25	; 0x8004c6 <OSTCBFreeList+0x1>
     b18:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <OSTCBFreeList>
     b1c:	20 e1       	ldi	r18, 0x10	; 16
     b1e:	41 e1       	ldi	r20, 0x11	; 17
     b20:	55 e0       	ldi	r21, 0x05	; 5
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	8f e1       	ldi	r24, 0x1F	; 31
     b28:	93 e0       	ldi	r25, 0x03	; 3
     b2a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <OSTaskCreate>
     b2e:	0c 94 1c 03 	jmp	0x638	; 0x638 <OSInitHookEnd>

00000b32 <OSTaskDel>:
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	f0 90 cf 04 	lds	r15, 0x04CF	; 0x8004cf <OSIntNesting>
     b40:	f1 10       	cpse	r15, r1
     b42:	76 c0       	rjmp	.+236    	; 0xc30 <OSTaskDel+0xfe>
     b44:	f8 94       	cli
     b46:	8f 3f       	cpi	r24, 0xFF	; 255
     b48:	29 f4       	brne	.+10     	; 0xb54 <OSTaskDel+0x22>
     b4a:	e0 91 d0 04 	lds	r30, 0x04D0	; 0x8004d0 <OSTCBCur>
     b4e:	f0 91 d1 04 	lds	r31, 0x04D1	; 0x8004d1 <OSTCBCur+0x1>
     b52:	81 85       	ldd	r24, Z+9	; 0x09
     b54:	08 2f       	mov	r16, r24
     b56:	10 e0       	ldi	r17, 0x00	; 0
     b58:	00 0f       	add	r16, r16
     b5a:	11 1f       	adc	r17, r17
     b5c:	f8 01       	movw	r30, r16
     b5e:	ef 5e       	subi	r30, 0xEF	; 239
     b60:	f9 4f       	sbci	r31, 0xF9	; 249
     b62:	c0 81       	ld	r28, Z
     b64:	d1 81       	ldd	r29, Z+1	; 0x01
     b66:	20 97       	sbiw	r28, 0x00	; 0
     b68:	09 f4       	brne	.+2      	; 0xb6c <OSTaskDel+0x3a>
     b6a:	5e c0       	rjmp	.+188    	; 0xc28 <OSTaskDel+0xf6>
     b6c:	eb 85       	ldd	r30, Y+11	; 0x0b
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	8c 85       	ldd	r24, Y+12	; 0x0c
     b72:	80 95       	com	r24
     b74:	e5 53       	subi	r30, 0x35	; 53
     b76:	fb 4f       	sbci	r31, 0xFB	; 251
     b78:	90 81       	ld	r25, Z
     b7a:	89 23       	and	r24, r25
     b7c:	80 83       	st	Z, r24
     b7e:	81 11       	cpse	r24, r1
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <OSTaskDel+0x60>
     b82:	8d 85       	ldd	r24, Y+13	; 0x0d
     b84:	98 2f       	mov	r25, r24
     b86:	90 95       	com	r25
     b88:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <OSRdyGrp>
     b8c:	89 23       	and	r24, r25
     b8e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <OSRdyGrp>
     b92:	1f 82       	std	Y+7, r1	; 0x07
     b94:	1e 82       	std	Y+6, r1	; 0x06
     b96:	18 86       	std	Y+8, r1	; 0x08
     b98:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <OSLockNesting>
     b9c:	8f 3f       	cpi	r24, 0xFF	; 255
     b9e:	19 f0       	breq	.+6      	; 0xba6 <OSTaskDel+0x74>
     ba0:	8f 5f       	subi	r24, 0xFF	; 255
     ba2:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <OSLockNesting>
     ba6:	78 94       	sei
     ba8:	f8 94       	cli
     baa:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <OSLockNesting>
     bae:	88 23       	and	r24, r24
     bb0:	19 f0       	breq	.+6      	; 0xbb8 <OSTaskDel+0x86>
     bb2:	81 50       	subi	r24, 0x01	; 1
     bb4:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <OSLockNesting>
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 17 03 	call	0x62e	; 0x62e <OSTaskDelHook>
     bbe:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <OSTaskCtr>
     bc2:	81 50       	subi	r24, 0x01	; 1
     bc4:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <OSTaskCtr>
     bc8:	f8 01       	movw	r30, r16
     bca:	ef 5e       	subi	r30, 0xEF	; 239
     bcc:	f9 4f       	sbci	r31, 0xF9	; 249
     bce:	11 82       	std	Z+1, r1	; 0x01
     bd0:	10 82       	st	Z, r1
     bd2:	ec 81       	ldd	r30, Y+4	; 0x04
     bd4:	fd 81       	ldd	r31, Y+5	; 0x05
     bd6:	aa 81       	ldd	r26, Y+2	; 0x02
     bd8:	bb 81       	ldd	r27, Y+3	; 0x03
     bda:	30 97       	sbiw	r30, 0x00	; 0
     bdc:	e1 f4       	brne	.+56     	; 0xc16 <OSTaskDel+0xe4>
     bde:	15 96       	adiw	r26, 0x05	; 5
     be0:	1c 92       	st	X, r1
     be2:	1e 92       	st	-X, r1
     be4:	14 97       	sbiw	r26, 0x04	; 4
     be6:	b0 93 c0 04 	sts	0x04C0, r27	; 0x8004c0 <OSTCBList+0x1>
     bea:	a0 93 bf 04 	sts	0x04BF, r26	; 0x8004bf <OSTCBList>
     bee:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <OSTCBFreeList>
     bf2:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <OSTCBFreeList+0x1>
     bf6:	9b 83       	std	Y+3, r25	; 0x03
     bf8:	8a 83       	std	Y+2, r24	; 0x02
     bfa:	d0 93 c6 04 	sts	0x04C6, r29	; 0x8004c6 <OSTCBFreeList+0x1>
     bfe:	c0 93 c5 04 	sts	0x04C5, r28	; 0x8004c5 <OSTCBFreeList>
     c02:	78 94       	sei
     c04:	0e 94 07 04 	call	0x80e	; 0x80e <OS_Sched>
     c08:	8f 2d       	mov	r24, r15
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	08 95       	ret
     c16:	b3 83       	std	Z+3, r27	; 0x03
     c18:	a2 83       	std	Z+2, r26	; 0x02
     c1a:	aa 81       	ldd	r26, Y+2	; 0x02
     c1c:	bb 81       	ldd	r27, Y+3	; 0x03
     c1e:	15 96       	adiw	r26, 0x05	; 5
     c20:	fc 93       	st	X, r31
     c22:	ee 93       	st	-X, r30
     c24:	14 97       	sbiw	r26, 0x04	; 4
     c26:	e3 cf       	rjmp	.-58     	; 0xbee <OSTaskDel+0xbc>
     c28:	78 94       	sei
     c2a:	9c e3       	ldi	r25, 0x3C	; 60
     c2c:	f9 2e       	mov	r15, r25
     c2e:	ec cf       	rjmp	.-40     	; 0xc08 <OSTaskDel+0xd6>
     c30:	8f e3       	ldi	r24, 0x3F	; 63
     c32:	f8 2e       	mov	r15, r24
     c34:	e9 cf       	rjmp	.-46     	; 0xc08 <OSTaskDel+0xd6>

00000c36 <OSTaskDelReq>:
     c36:	8f 3f       	cpi	r24, 0xFF	; 255
     c38:	41 f4       	brne	.+16     	; 0xc4a <OSTaskDelReq+0x14>
     c3a:	f8 94       	cli
     c3c:	e0 91 d0 04 	lds	r30, 0x04D0	; 0x8004d0 <OSTCBCur>
     c40:	f0 91 d1 04 	lds	r31, 0x04D1	; 0x8004d1 <OSTCBCur+0x1>
     c44:	86 85       	ldd	r24, Z+14	; 0x0e
     c46:	78 94       	sei
     c48:	08 95       	ret
     c4a:	f8 94       	cli
     c4c:	e8 2f       	mov	r30, r24
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	ef 5e       	subi	r30, 0xEF	; 239
     c56:	f9 4f       	sbci	r31, 0xF9	; 249
     c58:	01 90       	ld	r0, Z+
     c5a:	f0 81       	ld	r31, Z
     c5c:	e0 2d       	mov	r30, r0
     c5e:	8b e0       	ldi	r24, 0x0B	; 11
     c60:	30 97       	sbiw	r30, 0x00	; 0
     c62:	89 f3       	breq	.-30     	; 0xc46 <OSTaskDelReq+0x10>
     c64:	8e e3       	ldi	r24, 0x3E	; 62
     c66:	86 87       	std	Z+14, r24	; 0x0e
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	ed cf       	rjmp	.-38     	; 0xc46 <OSTaskDelReq+0x10>

00000c6c <OSTimeDly>:
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	11 f0       	breq	.+4      	; 0xc74 <OSTimeDly+0x8>
     c70:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <OSTimeDly.part.0>
     c74:	08 95       	ret

00000c76 <OSTimeDlyHMSM>:
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	81 11       	cpse	r24, r1
     c80:	0d c0       	rjmp	.+26     	; 0xc9c <OSTimeDlyHMSM+0x26>
     c82:	61 11       	cpse	r22, r1
     c84:	0b c0       	rjmp	.+22     	; 0xc9c <OSTimeDlyHMSM+0x26>
     c86:	41 11       	cpse	r20, r1
     c88:	0c c0       	rjmp	.+24     	; 0xca2 <OSTimeDlyHMSM+0x2c>
     c8a:	21 15       	cp	r18, r1
     c8c:	31 05       	cpc	r19, r1
     c8e:	61 f4       	brne	.+24     	; 0xca8 <OSTimeDlyHMSM+0x32>
     c90:	84 e5       	ldi	r24, 0x54	; 84
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	08 95       	ret
     c9c:	6c 33       	cpi	r22, 0x3C	; 60
     c9e:	08 f0       	brcs	.+2      	; 0xca2 <OSTimeDlyHMSM+0x2c>
     ca0:	4f c0       	rjmp	.+158    	; 0xd40 <OSTimeDlyHMSM+0xca>
     ca2:	4c 33       	cpi	r20, 0x3C	; 60
     ca4:	08 f0       	brcs	.+2      	; 0xca8 <OSTimeDlyHMSM+0x32>
     ca6:	4e c0       	rjmp	.+156    	; 0xd44 <OSTimeDlyHMSM+0xce>
     ca8:	28 3e       	cpi	r18, 0xE8	; 232
     caa:	93 e0       	ldi	r25, 0x03	; 3
     cac:	39 07       	cpc	r19, r25
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <OSTimeDlyHMSM+0x3c>
     cb0:	4b c0       	rjmp	.+150    	; 0xd48 <OSTimeDlyHMSM+0xd2>
     cb2:	f9 01       	movw	r30, r18
     cb4:	58 2f       	mov	r21, r24
     cb6:	26 2f       	mov	r18, r22
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	ac e3       	ldi	r26, 0x3C	; 60
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	0e 94 85 09 	call	0x130a	; 0x130a <__umulhisi3>
     cc2:	6b 01       	movw	r12, r22
     cc4:	7c 01       	movw	r14, r24
     cc6:	c4 0e       	add	r12, r20
     cc8:	d1 1c       	adc	r13, r1
     cca:	e1 1c       	adc	r14, r1
     ccc:	f1 1c       	adc	r15, r1
     cce:	25 2f       	mov	r18, r21
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	a0 e1       	ldi	r26, 0x10	; 16
     cd4:	be e0       	ldi	r27, 0x0E	; 14
     cd6:	0e 94 85 09 	call	0x130a	; 0x130a <__umulhisi3>
     cda:	a7 01       	movw	r20, r14
     cdc:	96 01       	movw	r18, r12
     cde:	26 0f       	add	r18, r22
     ce0:	37 1f       	adc	r19, r23
     ce2:	48 1f       	adc	r20, r24
     ce4:	59 1f       	adc	r21, r25
     ce6:	a4 e6       	ldi	r26, 0x64	; 100
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	0e 94 94 09 	call	0x1328	; 0x1328 <__muluhisi3>
     cee:	6b 01       	movw	r12, r22
     cf0:	7c 01       	movw	r14, r24
     cf2:	9f 01       	movw	r18, r30
     cf4:	0e 94 85 09 	call	0x130a	; 0x130a <__umulhisi3>
     cf8:	6c 50       	subi	r22, 0x0C	; 12
     cfa:	7e 4f       	sbci	r23, 0xFE	; 254
     cfc:	8f 4f       	sbci	r24, 0xFF	; 255
     cfe:	9f 4f       	sbci	r25, 0xFF	; 255
     d00:	28 ee       	ldi	r18, 0xE8	; 232
     d02:	33 e0       	ldi	r19, 0x03	; 3
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__udivmodsi4>
     d0c:	d7 01       	movw	r26, r14
     d0e:	c6 01       	movw	r24, r12
     d10:	82 0f       	add	r24, r18
     d12:	93 1f       	adc	r25, r19
     d14:	a4 1f       	adc	r26, r20
     d16:	b5 1f       	adc	r27, r21
     d18:	7d 01       	movw	r14, r26
     d1a:	0e 94 36 06 	call	0xc6c	; 0xc6c <OSTimeDly>
     d1e:	e1 14       	cp	r14, r1
     d20:	f1 04       	cpc	r15, r1
     d22:	11 f4       	brne	.+4      	; 0xd28 <OSTimeDlyHMSM+0xb2>
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	b5 cf       	rjmp	.-150    	; 0xc92 <OSTimeDlyHMSM+0x1c>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e8       	ldi	r25, 0x80	; 128
     d2c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <OSTimeDly.part.0>
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e8       	ldi	r25, 0x80	; 128
     d34:	0e 94 62 04 	call	0x8c4	; 0x8c4 <OSTimeDly.part.0>
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	e8 1a       	sub	r14, r24
     d3c:	f1 08       	sbc	r15, r1
     d3e:	ef cf       	rjmp	.-34     	; 0xd1e <OSTimeDlyHMSM+0xa8>
     d40:	81 e5       	ldi	r24, 0x51	; 81
     d42:	a7 cf       	rjmp	.-178    	; 0xc92 <OSTimeDlyHMSM+0x1c>
     d44:	82 e5       	ldi	r24, 0x52	; 82
     d46:	a5 cf       	rjmp	.-182    	; 0xc92 <OSTimeDlyHMSM+0x1c>
     d48:	83 e5       	ldi	r24, 0x53	; 83
     d4a:	a3 cf       	rjmp	.-186    	; 0xc92 <OSTimeDlyHMSM+0x1c>

00000d4c <ADC_init>:
     d4c:	80 e4       	ldi	r24, 0x40	; 64
     d4e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     d52:	86 e8       	ldi	r24, 0x86	; 134
     d54:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d58:	08 95       	ret

00000d5a <ADC_read>:
     d5a:	f8 94       	cli
     d5c:	80 64       	ori	r24, 0x40	; 64
     d5e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     d62:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d66:	80 64       	ori	r24, 0x40	; 64
     d68:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d6c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d70:	84 ff       	sbrs	r24, 4
     d72:	fc cf       	rjmp	.-8      	; 0xd6c <ADC_read+0x12>
     d74:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d78:	80 61       	ori	r24, 0x10	; 16
     d7a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     d7e:	78 94       	sei
     d80:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     d84:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     d88:	93 70       	andi	r25, 0x03	; 3
     d8a:	08 95       	ret

00000d8c <PWM8_write>:
     d8c:	81 11       	cpse	r24, r1
     d8e:	05 c0       	rjmp	.+10     	; 0xd9a <PWM8_write+0xe>
     d90:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     d94:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     d98:	08 95       	ret
     d9a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     d9e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     da2:	08 95       	ret

00000da4 <motor_init>:
     da4:	8a b1       	in	r24, 0x0a	; 10
     da6:	80 6f       	ori	r24, 0xF0	; 240
     da8:	8a b9       	out	0x0a, r24	; 10
     daa:	8b b1       	in	r24, 0x0b	; 11
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8b b9       	out	0x0b, r24	; 11
     db0:	81 ea       	ldi	r24, 0xA1	; 161
     db2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     dbc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dc0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dc4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     dc8:	a8 e8       	ldi	r26, 0x88	; 136
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	1c 92       	st	X, r1
     dce:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     dd2:	ea e8       	ldi	r30, 0x8A	; 138
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	10 82       	st	Z, r1
     dd8:	84 b1       	in	r24, 0x04	; 4
     dda:	86 60       	ori	r24, 0x06	; 6
     ddc:	84 b9       	out	0x04, r24	; 4
     dde:	11 96       	adiw	r26, 0x01	; 1
     de0:	1c 92       	st	X, r1
     de2:	1e 92       	st	-X, r1
     de4:	11 82       	std	Z+1, r1	; 0x01
     de6:	10 82       	st	Z, r1
     de8:	08 95       	ret

00000dea <motor_set_speed>:
     dea:	77 ff       	sbrs	r23, 7
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <motor_set_speed+0x8>
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	65 36       	cpi	r22, 0x65	; 101
     df4:	71 05       	cpc	r23, r1
     df6:	14 f0       	brlt	.+4      	; 0xdfc <motor_set_speed+0x12>
     df8:	64 e6       	ldi	r22, 0x64	; 100
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	9b 01       	movw	r18, r22
     dfe:	22 0f       	add	r18, r18
     e00:	33 1f       	adc	r19, r19
     e02:	75 95       	asr	r23
     e04:	67 95       	ror	r22
     e06:	62 0f       	add	r22, r18
     e08:	73 1f       	adc	r23, r19
     e0a:	81 11       	cpse	r24, r1
     e0c:	09 c0       	rjmp	.+18     	; 0xe20 <motor_set_speed+0x36>
     e0e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     e12:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     e16:	70 93 34 06 	sts	0x0634, r23	; 0x800634 <rightWst+0x1>
     e1a:	60 93 33 06 	sts	0x0633, r22	; 0x800633 <rightWst>
     e1e:	08 95       	ret
     e20:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     e24:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     e28:	70 93 38 06 	sts	0x0638, r23	; 0x800638 <leftWst+0x1>
     e2c:	60 93 37 06 	sts	0x0637, r22	; 0x800637 <leftWst>
     e30:	08 95       	ret

00000e32 <motor_set_dir>:
     e32:	cf 93       	push	r28
     e34:	c6 2f       	mov	r28, r22
     e36:	26 2f       	mov	r18, r22
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 11       	cpse	r24, r1
     e3c:	2b c0       	rjmp	.+86     	; 0xe94 <motor_set_dir+0x62>
     e3e:	80 91 35 06 	lds	r24, 0x0635	; 0x800635 <rightWst+0x2>
     e42:	90 91 36 06 	lds	r25, 0x0636	; 0x800636 <rightWst+0x3>
     e46:	82 17       	cp	r24, r18
     e48:	93 07       	cpc	r25, r19
     e4a:	59 f0       	breq	.+22     	; 0xe62 <motor_set_dir+0x30>
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	0e 94 f5 06 	call	0xdea	; 0xdea <motor_set_speed>
     e56:	8f e9       	ldi	r24, 0x9F	; 159
     e58:	9f e0       	ldi	r25, 0x0F	; 15
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <motor_set_dir+0x28>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <motor_set_dir+0x2e>
     e60:	00 00       	nop
     e62:	c1 11       	cpse	r28, r1
     e64:	0e c0       	rjmp	.+28     	; 0xe82 <motor_set_dir+0x50>
     e66:	5e 98       	cbi	0x0b, 6	; 11
     e68:	5f 9a       	sbi	0x0b, 7	; 11
     e6a:	10 92 36 06 	sts	0x0636, r1	; 0x800636 <rightWst+0x3>
     e6e:	10 92 35 06 	sts	0x0635, r1	; 0x800635 <rightWst+0x2>
     e72:	8f e3       	ldi	r24, 0x3F	; 63
     e74:	9c e9       	ldi	r25, 0x9C	; 156
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <motor_set_dir+0x44>
     e7a:	00 c0       	rjmp	.+0      	; 0xe7c <motor_set_dir+0x4a>
     e7c:	00 00       	nop
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret
     e82:	5e 9a       	sbi	0x0b, 6	; 11
     e84:	5f 98       	cbi	0x0b, 7	; 11
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	90 93 36 06 	sts	0x0636, r25	; 0x800636 <rightWst+0x3>
     e8e:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <rightWst+0x2>
     e92:	ef cf       	rjmp	.-34     	; 0xe72 <motor_set_dir+0x40>
     e94:	80 91 39 06 	lds	r24, 0x0639	; 0x800639 <leftWst+0x2>
     e98:	90 91 3a 06 	lds	r25, 0x063A	; 0x80063a <leftWst+0x3>
     e9c:	82 17       	cp	r24, r18
     e9e:	93 07       	cpc	r25, r19
     ea0:	59 f0       	breq	.+22     	; 0xeb8 <motor_set_dir+0x86>
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	0e 94 f5 06 	call	0xdea	; 0xdea <motor_set_speed>
     eac:	8f e9       	ldi	r24, 0x9F	; 159
     eae:	9f e0       	ldi	r25, 0x0F	; 15
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <motor_set_dir+0x7e>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <motor_set_dir+0x84>
     eb6:	00 00       	nop
     eb8:	c1 11       	cpse	r28, r1
     eba:	07 c0       	rjmp	.+14     	; 0xeca <motor_set_dir+0x98>
     ebc:	5c 9a       	sbi	0x0b, 4	; 11
     ebe:	5d 98       	cbi	0x0b, 5	; 11
     ec0:	10 92 3a 06 	sts	0x063A, r1	; 0x80063a <leftWst+0x3>
     ec4:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <leftWst+0x2>
     ec8:	d4 cf       	rjmp	.-88     	; 0xe72 <motor_set_dir+0x40>
     eca:	5c 98       	cbi	0x0b, 4	; 11
     ecc:	5d 9a       	sbi	0x0b, 5	; 11
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	90 93 3a 06 	sts	0x063A, r25	; 0x80063a <leftWst+0x3>
     ed6:	80 93 39 06 	sts	0x0639, r24	; 0x800639 <leftWst+0x2>
     eda:	cb cf       	rjmp	.-106    	; 0xe72 <motor_set_dir+0x40>

00000edc <robo_motorSpeed>:
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	ec 01       	movw	r28, r24
     ee6:	8b 01       	movw	r16, r22
     ee8:	97 ff       	sbrs	r25, 7
     eea:	1c c0       	rjmp	.+56     	; 0xf24 <robo_motorSpeed+0x48>
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	0e 94 19 07 	call	0xe32	; 0xe32 <motor_set_dir>
     ef4:	d1 95       	neg	r29
     ef6:	c1 95       	neg	r28
     ef8:	d1 09       	sbc	r29, r1
     efa:	17 ff       	sbrs	r17, 7
     efc:	18 c0       	rjmp	.+48     	; 0xf2e <robo_motorSpeed+0x52>
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	0e 94 19 07 	call	0xe32	; 0xe32 <motor_set_dir>
     f06:	11 95       	neg	r17
     f08:	01 95       	neg	r16
     f0a:	11 09       	sbc	r17, r1
     f0c:	b8 01       	movw	r22, r16
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	0e 94 f5 06 	call	0xdea	; 0xdea <motor_set_speed>
     f14:	be 01       	movw	r22, r28
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	0c 94 f5 06 	jmp	0xdea	; 0xdea <motor_set_speed>
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	0e 94 19 07 	call	0xe32	; 0xe32 <motor_set_dir>
     f2c:	e6 cf       	rjmp	.-52     	; 0xefa <robo_motorSpeed+0x1e>
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	0e 94 19 07 	call	0xe32	; 0xe32 <motor_set_dir>
     f36:	ea cf       	rjmp	.-44     	; 0xf0c <robo_motorSpeed+0x30>

00000f38 <USART0_init>:
     f38:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     f3c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     f40:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     f44:	88 e1       	ldi	r24, 0x18	; 24
     f46:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     f4a:	86 e0       	ldi	r24, 0x06	; 6
     f4c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     f50:	08 95       	ret

00000f52 <cputchar>:
     f52:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     f56:	95 ff       	sbrs	r25, 5
     f58:	fc cf       	rjmp	.-8      	; 0xf52 <cputchar>
     f5a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     f5e:	08 95       	ret

00000f60 <cgetchar>:
     f60:	cf 93       	push	r28
     f62:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     f66:	87 ff       	sbrs	r24, 7
     f68:	fc cf       	rjmp	.-8      	; 0xf62 <cgetchar+0x2>
     f6a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     f6e:	8c 2f       	mov	r24, r28
     f70:	0e 94 a9 07 	call	0xf52	; 0xf52 <cputchar>
     f74:	8c 2f       	mov	r24, r28
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <cputs>:
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	ec 01       	movw	r28, r24
     f80:	89 91       	ld	r24, Y+
     f82:	81 11       	cpse	r24, r1
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <cputs+0x12>
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret
     f8c:	0e 94 a9 07 	call	0xf52	; 0xf52 <cputchar>
     f90:	f7 cf       	rjmp	.-18     	; 0xf80 <cputs+0x6>

00000f92 <robo_proxSensor>:
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	0e 94 ad 06 	call	0xd5a	; 0xd5a <ADC_read>
     f98:	21 e0       	ldi	r18, 0x01	; 1
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	84 36       	cpi	r24, 0x64	; 100
     f9e:	91 05       	cpc	r25, r1
     fa0:	10 f0       	brcs	.+4      	; 0xfa6 <robo_proxSensor+0x14>
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	c9 01       	movw	r24, r18
     fa8:	08 95       	ret

00000faa <robo_lightSensor>:
     faa:	84 e0       	ldi	r24, 0x04	; 4
     fac:	0e 94 ad 06 	call	0xd5a	; 0xd5a <ADC_read>
     fb0:	2b ef       	ldi	r18, 0xFB	; 251
     fb2:	ac 01       	movw	r20, r24
     fb4:	24 03       	mulsu	r18, r20
     fb6:	c0 01       	movw	r24, r0
     fb8:	25 9f       	mul	r18, r21
     fba:	90 0d       	add	r25, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	85 50       	subi	r24, 0x05	; 5
     fc0:	9c 4e       	sbci	r25, 0xEC	; 236
     fc2:	63 e3       	ldi	r22, 0x33	; 51
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	0e 94 4f 09 	call	0x129e	; 0x129e <__divmodhi4>
     fca:	cb 01       	movw	r24, r22
     fcc:	65 36       	cpi	r22, 0x65	; 101
     fce:	71 05       	cpc	r23, r1
     fd0:	14 f0       	brlt	.+4      	; 0xfd6 <robo_lightSensor+0x2c>
     fd2:	84 e6       	ldi	r24, 0x64	; 100
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	08 95       	ret

00000fd8 <robo_lineSensor>:
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	c0 e0       	ldi	r28, 0x00	; 0
     fde:	d1 e0       	ldi	r29, 0x01	; 1
     fe0:	cc 0f       	add	r28, r28
     fe2:	8d 2f       	mov	r24, r29
     fe4:	0e 94 ad 06 	call	0xd5a	; 0xd5a <ADC_read>
     fe8:	8c 32       	cpi	r24, 0x2C	; 44
     fea:	91 40       	sbci	r25, 0x01	; 1
     fec:	0c f4       	brge	.+2      	; 0xff0 <robo_lineSensor+0x18>
     fee:	c1 60       	ori	r28, 0x01	; 1
     ff0:	df 5f       	subi	r29, 0xFF	; 255
     ff2:	d4 30       	cpi	r29, 0x04	; 4
     ff4:	a9 f7       	brne	.-22     	; 0xfe0 <robo_lineSensor+0x8>
     ff6:	8c 2f       	mov	r24, r28
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	08 95       	ret

00001000 <robo_bumpSensorR>:
    1000:	83 b1       	in	r24, 0x03	; 3
    1002:	82 95       	swap	r24
    1004:	8f 70       	andi	r24, 0x0F	; 15
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	89 27       	eor	r24, r25
    100a:	81 70       	andi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	08 95       	ret

00001010 <robo_bumpSensorL>:
    1010:	83 b1       	in	r24, 0x03	; 3
    1012:	86 95       	lsr	r24
    1014:	86 95       	lsr	r24
    1016:	86 95       	lsr	r24
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	89 27       	eor	r24, r25
    101c:	81 70       	andi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	08 95       	ret

00001022 <robo_Honk>:
    1022:	5b 9a       	sbi	0x0b, 3	; 11
    1024:	2f ef       	ldi	r18, 0xFF	; 255
    1026:	85 ea       	ldi	r24, 0xA5	; 165
    1028:	9e e0       	ldi	r25, 0x0E	; 14
    102a:	21 50       	subi	r18, 0x01	; 1
    102c:	80 40       	sbci	r24, 0x00	; 0
    102e:	90 40       	sbci	r25, 0x00	; 0
    1030:	e1 f7       	brne	.-8      	; 0x102a <robo_Honk+0x8>
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <robo_Honk+0x12>
    1034:	00 00       	nop
    1036:	5b 98       	cbi	0x0b, 3	; 11
    1038:	2f ef       	ldi	r18, 0xFF	; 255
    103a:	85 ea       	ldi	r24, 0xA5	; 165
    103c:	9e e0       	ldi	r25, 0x0E	; 14
    103e:	21 50       	subi	r18, 0x01	; 1
    1040:	80 40       	sbci	r24, 0x00	; 0
    1042:	90 40       	sbci	r25, 0x00	; 0
    1044:	e1 f7       	brne	.-8      	; 0x103e <robo_Honk+0x1c>
    1046:	00 c0       	rjmp	.+0      	; 0x1048 <robo_Honk+0x26>
    1048:	00 00       	nop
    104a:	08 95       	ret

0000104c <robo_checkBattery>:
    104c:	85 e0       	ldi	r24, 0x05	; 5
    104e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <ADC_read>
    1052:	84 3f       	cpi	r24, 0xF4	; 244
    1054:	91 40       	sbci	r25, 0x01	; 1
    1056:	10 f4       	brcc	.+4      	; 0x105c <robo_checkBattery+0x10>
    1058:	28 9a       	sbi	0x05, 0	; 5
    105a:	08 95       	ret
    105c:	28 98       	cbi	0x05, 0	; 5
    105e:	08 95       	ret

00001060 <robo_goPressed>:
    1060:	89 b1       	in	r24, 0x09	; 9
    1062:	82 fb       	bst	r24, 2
    1064:	88 27       	eor	r24, r24
    1066:	80 f9       	bld	r24, 0
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	89 27       	eor	r24, r25
    106c:	08 95       	ret

0000106e <robo_wait4goPress>:
    106e:	0e 94 30 08 	call	0x1060	; 0x1060 <robo_goPressed>
    1072:	88 23       	and	r24, r24
    1074:	e1 f3       	breq	.-8      	; 0x106e <robo_wait4goPress>
    1076:	08 95       	ret

00001078 <OS_ticks_init>:
    1078:	f8 94       	cli
    107a:	85 e0       	ldi	r24, 0x05	; 5
    107c:	85 bd       	out	0x25, r24	; 37
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    1084:	84 e6       	ldi	r24, 0x64	; 100
    1086:	86 bd       	out	0x26, r24	; 38
    1088:	78 94       	sei
    108a:	08 95       	ret

0000108c <HAL_init>:
    108c:	87 e6       	ldi	r24, 0x67	; 103
    108e:	0e 94 9c 07 	call	0xf38	; 0xf38 <USART0_init>
    1092:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <ADC_init>

00001096 <robo_Setup>:
    1096:	0e 94 46 08 	call	0x108c	; 0x108c <HAL_init>
    109a:	0e 94 d2 06 	call	0xda4	; 0xda4 <motor_init>
    109e:	53 9a       	sbi	0x0a, 3	; 10
    10a0:	5b 98       	cbi	0x0b, 3	; 11
    10a2:	20 9a       	sbi	0x04, 0	; 4
    10a4:	52 98       	cbi	0x0a, 2	; 10
    10a6:	5a 9a       	sbi	0x0b, 2	; 11
    10a8:	24 98       	cbi	0x04, 4	; 4
    10aa:	23 98       	cbi	0x04, 3	; 4
    10ac:	85 b1       	in	r24, 0x05	; 5
    10ae:	88 61       	ori	r24, 0x18	; 24
    10b0:	85 b9       	out	0x05, r24	; 5
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	0e 94 19 07 	call	0xe32	; 0xe32 <motor_set_dir>
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0e 94 19 07 	call	0xe32	; 0xe32 <motor_set_dir>
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	0c 94 6e 07 	jmp	0xedc	; 0xedc <robo_motorSpeed>

000010ce <cprintf>:
    10ce:	4f 92       	push	r4
    10d0:	5f 92       	push	r5
    10d2:	6f 92       	push	r6
    10d4:	7f 92       	push	r7
    10d6:	8f 92       	push	r8
    10d8:	9f 92       	push	r9
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	de 01       	movw	r26, r28
    10f4:	53 96       	adiw	r26, 0x13	; 19
    10f6:	ed 91       	ld	r30, X+
    10f8:	fd 91       	ld	r31, X+
    10fa:	8d 01       	movw	r16, r26
    10fc:	5a e0       	ldi	r21, 0x0A	; 10
    10fe:	65 2e       	mov	r6, r21
    1100:	71 2c       	mov	r7, r1
    1102:	80 81       	ld	r24, Z
    1104:	85 32       	cpi	r24, 0x25	; 37
    1106:	81 f4       	brne	.+32     	; 0x1128 <cprintf+0x5a>
    1108:	5f 01       	movw	r10, r30
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	a8 0e       	add	r10, r24
    110e:	b1 1c       	adc	r11, r1
    1110:	81 81       	ldd	r24, Z+1	; 0x01
    1112:	84 36       	cpi	r24, 0x64	; 100
    1114:	09 f4       	brne	.+2      	; 0x1118 <cprintf+0x4a>
    1116:	50 c0       	rjmp	.+160    	; 0x11b8 <cprintf+0xea>
    1118:	90 f4       	brcc	.+36     	; 0x113e <cprintf+0x70>
    111a:	83 36       	cpi	r24, 0x63	; 99
    111c:	61 f4       	brne	.+24     	; 0x1136 <cprintf+0x68>
    111e:	f8 01       	movw	r30, r16
    1120:	80 81       	ld	r24, Z
    1122:	0e 5f       	subi	r16, 0xFE	; 254
    1124:	1f 4f       	sbci	r17, 0xFF	; 255
    1126:	07 c0       	rjmp	.+14     	; 0x1136 <cprintf+0x68>
    1128:	88 23       	and	r24, r24
    112a:	09 f4       	brne	.+2      	; 0x112e <cprintf+0x60>
    112c:	5d c0       	rjmp	.+186    	; 0x11e8 <cprintf+0x11a>
    112e:	5f 01       	movw	r10, r30
    1130:	9f ef       	ldi	r25, 0xFF	; 255
    1132:	a9 1a       	sub	r10, r25
    1134:	b9 0a       	sbc	r11, r25
    1136:	0e 94 a9 07 	call	0xf52	; 0xf52 <cputchar>
    113a:	f5 01       	movw	r30, r10
    113c:	e2 cf       	rjmp	.-60     	; 0x1102 <cprintf+0x34>
    113e:	83 37       	cpi	r24, 0x73	; 115
    1140:	71 f1       	breq	.+92     	; 0x119e <cprintf+0xd0>
    1142:	30 e1       	ldi	r19, 0x10	; 16
    1144:	83 2e       	mov	r8, r19
    1146:	91 2c       	mov	r9, r1
    1148:	e1 2c       	mov	r14, r1
    114a:	40 e1       	ldi	r20, 0x10	; 16
    114c:	f4 2e       	mov	r15, r20
    114e:	88 37       	cpi	r24, 0x78	; 120
    1150:	91 f7       	brne	.-28     	; 0x1136 <cprintf+0x68>
    1152:	f8 01       	movw	r30, r16
    1154:	c0 80       	ld	r12, Z
    1156:	d1 80       	ldd	r13, Z+1	; 0x01
    1158:	0e 5f       	subi	r16, 0xFE	; 254
    115a:	1f 4f       	sbci	r17, 0xFF	; 255
    115c:	84 36       	cpi	r24, 0x64	; 100
    115e:	59 f4       	brne	.+22     	; 0x1176 <cprintf+0xa8>
    1160:	d7 fe       	sbrs	r13, 7
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <cprintf+0xa2>
    1164:	d1 94       	neg	r13
    1166:	c1 94       	neg	r12
    1168:	d1 08       	sbc	r13, r1
    116a:	8d e2       	ldi	r24, 0x2D	; 45
    116c:	0e 94 a9 07 	call	0xf52	; 0xf52 <cputchar>
    1170:	ce 14       	cp	r12, r14
    1172:	df 04       	cpc	r13, r15
    1174:	48 f1       	brcs	.+82     	; 0x11c8 <cprintf+0xfa>
    1176:	c6 01       	movw	r24, r12
    1178:	b7 01       	movw	r22, r14
    117a:	0e 94 3b 09 	call	0x1276	; 0x1276 <__udivmodhi4>
    117e:	2c 01       	movw	r4, r24
    1180:	68 5e       	subi	r22, 0xE8	; 232
    1182:	7d 4f       	sbci	r23, 0xFD	; 253
    1184:	fb 01       	movw	r30, r22
    1186:	80 81       	ld	r24, Z
    1188:	0e 94 a9 07 	call	0xf52	; 0xf52 <cputchar>
    118c:	62 01       	movw	r12, r4
    118e:	c7 01       	movw	r24, r14
    1190:	b4 01       	movw	r22, r8
    1192:	0e 94 3b 09 	call	0x1276	; 0x1276 <__udivmodhi4>
    1196:	7b 01       	movw	r14, r22
    1198:	67 2b       	or	r22, r23
    119a:	69 f7       	brne	.-38     	; 0x1176 <cprintf+0xa8>
    119c:	ce cf       	rjmp	.-100    	; 0x113a <cprintf+0x6c>
    119e:	f8 01       	movw	r30, r16
    11a0:	e0 80       	ld	r14, Z
    11a2:	f1 80       	ldd	r15, Z+1	; 0x01
    11a4:	0e 5f       	subi	r16, 0xFE	; 254
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	f7 01       	movw	r30, r14
    11aa:	81 91       	ld	r24, Z+
    11ac:	7f 01       	movw	r14, r30
    11ae:	88 23       	and	r24, r24
    11b0:	21 f2       	breq	.-120    	; 0x113a <cprintf+0x6c>
    11b2:	0e 94 a9 07 	call	0xf52	; 0xf52 <cputchar>
    11b6:	f8 cf       	rjmp	.-16     	; 0x11a8 <cprintf+0xda>
    11b8:	9a e0       	ldi	r25, 0x0A	; 10
    11ba:	89 2e       	mov	r8, r25
    11bc:	91 2c       	mov	r9, r1
    11be:	20 e1       	ldi	r18, 0x10	; 16
    11c0:	e2 2e       	mov	r14, r18
    11c2:	27 e2       	ldi	r18, 0x27	; 39
    11c4:	f2 2e       	mov	r15, r18
    11c6:	c5 cf       	rjmp	.-118    	; 0x1152 <cprintf+0x84>
    11c8:	c7 01       	movw	r24, r14
    11ca:	b3 01       	movw	r22, r6
    11cc:	0e 94 3b 09 	call	0x1276	; 0x1276 <__udivmodhi4>
    11d0:	7b 01       	movw	r14, r22
    11d2:	62 30       	cpi	r22, 0x02	; 2
    11d4:	71 05       	cpc	r23, r1
    11d6:	60 f6       	brcc	.-104    	; 0x1170 <cprintf+0xa2>
    11d8:	c6 01       	movw	r24, r12
    11da:	0e 94 3b 09 	call	0x1276	; 0x1276 <__udivmodhi4>
    11de:	fb 01       	movw	r30, r22
    11e0:	e8 5e       	subi	r30, 0xE8	; 232
    11e2:	fd 4f       	sbci	r31, 0xFD	; 253
    11e4:	80 81       	ld	r24, Z
    11e6:	a7 cf       	rjmp	.-178    	; 0x1136 <cprintf+0x68>
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	bf 90       	pop	r11
    11fe:	af 90       	pop	r10
    1200:	9f 90       	pop	r9
    1202:	8f 90       	pop	r8
    1204:	7f 90       	pop	r7
    1206:	6f 90       	pop	r6
    1208:	5f 90       	pop	r5
    120a:	4f 90       	pop	r4
    120c:	08 95       	ret

0000120e <main>:

}

int main( void )
{
    robo_Setup();                                          /* initialize HAL for RoboKar     */
    120e:	0e 94 4b 08 	call	0x1096	; 0x1096 <robo_Setup>
    OSInit();                                              /* initialize UCOS-II kernel      */
    1212:	0e 94 3f 05 	call	0xa7e	; 0xa7e <OSInit>

    robo_motorSpeed(STOP_SPEED, STOP_SPEED);               /* Stop the robot                 */
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	0e 94 6e 07 	call	0xedc	; 0xedc <robo_motorSpeed>
    myrobot.rspeed   = STOP_SPEED;                         /* Initialize myrobot states      */
    1222:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <myrobot+0x1>
    1226:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <myrobot>
    myrobot.lspeed   = STOP_SPEED;
    122a:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <myrobot+0x3>
    122e:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <myrobot+0x2>
    myrobot.obstacle = 0;    
    1232:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <myrobot+0x4>
                                  /*  No collisioin                 */

    myrobot.prevError = 0.0;
    1236:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <myrobot+0x5>
    123a:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <myrobot+0x6>
    123e:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <myrobot+0x7>
    1242:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <myrobot+0x8>
    myrobot.integral = 0.0;
    1246:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <myrobot+0x9>
    124a:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <myrobot+0xa>
    124e:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <myrobot+0xb>
    1252:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <myrobot+0xc>
    OSTaskCreate(TaskStart,                                /* create TaskStart Task          */
    1256:	22 e0       	ldi	r18, 0x02	; 2
    1258:	46 eb       	ldi	r20, 0xB6	; 182
    125a:	53 e0       	ldi	r21, 0x03	; 3
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	89 e4       	ldi	r24, 0x49	; 73
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <OSTaskCreate>
                (void *)0,
                (void *)&TaskStartStk[TASK_STK_SZ - 1],
                TASK_START_PRIO);
	robo_Honk(); robo_wait4goPress();                      /* Wait for to GO                 */
    1268:	0e 94 11 08 	call	0x1022	; 0x1022 <robo_Honk>
    126c:	0e 94 37 08 	call	0x106e	; 0x106e <robo_wait4goPress>
    OSStart();                                             /* Start multitasking             */
    1270:	0e 94 a3 03 	call	0x746	; 0x746 <OSStart>
    1274:	ff cf       	rjmp	.-2      	; 0x1274 <main+0x66>

00001276 <__udivmodhi4>:
    1276:	aa 1b       	sub	r26, r26
    1278:	bb 1b       	sub	r27, r27
    127a:	51 e1       	ldi	r21, 0x11	; 17
    127c:	07 c0       	rjmp	.+14     	; 0x128c <__udivmodhi4_ep>

0000127e <__udivmodhi4_loop>:
    127e:	aa 1f       	adc	r26, r26
    1280:	bb 1f       	adc	r27, r27
    1282:	a6 17       	cp	r26, r22
    1284:	b7 07       	cpc	r27, r23
    1286:	10 f0       	brcs	.+4      	; 0x128c <__udivmodhi4_ep>
    1288:	a6 1b       	sub	r26, r22
    128a:	b7 0b       	sbc	r27, r23

0000128c <__udivmodhi4_ep>:
    128c:	88 1f       	adc	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	5a 95       	dec	r21
    1292:	a9 f7       	brne	.-22     	; 0x127e <__udivmodhi4_loop>
    1294:	80 95       	com	r24
    1296:	90 95       	com	r25
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	08 95       	ret

0000129e <__divmodhi4>:
    129e:	97 fb       	bst	r25, 7
    12a0:	07 2e       	mov	r0, r23
    12a2:	16 f4       	brtc	.+4      	; 0x12a8 <__divmodhi4+0xa>
    12a4:	00 94       	com	r0
    12a6:	07 d0       	rcall	.+14     	; 0x12b6 <__divmodhi4_neg1>
    12a8:	77 fd       	sbrc	r23, 7
    12aa:	09 d0       	rcall	.+18     	; 0x12be <__divmodhi4_neg2>
    12ac:	0e 94 3b 09 	call	0x1276	; 0x1276 <__udivmodhi4>
    12b0:	07 fc       	sbrc	r0, 7
    12b2:	05 d0       	rcall	.+10     	; 0x12be <__divmodhi4_neg2>
    12b4:	3e f4       	brtc	.+14     	; 0x12c4 <__divmodhi4_exit>

000012b6 <__divmodhi4_neg1>:
    12b6:	90 95       	com	r25
    12b8:	81 95       	neg	r24
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	08 95       	ret

000012be <__divmodhi4_neg2>:
    12be:	70 95       	com	r23
    12c0:	61 95       	neg	r22
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255

000012c4 <__divmodhi4_exit>:
    12c4:	08 95       	ret

000012c6 <__udivmodsi4>:
    12c6:	a1 e2       	ldi	r26, 0x21	; 33
    12c8:	1a 2e       	mov	r1, r26
    12ca:	aa 1b       	sub	r26, r26
    12cc:	bb 1b       	sub	r27, r27
    12ce:	fd 01       	movw	r30, r26
    12d0:	0d c0       	rjmp	.+26     	; 0x12ec <__udivmodsi4_ep>

000012d2 <__udivmodsi4_loop>:
    12d2:	aa 1f       	adc	r26, r26
    12d4:	bb 1f       	adc	r27, r27
    12d6:	ee 1f       	adc	r30, r30
    12d8:	ff 1f       	adc	r31, r31
    12da:	a2 17       	cp	r26, r18
    12dc:	b3 07       	cpc	r27, r19
    12de:	e4 07       	cpc	r30, r20
    12e0:	f5 07       	cpc	r31, r21
    12e2:	20 f0       	brcs	.+8      	; 0x12ec <__udivmodsi4_ep>
    12e4:	a2 1b       	sub	r26, r18
    12e6:	b3 0b       	sbc	r27, r19
    12e8:	e4 0b       	sbc	r30, r20
    12ea:	f5 0b       	sbc	r31, r21

000012ec <__udivmodsi4_ep>:
    12ec:	66 1f       	adc	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	1a 94       	dec	r1
    12f6:	69 f7       	brne	.-38     	; 0x12d2 <__udivmodsi4_loop>
    12f8:	60 95       	com	r22
    12fa:	70 95       	com	r23
    12fc:	80 95       	com	r24
    12fe:	90 95       	com	r25
    1300:	9b 01       	movw	r18, r22
    1302:	ac 01       	movw	r20, r24
    1304:	bd 01       	movw	r22, r26
    1306:	cf 01       	movw	r24, r30
    1308:	08 95       	ret

0000130a <__umulhisi3>:
    130a:	a2 9f       	mul	r26, r18
    130c:	b0 01       	movw	r22, r0
    130e:	b3 9f       	mul	r27, r19
    1310:	c0 01       	movw	r24, r0
    1312:	a3 9f       	mul	r26, r19
    1314:	70 0d       	add	r23, r0
    1316:	81 1d       	adc	r24, r1
    1318:	11 24       	eor	r1, r1
    131a:	91 1d       	adc	r25, r1
    131c:	b2 9f       	mul	r27, r18
    131e:	70 0d       	add	r23, r0
    1320:	81 1d       	adc	r24, r1
    1322:	11 24       	eor	r1, r1
    1324:	91 1d       	adc	r25, r1
    1326:	08 95       	ret

00001328 <__muluhisi3>:
    1328:	0e 94 85 09 	call	0x130a	; 0x130a <__umulhisi3>
    132c:	a5 9f       	mul	r26, r21
    132e:	90 0d       	add	r25, r0
    1330:	b4 9f       	mul	r27, r20
    1332:	90 0d       	add	r25, r0
    1334:	a4 9f       	mul	r26, r20
    1336:	80 0d       	add	r24, r0
    1338:	91 1d       	adc	r25, r1
    133a:	11 24       	eor	r1, r1
    133c:	08 95       	ret

0000133e <__subsf3>:
    133e:	50 58       	subi	r21, 0x80	; 128

00001340 <__addsf3>:
    1340:	bb 27       	eor	r27, r27
    1342:	aa 27       	eor	r26, r26
    1344:	0e 94 b7 09 	call	0x136e	; 0x136e <__addsf3x>
    1348:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_round>
    134c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fp_pscA>
    1350:	38 f0       	brcs	.+14     	; 0x1360 <__addsf3+0x20>
    1352:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__fp_pscB>
    1356:	20 f0       	brcs	.+8      	; 0x1360 <__addsf3+0x20>
    1358:	39 f4       	brne	.+14     	; 0x1368 <__addsf3+0x28>
    135a:	9f 3f       	cpi	r25, 0xFF	; 255
    135c:	19 f4       	brne	.+6      	; 0x1364 <__addsf3+0x24>
    135e:	26 f4       	brtc	.+8      	; 0x1368 <__addsf3+0x28>
    1360:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__fp_nan>
    1364:	0e f4       	brtc	.+2      	; 0x1368 <__addsf3+0x28>
    1366:	e0 95       	com	r30
    1368:	e7 fb       	bst	r30, 7
    136a:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__fp_inf>

0000136e <__addsf3x>:
    136e:	e9 2f       	mov	r30, r25
    1370:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__fp_split3>
    1374:	58 f3       	brcs	.-42     	; 0x134c <__addsf3+0xc>
    1376:	ba 17       	cp	r27, r26
    1378:	62 07       	cpc	r22, r18
    137a:	73 07       	cpc	r23, r19
    137c:	84 07       	cpc	r24, r20
    137e:	95 07       	cpc	r25, r21
    1380:	20 f0       	brcs	.+8      	; 0x138a <__addsf3x+0x1c>
    1382:	79 f4       	brne	.+30     	; 0x13a2 <__addsf3x+0x34>
    1384:	a6 f5       	brtc	.+104    	; 0x13ee <__addsf3x+0x80>
    1386:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__fp_zero>
    138a:	0e f4       	brtc	.+2      	; 0x138e <__addsf3x+0x20>
    138c:	e0 95       	com	r30
    138e:	0b 2e       	mov	r0, r27
    1390:	ba 2f       	mov	r27, r26
    1392:	a0 2d       	mov	r26, r0
    1394:	0b 01       	movw	r0, r22
    1396:	b9 01       	movw	r22, r18
    1398:	90 01       	movw	r18, r0
    139a:	0c 01       	movw	r0, r24
    139c:	ca 01       	movw	r24, r20
    139e:	a0 01       	movw	r20, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	ff 27       	eor	r31, r31
    13a4:	59 1b       	sub	r21, r25
    13a6:	99 f0       	breq	.+38     	; 0x13ce <__addsf3x+0x60>
    13a8:	59 3f       	cpi	r21, 0xF9	; 249
    13aa:	50 f4       	brcc	.+20     	; 0x13c0 <__addsf3x+0x52>
    13ac:	50 3e       	cpi	r21, 0xE0	; 224
    13ae:	68 f1       	brcs	.+90     	; 0x140a <__addsf3x+0x9c>
    13b0:	1a 16       	cp	r1, r26
    13b2:	f0 40       	sbci	r31, 0x00	; 0
    13b4:	a2 2f       	mov	r26, r18
    13b6:	23 2f       	mov	r18, r19
    13b8:	34 2f       	mov	r19, r20
    13ba:	44 27       	eor	r20, r20
    13bc:	58 5f       	subi	r21, 0xF8	; 248
    13be:	f3 cf       	rjmp	.-26     	; 0x13a6 <__addsf3x+0x38>
    13c0:	46 95       	lsr	r20
    13c2:	37 95       	ror	r19
    13c4:	27 95       	ror	r18
    13c6:	a7 95       	ror	r26
    13c8:	f0 40       	sbci	r31, 0x00	; 0
    13ca:	53 95       	inc	r21
    13cc:	c9 f7       	brne	.-14     	; 0x13c0 <__addsf3x+0x52>
    13ce:	7e f4       	brtc	.+30     	; 0x13ee <__addsf3x+0x80>
    13d0:	1f 16       	cp	r1, r31
    13d2:	ba 0b       	sbc	r27, r26
    13d4:	62 0b       	sbc	r22, r18
    13d6:	73 0b       	sbc	r23, r19
    13d8:	84 0b       	sbc	r24, r20
    13da:	ba f0       	brmi	.+46     	; 0x140a <__addsf3x+0x9c>
    13dc:	91 50       	subi	r25, 0x01	; 1
    13de:	a1 f0       	breq	.+40     	; 0x1408 <__addsf3x+0x9a>
    13e0:	ff 0f       	add	r31, r31
    13e2:	bb 1f       	adc	r27, r27
    13e4:	66 1f       	adc	r22, r22
    13e6:	77 1f       	adc	r23, r23
    13e8:	88 1f       	adc	r24, r24
    13ea:	c2 f7       	brpl	.-16     	; 0x13dc <__addsf3x+0x6e>
    13ec:	0e c0       	rjmp	.+28     	; 0x140a <__addsf3x+0x9c>
    13ee:	ba 0f       	add	r27, r26
    13f0:	62 1f       	adc	r22, r18
    13f2:	73 1f       	adc	r23, r19
    13f4:	84 1f       	adc	r24, r20
    13f6:	48 f4       	brcc	.+18     	; 0x140a <__addsf3x+0x9c>
    13f8:	87 95       	ror	r24
    13fa:	77 95       	ror	r23
    13fc:	67 95       	ror	r22
    13fe:	b7 95       	ror	r27
    1400:	f7 95       	ror	r31
    1402:	9e 3f       	cpi	r25, 0xFE	; 254
    1404:	08 f0       	brcs	.+2      	; 0x1408 <__addsf3x+0x9a>
    1406:	b0 cf       	rjmp	.-160    	; 0x1368 <__addsf3+0x28>
    1408:	93 95       	inc	r25
    140a:	88 0f       	add	r24, r24
    140c:	08 f0       	brcs	.+2      	; 0x1410 <__addsf3x+0xa2>
    140e:	99 27       	eor	r25, r25
    1410:	ee 0f       	add	r30, r30
    1412:	97 95       	ror	r25
    1414:	87 95       	ror	r24
    1416:	08 95       	ret

00001418 <__cmpsf2>:
    1418:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_cmp>
    141c:	08 f4       	brcc	.+2      	; 0x1420 <__cmpsf2+0x8>
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	08 95       	ret

00001422 <__fixsfsi>:
    1422:	0e 94 18 0a 	call	0x1430	; 0x1430 <__fixunssfsi>
    1426:	68 94       	set
    1428:	b1 11       	cpse	r27, r1
    142a:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__fp_szero>
    142e:	08 95       	ret

00001430 <__fixunssfsi>:
    1430:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__fp_splitA>
    1434:	88 f0       	brcs	.+34     	; 0x1458 <__fixunssfsi+0x28>
    1436:	9f 57       	subi	r25, 0x7F	; 127
    1438:	98 f0       	brcs	.+38     	; 0x1460 <__fixunssfsi+0x30>
    143a:	b9 2f       	mov	r27, r25
    143c:	99 27       	eor	r25, r25
    143e:	b7 51       	subi	r27, 0x17	; 23
    1440:	b0 f0       	brcs	.+44     	; 0x146e <__fixunssfsi+0x3e>
    1442:	e1 f0       	breq	.+56     	; 0x147c <__fixunssfsi+0x4c>
    1444:	66 0f       	add	r22, r22
    1446:	77 1f       	adc	r23, r23
    1448:	88 1f       	adc	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	1a f0       	brmi	.+6      	; 0x1454 <__fixunssfsi+0x24>
    144e:	ba 95       	dec	r27
    1450:	c9 f7       	brne	.-14     	; 0x1444 <__fixunssfsi+0x14>
    1452:	14 c0       	rjmp	.+40     	; 0x147c <__fixunssfsi+0x4c>
    1454:	b1 30       	cpi	r27, 0x01	; 1
    1456:	91 f0       	breq	.+36     	; 0x147c <__fixunssfsi+0x4c>
    1458:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fp_zero>
    145c:	b1 e0       	ldi	r27, 0x01	; 1
    145e:	08 95       	ret
    1460:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__fp_zero>
    1464:	67 2f       	mov	r22, r23
    1466:	78 2f       	mov	r23, r24
    1468:	88 27       	eor	r24, r24
    146a:	b8 5f       	subi	r27, 0xF8	; 248
    146c:	39 f0       	breq	.+14     	; 0x147c <__fixunssfsi+0x4c>
    146e:	b9 3f       	cpi	r27, 0xF9	; 249
    1470:	cc f3       	brlt	.-14     	; 0x1464 <__fixunssfsi+0x34>
    1472:	86 95       	lsr	r24
    1474:	77 95       	ror	r23
    1476:	67 95       	ror	r22
    1478:	b3 95       	inc	r27
    147a:	d9 f7       	brne	.-10     	; 0x1472 <__fixunssfsi+0x42>
    147c:	3e f4       	brtc	.+14     	; 0x148c <__fixunssfsi+0x5c>
    147e:	90 95       	com	r25
    1480:	80 95       	com	r24
    1482:	70 95       	com	r23
    1484:	61 95       	neg	r22
    1486:	7f 4f       	sbci	r23, 0xFF	; 255
    1488:	8f 4f       	sbci	r24, 0xFF	; 255
    148a:	9f 4f       	sbci	r25, 0xFF	; 255
    148c:	08 95       	ret

0000148e <__floatunsisf>:
    148e:	e8 94       	clt
    1490:	09 c0       	rjmp	.+18     	; 0x14a4 <__floatsisf+0x12>

00001492 <__floatsisf>:
    1492:	97 fb       	bst	r25, 7
    1494:	3e f4       	brtc	.+14     	; 0x14a4 <__floatsisf+0x12>
    1496:	90 95       	com	r25
    1498:	80 95       	com	r24
    149a:	70 95       	com	r23
    149c:	61 95       	neg	r22
    149e:	7f 4f       	sbci	r23, 0xFF	; 255
    14a0:	8f 4f       	sbci	r24, 0xFF	; 255
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	99 23       	and	r25, r25
    14a6:	a9 f0       	breq	.+42     	; 0x14d2 <__floatsisf+0x40>
    14a8:	f9 2f       	mov	r31, r25
    14aa:	96 e9       	ldi	r25, 0x96	; 150
    14ac:	bb 27       	eor	r27, r27
    14ae:	93 95       	inc	r25
    14b0:	f6 95       	lsr	r31
    14b2:	87 95       	ror	r24
    14b4:	77 95       	ror	r23
    14b6:	67 95       	ror	r22
    14b8:	b7 95       	ror	r27
    14ba:	f1 11       	cpse	r31, r1
    14bc:	f8 cf       	rjmp	.-16     	; 0x14ae <__floatsisf+0x1c>
    14be:	fa f4       	brpl	.+62     	; 0x14fe <__floatsisf+0x6c>
    14c0:	bb 0f       	add	r27, r27
    14c2:	11 f4       	brne	.+4      	; 0x14c8 <__floatsisf+0x36>
    14c4:	60 ff       	sbrs	r22, 0
    14c6:	1b c0       	rjmp	.+54     	; 0x14fe <__floatsisf+0x6c>
    14c8:	6f 5f       	subi	r22, 0xFF	; 255
    14ca:	7f 4f       	sbci	r23, 0xFF	; 255
    14cc:	8f 4f       	sbci	r24, 0xFF	; 255
    14ce:	9f 4f       	sbci	r25, 0xFF	; 255
    14d0:	16 c0       	rjmp	.+44     	; 0x14fe <__floatsisf+0x6c>
    14d2:	88 23       	and	r24, r24
    14d4:	11 f0       	breq	.+4      	; 0x14da <__floatsisf+0x48>
    14d6:	96 e9       	ldi	r25, 0x96	; 150
    14d8:	11 c0       	rjmp	.+34     	; 0x14fc <__floatsisf+0x6a>
    14da:	77 23       	and	r23, r23
    14dc:	21 f0       	breq	.+8      	; 0x14e6 <__floatsisf+0x54>
    14de:	9e e8       	ldi	r25, 0x8E	; 142
    14e0:	87 2f       	mov	r24, r23
    14e2:	76 2f       	mov	r23, r22
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <__floatsisf+0x5e>
    14e6:	66 23       	and	r22, r22
    14e8:	71 f0       	breq	.+28     	; 0x1506 <__floatsisf+0x74>
    14ea:	96 e8       	ldi	r25, 0x86	; 134
    14ec:	86 2f       	mov	r24, r22
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	2a f0       	brmi	.+10     	; 0x14fe <__floatsisf+0x6c>
    14f4:	9a 95       	dec	r25
    14f6:	66 0f       	add	r22, r22
    14f8:	77 1f       	adc	r23, r23
    14fa:	88 1f       	adc	r24, r24
    14fc:	da f7       	brpl	.-10     	; 0x14f4 <__floatsisf+0x62>
    14fe:	88 0f       	add	r24, r24
    1500:	96 95       	lsr	r25
    1502:	87 95       	ror	r24
    1504:	97 f9       	bld	r25, 7
    1506:	08 95       	ret

00001508 <__fp_cmp>:
    1508:	99 0f       	add	r25, r25
    150a:	00 08       	sbc	r0, r0
    150c:	55 0f       	add	r21, r21
    150e:	aa 0b       	sbc	r26, r26
    1510:	e0 e8       	ldi	r30, 0x80	; 128
    1512:	fe ef       	ldi	r31, 0xFE	; 254
    1514:	16 16       	cp	r1, r22
    1516:	17 06       	cpc	r1, r23
    1518:	e8 07       	cpc	r30, r24
    151a:	f9 07       	cpc	r31, r25
    151c:	c0 f0       	brcs	.+48     	; 0x154e <__fp_cmp+0x46>
    151e:	12 16       	cp	r1, r18
    1520:	13 06       	cpc	r1, r19
    1522:	e4 07       	cpc	r30, r20
    1524:	f5 07       	cpc	r31, r21
    1526:	98 f0       	brcs	.+38     	; 0x154e <__fp_cmp+0x46>
    1528:	62 1b       	sub	r22, r18
    152a:	73 0b       	sbc	r23, r19
    152c:	84 0b       	sbc	r24, r20
    152e:	95 0b       	sbc	r25, r21
    1530:	39 f4       	brne	.+14     	; 0x1540 <__fp_cmp+0x38>
    1532:	0a 26       	eor	r0, r26
    1534:	61 f0       	breq	.+24     	; 0x154e <__fp_cmp+0x46>
    1536:	23 2b       	or	r18, r19
    1538:	24 2b       	or	r18, r20
    153a:	25 2b       	or	r18, r21
    153c:	21 f4       	brne	.+8      	; 0x1546 <__fp_cmp+0x3e>
    153e:	08 95       	ret
    1540:	0a 26       	eor	r0, r26
    1542:	09 f4       	brne	.+2      	; 0x1546 <__fp_cmp+0x3e>
    1544:	a1 40       	sbci	r26, 0x01	; 1
    1546:	a6 95       	lsr	r26
    1548:	8f ef       	ldi	r24, 0xFF	; 255
    154a:	81 1d       	adc	r24, r1
    154c:	81 1d       	adc	r24, r1
    154e:	08 95       	ret

00001550 <__fp_inf>:
    1550:	97 f9       	bld	r25, 7
    1552:	9f 67       	ori	r25, 0x7F	; 127
    1554:	80 e8       	ldi	r24, 0x80	; 128
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	08 95       	ret

0000155c <__fp_nan>:
    155c:	9f ef       	ldi	r25, 0xFF	; 255
    155e:	80 ec       	ldi	r24, 0xC0	; 192
    1560:	08 95       	ret

00001562 <__fp_pscA>:
    1562:	00 24       	eor	r0, r0
    1564:	0a 94       	dec	r0
    1566:	16 16       	cp	r1, r22
    1568:	17 06       	cpc	r1, r23
    156a:	18 06       	cpc	r1, r24
    156c:	09 06       	cpc	r0, r25
    156e:	08 95       	ret

00001570 <__fp_pscB>:
    1570:	00 24       	eor	r0, r0
    1572:	0a 94       	dec	r0
    1574:	12 16       	cp	r1, r18
    1576:	13 06       	cpc	r1, r19
    1578:	14 06       	cpc	r1, r20
    157a:	05 06       	cpc	r0, r21
    157c:	08 95       	ret

0000157e <__fp_round>:
    157e:	09 2e       	mov	r0, r25
    1580:	03 94       	inc	r0
    1582:	00 0c       	add	r0, r0
    1584:	11 f4       	brne	.+4      	; 0x158a <__fp_round+0xc>
    1586:	88 23       	and	r24, r24
    1588:	52 f0       	brmi	.+20     	; 0x159e <__fp_round+0x20>
    158a:	bb 0f       	add	r27, r27
    158c:	40 f4       	brcc	.+16     	; 0x159e <__fp_round+0x20>
    158e:	bf 2b       	or	r27, r31
    1590:	11 f4       	brne	.+4      	; 0x1596 <__fp_round+0x18>
    1592:	60 ff       	sbrs	r22, 0
    1594:	04 c0       	rjmp	.+8      	; 0x159e <__fp_round+0x20>
    1596:	6f 5f       	subi	r22, 0xFF	; 255
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	8f 4f       	sbci	r24, 0xFF	; 255
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	08 95       	ret

000015a0 <__fp_split3>:
    15a0:	57 fd       	sbrc	r21, 7
    15a2:	90 58       	subi	r25, 0x80	; 128
    15a4:	44 0f       	add	r20, r20
    15a6:	55 1f       	adc	r21, r21
    15a8:	59 f0       	breq	.+22     	; 0x15c0 <__fp_splitA+0x10>
    15aa:	5f 3f       	cpi	r21, 0xFF	; 255
    15ac:	71 f0       	breq	.+28     	; 0x15ca <__fp_splitA+0x1a>
    15ae:	47 95       	ror	r20

000015b0 <__fp_splitA>:
    15b0:	88 0f       	add	r24, r24
    15b2:	97 fb       	bst	r25, 7
    15b4:	99 1f       	adc	r25, r25
    15b6:	61 f0       	breq	.+24     	; 0x15d0 <__fp_splitA+0x20>
    15b8:	9f 3f       	cpi	r25, 0xFF	; 255
    15ba:	79 f0       	breq	.+30     	; 0x15da <__fp_splitA+0x2a>
    15bc:	87 95       	ror	r24
    15be:	08 95       	ret
    15c0:	12 16       	cp	r1, r18
    15c2:	13 06       	cpc	r1, r19
    15c4:	14 06       	cpc	r1, r20
    15c6:	55 1f       	adc	r21, r21
    15c8:	f2 cf       	rjmp	.-28     	; 0x15ae <__fp_split3+0xe>
    15ca:	46 95       	lsr	r20
    15cc:	f1 df       	rcall	.-30     	; 0x15b0 <__fp_splitA>
    15ce:	08 c0       	rjmp	.+16     	; 0x15e0 <__fp_splitA+0x30>
    15d0:	16 16       	cp	r1, r22
    15d2:	17 06       	cpc	r1, r23
    15d4:	18 06       	cpc	r1, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	f1 cf       	rjmp	.-30     	; 0x15bc <__fp_splitA+0xc>
    15da:	86 95       	lsr	r24
    15dc:	71 05       	cpc	r23, r1
    15de:	61 05       	cpc	r22, r1
    15e0:	08 94       	sec
    15e2:	08 95       	ret

000015e4 <__fp_zero>:
    15e4:	e8 94       	clt

000015e6 <__fp_szero>:
    15e6:	bb 27       	eor	r27, r27
    15e8:	66 27       	eor	r22, r22
    15ea:	77 27       	eor	r23, r23
    15ec:	cb 01       	movw	r24, r22
    15ee:	97 f9       	bld	r25, 7
    15f0:	08 95       	ret

000015f2 <__gesf2>:
    15f2:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_cmp>
    15f6:	08 f4       	brcc	.+2      	; 0x15fa <__gesf2+0x8>
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	08 95       	ret

000015fc <__mulsf3>:
    15fc:	0e 94 11 0b 	call	0x1622	; 0x1622 <__mulsf3x>
    1600:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_round>
    1604:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fp_pscA>
    1608:	38 f0       	brcs	.+14     	; 0x1618 <__mulsf3+0x1c>
    160a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <__fp_pscB>
    160e:	20 f0       	brcs	.+8      	; 0x1618 <__mulsf3+0x1c>
    1610:	95 23       	and	r25, r21
    1612:	11 f0       	breq	.+4      	; 0x1618 <__mulsf3+0x1c>
    1614:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__fp_inf>
    1618:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__fp_nan>
    161c:	11 24       	eor	r1, r1
    161e:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__fp_szero>

00001622 <__mulsf3x>:
    1622:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__fp_split3>
    1626:	70 f3       	brcs	.-36     	; 0x1604 <__mulsf3+0x8>

00001628 <__mulsf3_pse>:
    1628:	95 9f       	mul	r25, r21
    162a:	c1 f3       	breq	.-16     	; 0x161c <__mulsf3+0x20>
    162c:	95 0f       	add	r25, r21
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	55 1f       	adc	r21, r21
    1632:	62 9f       	mul	r22, r18
    1634:	f0 01       	movw	r30, r0
    1636:	72 9f       	mul	r23, r18
    1638:	bb 27       	eor	r27, r27
    163a:	f0 0d       	add	r31, r0
    163c:	b1 1d       	adc	r27, r1
    163e:	63 9f       	mul	r22, r19
    1640:	aa 27       	eor	r26, r26
    1642:	f0 0d       	add	r31, r0
    1644:	b1 1d       	adc	r27, r1
    1646:	aa 1f       	adc	r26, r26
    1648:	64 9f       	mul	r22, r20
    164a:	66 27       	eor	r22, r22
    164c:	b0 0d       	add	r27, r0
    164e:	a1 1d       	adc	r26, r1
    1650:	66 1f       	adc	r22, r22
    1652:	82 9f       	mul	r24, r18
    1654:	22 27       	eor	r18, r18
    1656:	b0 0d       	add	r27, r0
    1658:	a1 1d       	adc	r26, r1
    165a:	62 1f       	adc	r22, r18
    165c:	73 9f       	mul	r23, r19
    165e:	b0 0d       	add	r27, r0
    1660:	a1 1d       	adc	r26, r1
    1662:	62 1f       	adc	r22, r18
    1664:	83 9f       	mul	r24, r19
    1666:	a0 0d       	add	r26, r0
    1668:	61 1d       	adc	r22, r1
    166a:	22 1f       	adc	r18, r18
    166c:	74 9f       	mul	r23, r20
    166e:	33 27       	eor	r19, r19
    1670:	a0 0d       	add	r26, r0
    1672:	61 1d       	adc	r22, r1
    1674:	23 1f       	adc	r18, r19
    1676:	84 9f       	mul	r24, r20
    1678:	60 0d       	add	r22, r0
    167a:	21 1d       	adc	r18, r1
    167c:	82 2f       	mov	r24, r18
    167e:	76 2f       	mov	r23, r22
    1680:	6a 2f       	mov	r22, r26
    1682:	11 24       	eor	r1, r1
    1684:	9f 57       	subi	r25, 0x7F	; 127
    1686:	50 40       	sbci	r21, 0x00	; 0
    1688:	9a f0       	brmi	.+38     	; 0x16b0 <__mulsf3_pse+0x88>
    168a:	f1 f0       	breq	.+60     	; 0x16c8 <__mulsf3_pse+0xa0>
    168c:	88 23       	and	r24, r24
    168e:	4a f0       	brmi	.+18     	; 0x16a2 <__mulsf3_pse+0x7a>
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	bb 1f       	adc	r27, r27
    1696:	66 1f       	adc	r22, r22
    1698:	77 1f       	adc	r23, r23
    169a:	88 1f       	adc	r24, r24
    169c:	91 50       	subi	r25, 0x01	; 1
    169e:	50 40       	sbci	r21, 0x00	; 0
    16a0:	a9 f7       	brne	.-22     	; 0x168c <__mulsf3_pse+0x64>
    16a2:	9e 3f       	cpi	r25, 0xFE	; 254
    16a4:	51 05       	cpc	r21, r1
    16a6:	80 f0       	brcs	.+32     	; 0x16c8 <__mulsf3_pse+0xa0>
    16a8:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__fp_inf>
    16ac:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__fp_szero>
    16b0:	5f 3f       	cpi	r21, 0xFF	; 255
    16b2:	e4 f3       	brlt	.-8      	; 0x16ac <__mulsf3_pse+0x84>
    16b4:	98 3e       	cpi	r25, 0xE8	; 232
    16b6:	d4 f3       	brlt	.-12     	; 0x16ac <__mulsf3_pse+0x84>
    16b8:	86 95       	lsr	r24
    16ba:	77 95       	ror	r23
    16bc:	67 95       	ror	r22
    16be:	b7 95       	ror	r27
    16c0:	f7 95       	ror	r31
    16c2:	e7 95       	ror	r30
    16c4:	9f 5f       	subi	r25, 0xFF	; 255
    16c6:	c1 f7       	brne	.-16     	; 0x16b8 <__mulsf3_pse+0x90>
    16c8:	fe 2b       	or	r31, r30
    16ca:	88 0f       	add	r24, r24
    16cc:	91 1d       	adc	r25, r1
    16ce:	96 95       	lsr	r25
    16d0:	87 95       	ror	r24
    16d2:	97 f9       	bld	r25, 7
    16d4:	08 95       	ret

000016d6 <_exit>:
    16d6:	f8 94       	cli

000016d8 <__stop_program>:
    16d8:	ff cf       	rjmp	.-2      	; 0x16d8 <__stop_program>
